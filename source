###############################################
setwd("D://danni//1")
library(ggplot2)
library(RColorBrewer)  #配色R包#
library(survival)
library(survminer)
###设置颜色###
display.brewer.all(type = "seq")
lb_colors1<-brewer.pal(9,"BuGn");lb_colors1<-lb_colors1[5:7]  #选择个数与颜色#
lb_colors2<-brewer.pal(9,"PuBu");lb_colors2<-lb_colors2[5:7]
lb_colors45<-brewer.pal(9,"Purples");lb_colors45<-lb_colors45[5:7]
display.brewer.all(type = "qual")
display.brewer.all(type = "div")
lb_colors3<-brewer.pal(11,"BrBG");lb_colors3<-lb_colors3[4:2]
lb_colors<-c(lb_colors1,lb_colors2,lb_colors3,lb_colors45)




cli<-read.table("clinical.txt",header = T,sep = "\t",row.names = 1)
cli$category<-as.factor(cli$category)
#row.names(cli)<-cli$X;cli<-cli[,-1]



###提出问题###
ggplot(cli,aes(x= stage,fill = class)) +
  geom_bar(na.rm = T,position = "fill")  +
  scale_fill_manual( values = c("#A1BC61","#EE9A49","#EEB422")) +
  #coord_flip()+
  theme(axis.text.x = element_text(size = 10),    ###主题
        axis.text.y = element_text(size = 10),
        #legend.position = "top",
        #legend.background = element_rect(fill="transparent", size=.5),
        axis.line = element_line(size = 0.5, colour = "black"),
        axis.title = element_blank(),
        strip.background = element_blank(),
        strip.text = element_blank(),
        panel.background = element_blank(),
        panel.border = element_blank(),
        panel.grid = element_blank())

cli$relapse<-as.factor(cli$relapse)
ggplot(cli,aes(x= stage,fill = relapse)) +
  geom_bar(na.rm = T,position = "fill")  +
  scale_fill_manual( values = c("#A1BC61","#EE9A49")) +
  #coord_flip()+
  theme(axis.text.x = element_text(size = 10),    ###主题
        axis.text.y = element_text(size = 10),
        #legend.position = "top",
        #legend.background = element_rect(fill="transparent", size=.5),
        axis.line = element_line(size = 0.5, colour = "black"),
        axis.title = element_blank(),
        strip.background = element_blank(),
        strip.text = element_blank(),
        panel.background = element_blank(),
        panel.border = element_blank(),
        panel.grid = element_blank())

cli$transfer<-as.factor(cli$transfer)
ggplot(cli,aes(x= stage,fill = transfer)) +
  geom_bar(na.rm = T,position = "fill")  +
  scale_fill_manual( values = c("#A1BC61","#EEB422")) +
  #coord_flip()+
  theme(axis.text.x = element_text(size = 10),    ###主题
        axis.text.y = element_text(size = 10),
        #legend.position = "top",
        #legend.background = element_rect(fill="transparent", size=.5),
        axis.line = element_line(size = 0.5, colour = "black"),
        axis.title = element_blank(),
        strip.background = element_blank(),
        strip.text = element_blank(),
        panel.background = element_blank(),
        panel.border = element_blank(),
        panel.grid = element_blank())



##生存##
time<-read.table("time.txt",header = T,sep = "\t")
time<-time[-which(duplicated(substring(time$sampleID,1,12))),]
time$sampleID<-substring(time$sampleID,1,12)
time$sampleID<-gsub("\\.","-",time$sampleID)   ##\\转义##
row.names(time)<-time$sampleID;time<-time[,-1]
ao<-intersect(row.names(cli),row.names(time))
cli_time<-cbind(cli[ao,],time[ao,])
for(i in 1:8324){
  if(is.na(cli_time$days_to_death[i])){
    cli_time$days_to_death[i]<-cli_time$days_to_last_followup[i]
  }}

#总生存#
library(survival)
kmsurvival <- survfit(Surv(days_to_death, vital_status) ~ class,data = cli_time)
dif <- survdiff(Surv(days_to_death, vital_status) ~ class,data = cli_time)#求生存时间
p_value <- pchisq(dif$chisq,1,lower.tail=F)    #1.592301e-38
plot(kmsurvival,col=c("#8ec06c","#788cb6","#cd595a"),xlab='Survival time',ylab='Survival probabilities',lwd = 3.5,cex.axis = 2.0,cex.lab = 2.0)

#stage#
cli_s1<-cli_time[which(cli_time$stage == "Stage I"),]
kmsurvival <- survfit(Surv(days_to_death, vital_status) ~ category,data = cli_s1)
dif <- survdiff(Surv(days_to_death, vital_status) ~ category,data = cli_s1)#求生存时间
p_value <- pchisq(dif$chisq,1,lower.tail=F)    #4.439083e-11
plot(kmsurvival,col=c("#8ec06c","#788cb6","#cd595a"),xlab='Survival time',ylab='Survival probabilities',lwd = 3.5,cex.axis = 2.0,cex.lab = 2.0)

cli_s1r<-rbind(cli_s1[which(cli_s1$class == "normal"),],cli_s1[which(cli_s1$class == "relapse"),])
kmsurvival <- survfit(Surv(days_to_death, vital_status) ~ category,data = cli_s1r)
dif <- survdiff(Surv(days_to_death, vital_status) ~ category,data = cli_s1r)#求生存时间
p_value <- pchisq(dif$chisq,1,lower.tail=F)    #0.3714224
plot(kmsurvival,col=c("#8ec06c","#788cb6"),xlab='Survival time',ylab='Survival probabilities',lwd = 3.5,cex.axis = 2.0,cex.lab = 2.0)



cli_s2<-cli_time[which(cli_time$stage == "Stage II"),]
kmsurvival <- survfit(Surv(days_to_death, vital_status) ~ category,data = cli_s2)
dif <- survdiff(Surv(days_to_death, vital_status) ~ category,data = cli_s2)#求生存时间
p_value <- pchisq(dif$chisq,1,lower.tail=F)    #1.852486e-21
plot(kmsurvival,col=c("#8ec06c","#788cb6","#cd595a"),xlab='Survival time',ylab='Survival probabilities',lwd = 3.5,cex.axis = 2.0,cex.lab = 2.0)

cli_s3<-cli_time[which(cli_time$stage == "Stage III"),]
kmsurvival <- survfit(Surv(days_to_death, vital_status) ~ category,data = cli_s3)
dif <- survdiff(Surv(days_to_death, vital_status) ~ category,data = cli_s3)#求生存时间
p_value <- pchisq(dif$chisq,1,lower.tail=F)   #5.203858e-14 
plot(kmsurvival,col=c("#8ec06c","#788cb6","#cd595a"),xlab='Survival time',ylab='Survival probabilities',lwd = 3.5,cex.axis = 2.0,cex.lab = 2.0)

cli_s45<-rbind(cli_time[which(cli_time$stage == "Stage IV"),],cli_time[which(cli_time$stage == "Stage X"),])
kmsurvival <- survfit(Surv(days_to_death, vital_status) ~ category,data = cli_s45)
dif <- survdiff(Surv(days_to_death, vital_status) ~ category,data = cli_s45)#求生存时间
p_value <- pchisq(dif$chisq,1,lower.tail=F)    #0.1331998
plot(kmsurvival,col=c("#8ec06c","#788cb6","#cd595a"),xlab='Survival time',ylab='Survival probabilities',lwd = 3.5,cex.axis = 2.0,cex.lab = 2.0)




##风险##
immu_cox<-immu[intersect(row.names(immu),row.names(cli)),]
cox<-cbind(immu_cox[,c(32,33,34,35)],cli[intersect(row.names(immu),row.names(cli)),])
#根据stage分类#
cox_s1<-cox[which(cox$stage == "Stage I"),]
rtcox1<-summary(coxph(Surv(OS.Time, OS) ~ class, data = cox_s1))$coefficients
rtCI1<-as.data.frame(summary(coxph(Surv(OS.Time, OS) ~ class, data = cox_s1))[8])[,c(3,4)]
rtcox1<-as.data.frame(rtcox1);rtcox1$stage<-"Stage I";rtCI1<-as.data.frame(rtCI1)

cox_s2<-cox[which(cox$stage == "Stage II"),]
rtcox2<-summary(coxph(Surv(OS.Time, OS) ~ class, data = cox_s2))$coefficients
rtCI2<-as.data.frame(summary(coxph(Surv(OS.Time, OS) ~ class, data = cox_s2))[8])[,c(3,4)]
rtcox2<-as.data.frame(rtcox2);rtcox2$stage<-"Stage II";rtCI2<-as.data.frame(rtCI2)

cox_s3<-cox[which(cox$stage == "Stage III"),]
rtcox3<-summary(coxph(Surv(OS.Time, OS) ~ class, data = cox_s3))$coefficients
rtCI3<-as.data.frame(summary(coxph(Surv(OS.Time, OS) ~ class, data = cox_s3))[8])[,c(3,4)]
rtcox3<-as.data.frame(rtcox3);rtcox3$stage<-"Stage III";rtCI3<-as.data.frame(rtCI3)

cox_s45<-rbind(cox[which(cox$stage == "Stage IV"),],cox[which(cox$stage == "Stage X"),])
rtcox45<-summary(coxph(Surv(OS.Time, OS) ~ class, data = cox_s45))$coefficients
rtCI45<-as.data.frame(summary(coxph(Surv(OS.Time, OS) ~ class, data = cox_s45))[8])[,c(3,4)]
rtcox45<-as.data.frame(rtcox45);rtcox45$stage<-"Stage IV|Stage V";rtCI45<-as.data.frame(rtCI45)

rtCI<-rbind(rtCI1,rtCI2);rtCI<-rbind(rtCI,rtCI3);rtCI<-rbind(rtCI,rtCI45)
rtcox<-rbind(rtcox1,rtcox2);rtcox<-rbind(rtcox,rtcox3);rtcox<-rbind(rtcox,rtcox45)

rtcox<-cbind(rtCI,rtcox)

rtcoxl<-rtcox[,c(1,4,7,8)];colnames(rtcoxl)<-c("CI","HR","p","stage");rtcoxh<-rtcox[,c(2,4,7,8)];colnames(rtcoxh)<-c("CI","HR","p","stage")  #CI按高低上下连接
rtcox<-rbind(rtcoxl,rtcoxh)
rtcox$class<-c("relapse","transfer")

#rtcox$HR<-log10(rtcox$HR);rtcox$CI<-log10(rtcox$CI)
rtcox$HR1<-rtcox$HR
rtcox$HR[which(rtcox$HR1 > 1)]<-"high"
rtcox$HR[which(rtcox$HR1 < 1)]<-"low"
rtcox$stage<-as.factor(rtcox$stage)
#rtcox<-rtcox[which(rtcox$p < 0.05),]

#折线图#
ggplot(rtcox,aes(x = stage,y = HR1,group = class,colour = class ))+
  geom_line(size = 1.5) +
  scale_colour_manual(values=c("#FFD700","#E3170D"))+
  geom_hline(yintercept = 0,size = 1.0)+
  geom_point(aes(x = stage,y = HR1),size = 3.0)+
  theme(axis.text.x = element_text(size = 10),
        axis.text.y = element_text(size = 10),
        legend.position = "right",
        #legend.background = element_rect(fill="transparent", size=.5),
        axis.line = element_line(size = 0.5, colour = "black"),
        axis.title = element_blank(),
        strip.background = element_blank(),
        strip.text = element_text(size = 8),
        panel.background = element_blank(),
        panel.border = element_blank(),
        panel.grid = element_blank())




rtcox$class<-as.factor(rtcox$class)
ggplot(rtcox,aes(x = HR1,y = class,) )+
  facet_grid(stage ~ .) +
  geom_line(aes(x=CI,y = class,color = class),size = 0.8,) + 
  geom_point(aes(x = HR1,y = class,color = class),size=5.0,shape = 15) +
  geom_vline(aes(xintercept=0.5), colour=c("#FFBB8A"), linetype="dashed") +
  geom_vline(aes(xintercept=1), colour=c("#FFBB8A"), linetype="dashed") +
  geom_vline(aes(xintercept=1.5), colour=c("#FFBB8A"), linetype="dashed") +
  geom_vline(aes(xintercept=2), colour=c("#FFBB8A"), linetype="dashed") +
  geom_vline(aes(xintercept=3), colour=c("#FFBB8A"), linetype="dashed") +
  #scale_color_gradientn(colors = colorRampPalette(brewer.pal(8, 'Dark2')[5:7])(50)) +
  scale_colour_manual(values=c("#788cb6","#cd595a"))+   ##更改图中按类区分的颜色（上一句为连续颜色）
  theme(axis.text.x = element_blank(),
        axis.text.y = element_blank(),
        legend.position = "left",
        #legend.background = element_rect(fill="transparent", size=.5),
        axis.line = element_line(size = 0.5, colour = "black"),
        axis.title = element_blank(),
        strip.background = element_blank(),
        strip.text = element_text(size = 8),
        panel.background = element_blank(),
        panel.border = element_blank(),
        panel.grid = element_blank())



###浸润程度###
#epic#
epic_<-epic
epic_<-epic_[-which(duplicated(substring(row.names(epic_),1,12))),]
row.names(epic_)<-substring(row.names(epic_),1,12)
ao<-intersect(row.names(epic_),row.names(cli))
epic_<-epic_[ao,];cli_e<-cli[ao,]
epic_$category<-cli_e$category


ao<-which(epic_$otherCells %in% boxplot.stats(epic_$otherCells)$out)  ##去除离群点 ##两个细胞
epic_1<-epic_[-ao,]
p<-ggplot(epic_1,aes(y=otherCells)) #一个细胞
p+geom_boxplot(aes(fill=category),outlier.size = 0,alpha = 0.6,width = 0.4)+
  scale_fill_manual( values = c(lb_colors)) +
  theme(axis.text.x = element_text(size = 10),    ###主题
        axis.text.y = element_text(size = 10),
        #legend.position = "top",
        #legend.background = element_rect(fill="transparent", size=.5),
        axis.line = element_line(size = 0.5, colour = "black"),
        axis.title = element_blank(),
        strip.background = element_blank(),
        strip.text = element_blank(),
        panel.background = element_blank(),
        panel.border = element_blank(),
        panel.grid = element_blank())


#mcp#
mcp_<-mcp
mcp_<-mcp_[-which(duplicated(substring(row.names(mcp_),1,12))),]
row.names(mcp_)<-substring(row.names(mcp_),1,12)
ao<-intersect(row.names(mcp_),row.names(cli))
mcp_<-mcp_[ao,];cli_m<-cli[ao,]
mcp_$category<-cli_m$category


ao<-which(mcp_$Fibroblasts %in% boxplot.stats(mcp_$Fibroblasts)$out)  ##去除离群点 ##两个细胞
mcp_1<-mcp_[-ao,]
p<-ggplot(mcp_1,aes(y=Fibroblasts)) #一个细胞
p+geom_boxplot(aes(fill=category),outlier.size = 0,alpha = 0.6,width = 0.4)+
  scale_fill_manual( values = c(lb_colors)) +
  theme(axis.text.x = element_text(size = 10),    ###主题
        axis.text.y = element_text(size = 10),
        #legend.position = "top",
        #legend.background = element_rect(fill="transparent", size=.5),
        axis.line = element_line(size = 0.5, colour = "black"),
        axis.title = element_blank(),
        strip.background = element_blank(),
        strip.text = element_blank(),
        panel.background = element_blank(),
        panel.border = element_blank(),
        panel.grid = element_blank())


#timer#
TIMER_<-TIMER
TIMER_<-TIMER_[-which(duplicated(substring(row.names(TIMER_),1,12))),]
row.names(TIMER_)<-substring(row.names(TIMER_),1,12)
ao<-intersect(row.names(TIMER_),row.names(cli))
TIMER_<-TIMER_[ao,];cli_T<-cli[ao,]
TIMER_$category<-cli_T$category


ao<-which(TIMER_$Dendritic %in% boxplot.stats(TIMER_$Dendritic)$out)  ##去除离群点 ##两个细胞
TIMER_1<-TIMER_[-ao,]
p<-ggplot(TIMER_1,aes(y=Dendritic)) #一个细胞
p+geom_boxplot(aes(fill=category),outlier.size = 0,alpha = 0.6,width = 0.4)+
  scale_fill_manual( values = c(lb_colors)) +
  theme(axis.text.x = element_text(size = 10),    ###主题
        axis.text.y = element_text(size = 10),
        #legend.position = "top",
        #legend.background = element_rect(fill="transparent", size=.5),
        axis.line = element_line(size = 0.5, colour = "black"),
        axis.title = element_blank(),
        strip.background = element_blank(),
        strip.text = element_blank(),
        panel.background = element_blank(),
        panel.border = element_blank(),
        panel.grid = element_blank())







###############################################
rm(list = ls(all = TRUE))
setwd("D://danni//1//结果图//2 临床特征")
library(ggplot2)
library(RColorBrewer)  #配色R包#
library(ggsignif)
library(ggpubr)



cli<-read.table("D://danni//1//clinical.txt",header = T,sep = "\t",row.names = 1)
cli$category<-as.factor(cli$category)

cli1<-read.table("D://danni//1//clinical1.txt",header = T,sep = "\t",row.names = 1)
cli1$category<-as.factor(cli1$category)

#####cli#####
display.brewer.all(type = "seq")
lb_colors1<-brewer.pal(9,"BuGn");lb_colors1<-lb_colors1[5:7]  #选择个数与颜色#
lb_colors2<-brewer.pal(9,"PuBu");lb_colors2<-lb_colors2[5:7]
lb_colors45<-brewer.pal(9,"Purples");lb_colors45<-lb_colors45[5:7]
display.brewer.all(type = "qual")
display.brewer.all(type = "div")
lb_colors3<-brewer.pal(11,"BrBG");lb_colors3<-lb_colors3[4:2]
lb_colors<-c(lb_colors1,lb_colors2,lb_colors3,lb_colors45)
###cancer###
p<-ggplot(cli,aes(x= cancer,fill = category)) +
  geom_bar(na.rm = T,position = "fill")  +
  scale_fill_manual( values = c(lb_colors)) +
  coord_flip()+
  theme(axis.text.x = element_text(size = 10),    ###主题
        axis.text.y = element_text(size = 10),
        #legend.position = "top",
        #legend.background = element_rect(fill="transparent", size=.5),
        axis.line = element_line(size = 0.5, colour = "black"),
        axis.title = element_blank(),
        strip.background = element_blank(),
        strip.text = element_blank(),
        panel.background = element_blank(),
        panel.border = element_blank(),
        panel.grid = element_blank())
ggsave("cancer.pdf",p,width = 15, height = 8)#设置长度

###stage###
#stage<-cli[-which(cli$stage == ""),]
ggplot(cli,aes(x=stage,fill =category)) + 
  geom_bar(na.rm = T,position = "fill") +
  scale_fill_manual(name="Class",labels = paste(paste("Subtype",1:12)), 
                    values = c(lb_colors)) +
  theme(axis.text.x = element_text(size = 10),    ###主题
        axis.text.y = element_text(size = 10),
        #legend.position = "top",
        #legend.background = element_rect(fill="transparent", size=.5),
        axis.line = element_line(size = 0.5, colour = "black"),
        axis.title = element_blank(),
        strip.background = element_blank(),
        strip.text = element_blank(),
        panel.background = element_blank(),
        panel.border = element_blank(),
        panel.grid = element_blank())

###age###
age<-cli[-which(cli$age == ""),]
ggplot(age,aes(x=age,fill =category)) + 
  geom_bar(na.rm = T,position = "fill") +
  scale_fill_manual(name="Class",labels = paste(paste("Subtype",1:12),sep = ":"), 
                    values = c(lb_colors)) +
  theme(axis.text.x = element_text(size = 10),    ###主题
        axis.text.y = element_text(size = 10),
        #legend.position = "top",
        #legend.background = element_rect(fill="transparent", size=.5),
        axis.line = element_line(size = 0.5, colour = "black"),
        axis.title = element_blank(),
        strip.background = element_blank(),
        strip.text = element_blank(),
        panel.background = element_blank(),
        panel.border = element_blank(),
        panel.grid = element_blank())

###gender###
#gender<-cli[-which(cli$gender == ""),]
p<-ggplot(cli,aes(x=gender,fill =category)) + 
  geom_bar(na.rm = T,position = "fill") +
  scale_fill_manual(name="Class",labels = paste(paste("Subtype",1:12),sep = ":"), 
                    values = c(lb_colors)) +
  coord_flip()+
  theme(axis.text.x = element_text(size = 10),    ###主题
        axis.text.y = element_text(size = 10),
        #legend.position = "top",
        #legend.background = element_rect(fill="transparent", size=.5),
        axis.line = element_line(size = 0.5, colour = "black"),
        axis.title = element_blank(),
        strip.background = element_blank(),
        strip.text = element_blank(),
        panel.background = element_blank(),
        panel.border = element_blank(),
        panel.grid = element_blank())
ggsave("gender.pdf",p,width = 15, height = 4)



###weight###
cli<-read.table("D://danni//1//clinical.txt",header = T,sep = "\t",row.names = 1)
cli$category<-as.factor(cli$category)


cli_all<-read.table("D://danni//1//clinical-all.txt",header = T,sep = "\t",row.names = 1)
cli_all<-cli_all[-which(duplicated(substring(row.names(cli_all),1,12))),]
cli_w<-as.data.frame(cli_all$initial_weight);
row.names(cli_w)<-substring(row.names(cli_all),1,12)
colnames(cli_w)<-"weight"
ao<-intersect(row.names(cli_w),row.names(cli))
cli<-cli[ao,];cli_w<-cli_w[ao,]
cli$weight<-cli_w
weight<-cli[-which(!complete.cases(cli$weight)),]

ggplot(weight,aes(x = factor(category),y= weight),fill =  category) + 
  stat_boxplot(geom="errorbar",width=0.15)+
  geom_boxplot(fill = c(lb_colors),width=0.5,outlier.colour = NA) +
  #ylim(0,800)+
  stat_compare_means(comparisons = list(c("1", "2"),c("1","3"),c("4","5"),c("4","6"),c("7","8"),c("7","9"),c("10","11"),c("10","12")),method = "t.test")+
  stat_compare_means(label.y = 4500)+  ##类间差异##
  theme(axis.text.x = element_text(size = 10),    ###主题
        axis.text.y = element_text(size = 10),
        #legend.position = "top",
        #legend.background = element_rect(fill="transparent", size=.5),
        axis.line = element_line(size = 0.5, colour = "black"),
        axis.title = element_blank(),
        strip.background = element_blank(),
        strip.text = element_blank(),
        panel.background = element_blank(),
        panel.border = element_blank(),
        panel.grid = element_blank())+
  #geom_signif(comparisons = compaired,step_increase = 0.1, map_signif_level = FALSE,test = t.test)+
  stat_summary(fun="mean",geom="point",shape=23,size=2,fill="white")#均值标记

###生存###
time<-read.table("D://danni//1//time.txt",header = T,sep = "\t")
time<-time[-which(duplicated(substring(time$sampleID,1,12))),]
time$sampleID<-substring(time$sampleID,1,12)
time$sampleID<-gsub("\\.","-",time$sampleID)   ##\\转义##
row.names(time)<-time$sampleID;time<-time[,-1]
ao<-intersect(row.names(cli),row.names(time))
cli_time<-cbind(cli[ao,],time[ao,])
for(i in 1:8324){
  if(is.na(cli_time$days_to_death[i])){
    cli_time$days_to_death[i]<-cli_time$days_to_last_followup[i]
  }}


library(survival)
kmsurvival <- survfit(Surv(days_to_death, vital_status) ~ category,data = cli_time)
dif <- survdiff(Surv(days_to_death, vital_status) ~ category,data = cli_time)#求生存时间
p_value <- pchisq(dif$chisq,1,lower.tail=F)    #1.000663e-211
plot(kmsurvival,col=c(lb_colors),xlab='Survival time',ylab='Survival probabilities',lwd = 3.5,cex.axis = 2.0,cex.lab = 2.0)












#####cli1#####
lb_colors_1<-c("#b9dec9","#83cbac","#40a070","#8abcd1","#2177b8","#d4c4b7","#97846c","#d1c2d3","#806d9e")  #"#93b5cf","#1661ab"
###cancer###
p<-ggplot(cli1,aes(x= stage,fill = category)) +
  geom_bar(na.rm = T,position = "fill")  +
  scale_fill_manual( values = c(lb_colors_1)) +
  facet_wrap(.~cancer,nrow=8) +
  #coord_flip()+
  coord_polar(theta="y")  +  ###环形
  theme(axis.text.x = element_text(size = 10),    ###主题
        axis.text.y = element_text(size = 10),
        #legend.position = "top",
        #legend.background = element_rect(fill="transparent", size=.5),
        axis.line = element_line(size = 0.5, colour = "black"),
        axis.title = element_blank(),
        strip.background = element_blank(),
        #strip.text = element_blank(),
        panel.background = element_blank(),
        panel.border = element_blank(),
        panel.grid = element_blank())

ggsave("cancer(9).pdf",p,width = 15, height = 25,limitsize = FALSE)#设置长度

###stage###
#stage<-cli1[-which(cli1$stage == ""),]
stage1<-cli1[which(cli1$stage == "Stage I"),]
stage2<-cli1[which(cli1$stage == "Stage II"),]
stage3<-cli1[which(cli1$stage == "Stage III"),]
stage45<-cli1[which(cli1$stage == "Stage IV+Stage V"),]
ggplot(cli1,aes(x=stage,fill =category)) + 
  geom_bar(na.rm = T,position = "fill") +
  scale_fill_manual(name="Class",labels = paste(paste("Subtype",1:12)), 
                    values = c(lb_colors_1)) +
  theme(axis.text.x = element_text(size = 10),    ###主题
        axis.text.y = element_text(size = 10),
        #legend.position = "top",
        #legend.background = element_rect(fill="transparent", size=.5),
        axis.line = element_line(size = 0.5, colour = "black"),
        axis.title = element_blank(),
        strip.background = element_blank(),
        strip.text = element_blank(),
        panel.background = element_blank(),
        panel.border = element_blank(),
        panel.grid = element_blank())

###age###
age1<-cli1[-which(cli1$age == ""),]
age2<-read.table("D://danni//1//age(10-30).txt",header = T,sep = "\t",row.names = 1)
age2$category<-as.factor(age2$category)
ggplot(age1,aes(x=age,fill = category)) + 
  geom_bar(na.rm = T,position = "fill") +
  facet_grid(.~ stage) +  #x与分页交换效果不同
  scale_fill_manual(name="Class",labels = paste(paste("Subtype",1:12),sep = ":"), 
                    values = c(lb_colors_1)) +
  theme(axis.text.x = element_text(size = 10),    ###主题
        axis.text.y = element_text(size = 10),
        #legend.position = "top",
        #legend.background = element_rect(fill="transparent", size=.5),
        axis.line = element_line(size = 0.5, colour = "black"),
        axis.title = element_blank(),
        strip.background = element_blank(),
        #strip.text = element_blank(),
        panel.background = element_blank(),
        panel.border = element_blank(),
        panel.grid = element_blank())

###gender###
#gender<-cli1[-which(cli1$gender == ""),]
ggplot(cli1,aes(x=gender,fill = category)) + 
  geom_bar(na.rm = T,position = "fill") +
  scale_fill_manual(name="Class",labels = paste(paste("Subtype",1:12),sep = ":"), 
                    values = c(lb_colors_1)) +
  facet_grid(.~stage) +   #x与分页交换效果不同
  #coord_flip()+
  theme(axis.text.x = element_text(size = 10),    ###主题
        axis.text.y = element_text(size = 10),
        #legend.position = "top",
        #legend.background = element_rect(fill="transparent", size=.5),
        axis.line = element_line(size = 0.5, colour = "black"),
        axis.title = element_blank(),
        strip.background = element_blank(),
        #strip.text = element_blank(),
        panel.background = element_blank(),
        panel.border = element_blank(),
        panel.grid = element_blank())
ggsave("gender(9).pdf",p,width = 15, height = 4)



###weight###
cli1<-read.table("D://danni//1//clinical1.txt",header = T,sep = "\t",row.names = 1)
cli1$category<-as.factor(cli1$category)


cli_all<-read.table("D://danni//1//clinical-all.txt",header = T,sep = "\t",row.names = 1)
cli_all<-cli_all[-which(duplicated(substring(row.names(cli_all),1,12))),]
cli_w<-as.data.frame(cli_all$initial_weight);
row.names(cli_w)<-substring(row.names(cli_all),1,12)
colnames(cli_w)<-"weight"
ao<-intersect(row.names(cli_w),row.names(cli1))
cli1<-cli1[ao,];cli_w<-cli_w[ao,]
cli1$weight<-cli_w
weight1<-cli1[-which(!complete.cases(cli1$weight)),]
weight11<- weight1[-which(weight1$weight %in% boxplot.stats(weight1$weight)$out),]

ggplot(weight1,aes(x = factor(category),y= weight),fill =  category) + 
  stat_boxplot(geom="errorbar",width=0.15)+
  geom_boxplot(fill = c(lb_colors_1),width=0.5,outlier.colour = NA) +
  #ylim(0,800)+
  stat_compare_means(comparisons = list(c("2","4"),c("4","6"),c("6","8"),c("3","5"),c("5","7"),c("7","9")))+
  stat_compare_means(label.y = 100)+  ##类间差异##
  theme(axis.text.x = element_text(size = 10),    ###主题
        axis.text.y = element_text(size = 10),
        #legend.position = "top",
        #legend.background = element_rect(fill="transparent", size=.5),
        axis.line = element_line(size = 0.5, colour = "black"),
        axis.title = element_blank(),
        strip.background = element_blank(),
        strip.text = element_blank(),
        panel.background = element_blank(),
        panel.border = element_blank(),
        panel.grid = element_blank())+
  #geom_signif(comparisons = compaired,step_increase = 0.1, map_signif_level = FALSE,test = t.test)+
  stat_summary(fun="mean",geom="point",shape=23,size=2,fill="white")#均值标记

###生存###
ao<-intersect(row.names(cli1),row.names(time))
cli_time1<-cbind(cli1[ao,],time[ao,])
for(i in 1:8324){
  if(is.na(cli_time1$days_to_death[i])){
    cli_time1$days_to_death[i]<-cli_time1$days_to_last_followup[i]
  }}


library(survival)
kmsurvival <- survfit(Surv(days_to_death, vital_status) ~ category,data = cli_time1)
dif <- survdiff(Surv(days_to_death, vital_status) ~ category,data = cli_time1)#求生存时间
p_value <- pchisq(dif$chisq,1,lower.tail=F)    #4.923956e-70
plot(kmsurvival,col=c(lb_colors_1),xlab='Survival time',ylab='Survival probabilities',lwd = 3.5,cex.axis = 2.0,cex.lab = 2.0)





##################################################
#服务器#
setwd("/pub6/siyu/hdn")
if (!requireNamespace("BiocManager", quietly = TRUE))
  #install.packages("BiocManager")  #下载包#
  
  BiocManager::install("limma")
library(limma)
library(dplyr)
library(edgeR)
library(statmod)
###读入数据并处理###
cancerid<-c("BLCA","BRCA","CESC","CHOL","COAD","DLBC","ESCA","GBM","HNSC","KICH","KIRC","KIRP","LGG","LIHC","LUAD","LUSC","MESO","OV","PAAD","PRAD","READ","SARC","SKCM","STAD","TGCT","THCA","THYM","UCEC","UCS","UVM")
cancer <- read.table("/pub6/siyu/ucsc-mRNA-count/TCGA-ACC.htseq_counts.tsv",sep = "\t",header = T,row.names = 1)
for (can in cancerid){
  cancer1 <- read.table(paste0("/pub6/siyu/ucsc-mRNA-count/TCGA-",can,".htseq_counts.tsv"),sep = "\t",header = T,row.names = 1)
  cancer<-cbind(cancer,cancer1)
  print(can)
}
cancer<-cancer[!apply(cancer,1,function(x){sum(floor(x)==0)>7147}),]
#cancer<-cancer[-which(duplicated(substring(row.names(cancer),1,15))),]
row.names(cancer)<-substring(row.names(cancer),1,15)
colnames(cancer)<-gsub("\\.","-",colnames(cancer))
colnames(cancer)<-substring(colnames(cancer),1,12)
cancer<-cancer[,-which(duplicated(colnames(cancer)))]
rawcancer<-cancer
rawcancer<-2^rawcancer-1



clinical<-read.table("clinical.txt",sep = "\t",header = T,row.names = 1)
clinical$category<-as.factor(clinical$category)







#循环#
s1<-clinical[which(clinical$category == 1),]
s2<-clinical[which(clinical$category == 2),]
ao<-c()
for(i in 1:length(row.names(s1))){
  for(j in 1:length(colnames(rawcancer))){
    if(row.names(s1)[i] == colnames(rawcancer)[j]){
      ao[j]<-j
    }
  }
}
ao<-na.omit(ao)
length(ao)
cancer1<-rawcancer[,ao]

ao<-c()
for(i in 1:length(row.names(s2))){
  for(j in 1:length(colnames(rawcancer))){
    if(row.names(s2)[i] == colnames(rawcancer)[j]){
      ao[j]<-j
    }
  }
}
ao<-na.omit(ao)
length(ao)
cancer2<-rawcancer[,ao]





###差异基因###
cancer10<-read.csv("cancer10.csv",row.names = 1)
cancer12<-read.csv("cancer12.csv",row.names = 1)

pan<-cbind(cancer7,cancer9)
group1<-rep("none",length(colnames(cancer7)))
group2<-rep("relapse",length(colnames(cancer11)));group2<-rep("transfer",length(colnames(cancer9)))
group<-as.factor(c(group1,group2))
design <- model.matrix(~group)    #构建分组矩阵

#处理筛选数据#
dgelist <- DGEList(counts = pan)
keep <- rowSums(cpm(dgelist) > 1 ) >= 2 #过滤
dgelist <- dgelist[keep, ,keep.lib.sizes = FALSE]
dgelist_norm <- calcNormFactors(dgelist)   #标准化（TMM）
dge <- voom(dgelist_norm, design, plot = TRUE) 

transfer_s45<-dge$E  #校正后表达值#


##差异
fit <- lmFit(dge, design)     #拟合模型
lrt <- eBayes(fit,trend = F)   #统计检验
topTable(lrt,coef = ncol(design))

write.csv(topTable(lrt, n = nrow(dgelist$counts)), '8.csv', quote = FALSE) ##输出主要结果

#手动筛选logFC和FDR#

#dge_de <- decideTestsDGE(lrt, adjust.method = 'fdr', p.value = 0.05)  #查看默认方法获得的差异基因
#summary(dge_de)

#plotMD(lrt, status = dge_de, values = c(1, -1), col = c('blue', 'red'))#火山图
#abline(h = c(-1, 1), col = 'gray', lty = 2)


###转换ID###
library("AnnotationDbi")
library("org.Hs.eg.db")
ENSEMBL<-row.names(dge_de)
gene<-data.frame(ENSEMBL)
gene$symbol<-mapIds(org.Hs.eg.db,keys = ENSEMBL,column = "SYMBOL",keytype = "ENSEMBL",multiVals = "first")
gene<-as.data.frame(gene$symbol)


dge_de<-cbind(dge_de,gene)


write.csv(dge_de, 'chayi.csv', quote = FALSE)

rm(list = ls(all = TRUE))
setwd("D://danni//1//结果图//转录组//差异基因(比正常)")
library(pheatmap)

######交集基因######
###relapse###
s1r<-read.table("stage1 relapse.txt",header = T,sep = "\t",row.names = 1)
s2r<-read.table("stage2 relapse.txt",header = T,sep = "\t",row.names = 1)
s3r<-read.table("stage3 relapse.txt",header = T,sep = "\t",row.names = 1)
s45r<-read.table("stage45 relapse.txt",header = T,sep = "\t",row.names = 1)


ao1<-intersect(row.names(s1r),row.names(s2r))
ao2<-intersect(row.names(s3r),row.names(s45r))
ao<-intersect(ao1,ao2)

s1r<-s1r[ao,];s2r<-s2r[ao,];s3r<-s3r[ao,];s45r<-s45r[ao,]
relapse<-as.data.frame(cbind(s1r$logFC,s2r$logFC));relapse<-cbind(relapse,s3r$logFC);relapse<-cbind(relapse,s45r$logFC)
colnames(relapse)<-c("stage1","stage2","stage3","stage45");row.names(relapse)<-row.names(s1r)
write.csv(relapse,"relapse.csv")
#relapse_stage1<-relapse[c(1,18,47),]
#relapse_stage1<-relapse[c(18,47),]


##热图##
pheatmap(relapse,cluster_col = F,cluster_row = TRUE,show_rownames = T,
         color = c(colorRampPalette(colors = c("blue","white"))(floor(abs(min(relapse))/0.001)),colorRampPalette(colors = c("white","red"))(floor(abs(max(relapse))/0.001))),
         breaks = c(seq(min(relapse),-0.001,by=0.001),seq(0,max(relapse),by=0.001)),
         angle_col = 0  #坐标方向
)



###transfer###
s1t<-read.table("stage1 transfer.txt",header = T,sep = "\t",row.names = 1)
s2t<-read.table("stage2 transfer.txt",header = T,sep = "\t",row.names = 1)
s3t<-read.table("stage3 transfer.txt",header = T,sep = "\t",row.names = 1)
s45t<-read.table("stage45 transfer.txt",header = T,sep = "\t",row.names = 1)

ao1<-intersect(row.names(s1t),row.names(s2t))
ao2<-intersect(row.names(s3t),row.names(s45t))
ao<-intersect(ao1,ao2)

s1t<-s1t[ao,];s2t<-s2t[ao,];s3t<-s3t[ao,];s45t<-s45t[ao,]
transfer<-as.data.frame(cbind(s1t$logFC,s2t$logFC));transfer<-cbind(transfer,s3t$logFC);transfer<-cbind(transfer,s45t$logFC)
colnames(transfer)<-c("stage1","stage2","stage3","stage45");row.names(transfer)<-row.names(s1t)
write.csv(transfer,"transfer.csv")
#transfer_stage1<-transfer[c(25,29,4,5,7),]
#transfer_stage1<-transfer[c(5,7),]

##热图##
pheatmap(transfer,cluster_col = F,cluster_row = TRUE,show_rownames = T,
         color = c(colorRampPalette(colors = c("blue","white"))(floor(abs(min(transfer))/0.001)),colorRampPalette(colors = c("white","red"))(floor(abs(max(transfer))/0.001))),
         breaks = c(seq(min(transfer),-0.001,by=0.001),seq(0,max(transfer),by=0.001)),
         angle_col = 0  #坐标方向
)



library(survival)
library(ggplot2)
library(ggpubr)
library(survminer)
library(AnnotationDbi)
library(org.Hs.eg.db)
library(forestplot)
######relapse######
#在这里重复随机1#
relapse_s1<-read.csv("relapse_s1.csv",row.names = 1)
clinical<-read.table("clinical.txt",sep = "\t",header = T,row.names = 1)
clinical$category<-as.factor(clinical$category)
ao<-intersect(row.names(clinical),row.names(relapse_s1))
relapse_s1<-relapse_s1[ao,];clinical_s1<-clinical[ao,]
relapse_s1$category<-clinical_s1$category;relapse_s1$stage<-clinical_s1$stage
normal_r1<-relapse_s1[which(relapse_s1$category == 1),]
relapse_s1<-relapse_s1[which(relapse_s1$category == 2),]

#转换ID#
colnames(relapse_s1)[1:14]<-mapIds(org.Hs.eg.db,keys=colnames(relapse_s1)[1:14],column="SYMBOL",keytype="ENSEMBL",multiVals="first")
colnames(normal_r1)[1:14]<-mapIds(org.Hs.eg.db,keys=colnames(normal_r1)[1:14],column="SYMBOL",keytype="ENSEMBL",multiVals="first")

#抽取20%做检验集(与正常样本的20%合并)#
sj<-sample(1:158,32)  #relapse_s1行数，行数*0.2#
relapse_s1_t<-relapse_s1[sj,]
relapse_s1<-relapse_s1[-sj,]
sj<-sample(1:2245,449)  #normal_r1行数，行数*0.2#
relapse_s1<-rbind(relapse_s1,normal_r1[-sj,])
normal_r1<-normal_r1[sj,]
relapse_s1_t<-rbind(relapse_s1_t,normal_r1)

#cox（训练集）#
relapse_cox1<-summary(coxph(Surv(OS.Time, OS) ~ FOXA1, data = relapse_s1))$coefficients
relapse_cox1<-cbind(relapse_cox1,as.data.frame(summary(coxph(Surv(OS.Time, OS) ~ FOXA1, data = relapse_s1))[8])[,c(3,4)])
for(i in colnames(relapse_s1)[2:14]){
  relapse_cox11<-summary(coxph(Surv(OS.Time, OS) ~ get(i), data = relapse_s1))$coefficients
  relapse_cox11<-cbind(relapse_cox11,as.data.frame(summary(coxph(Surv(OS.Time, OS) ~ get(i), data = relapse_s1))[8])[,c(3,4)])
  relapse_cox1<-rbind(relapse_cox1,relapse_cox11)
}
colnames(relapse_cox1)<-c("coef","HR","error","z","p","CIlow","CIhigh")
row.names(relapse_cox1)<-colnames(relapse_s1)[1:14]



#forestplot#
relapse_cox1<-relapse_cox1[,c(2,5,6,7)]
relapse_cox1<-relapse_cox1[which(relapse_cox1$p < 0.05),]
relapse_cox1$gene<-row.names(relapse_cox1)
forestplot(relapse_cox1, # 森林图文本部分
           mean = relapse_cox1$HR, # 图形元素中HR部分
           lower = relapse_cox1$CIlow,  # 图形元素中置信区间
           upper = relapse_cox1$CIhigh,
           zero = 1, #显示y=0的垂直线
           xlog=FALSE, #x轴的坐标不取对数
           fn.ci_norm = fpDrawCircleCI, #误差条显示方式
           boxsize = 0.1, ##误差条中的圆心点大小
           col=fpColors(line = "#69a794", #误差条的线的颜色   "#dd8047","#a5ab81","#d8b25c","#968c8c"
                        box="#69a794"), #误差条的圆心点的颜色    
           lty.ci = 7,   # 误差条的线的线型
           lwd.ci = 3,   # 误差条的线的宽度
           ci.vertices.height = 0.10, # # 误差条末端的长度
           txt_gp = fpTxtGp(ticks = gpar(cex = 0.5), xlab = gpar(cex = 0.7), cex = 0.7), #文本大小设置
           lineheight = "auto")#线的高度 

#在这里重复随机2***#
a<-c()
for(i in 1:1000){
  relapse_s1_train<-relapse_s1[,intersect(colnames(relapse_s1),row.names(relapse_cox1[which(relapse_cox1$HR > 1),]))]
  relapse_s1_train$class<-relapse_s1$category
  relapse_s1_train$class<-as.factor(as.numeric(relapse_s1_train$class))   #只有2类，而不是其他类为0#
  relapse_s1_test<-relapse_s1_t[,intersect(colnames(relapse_s1),row.names(relapse_cox1[which(relapse_cox1$HR > 1),]))]
  ao<-intersect(row.names(relapse_s1_test),row.names(clinical))
  relapse_s1_test<-cbind(relapse_s1_test,clinical[ao,]$category)
  colnames(relapse_s1_test)[5]<-"class"
  relapse_s1_test$class<-as.factor(as.numeric(relapse_s1_test$class))
  
  
  relapse_s1_train<-relapse_s1_train[c(1:126,sample(127:1922,126)),] #1.2类数据量差太多，随机截取#
  relapse_s1_test<-relapse_s1_test[c(1:32,sample(33:481,32)),]
  
  svmres <- svm(class~.,data = relapse_s1_train, type = 'C',kernel = 'radial')
  pre_svm <- predict(svmres,newdata = relapse_s1_test)
  obs_p_svm <-data.frame(prob=pre_svm,obs=relapse_s1_test$class)
  svm_roc <- roc(relapse_s1_test$class,as.numeric(pre_svm))#
  a[i]<-svm_roc$auc
  write.csv(relapse_s1_test,paste0("D://danni//1//结果图//转录组//分类器//ss//relapse_s1_test_",svm_roc$auc,".csv"))
  write.csv(relapse_s1_train,paste0("D://danni//1//结果图//转录组//分类器//ss//relapse_s1_train_",svm_roc$auc,".csv"))
}
max(a)

#如果结果好，验证改变后的train（样本变了）cox#
relapse_s1_test<-read.csv("D://danni//1//结果图//转录组//分类器//relapse//0.766（2）//relapse_s1_test_0.859375.csv",row.names = 1)
relapse_s1_train<-read.csv("D://danni//1//结果图//转录组//分类器//relapse//0.766（2）//relapse_s1_train_0.859375.csv",row.names = 1)
#relapse_s1_test<-relapse_s1_test[,c(2,3,4,6)]
#relapse_s1_train<-relapse_s1_train[,c(2,3,4,6)]
ao<-intersect(row.names(relapse_s1),row.names(relapse_s1_train))
ss<-relapse_s1[ao,]
relapse_coxs<-summary(coxph(Surv(OS.Time, OS) ~ FOXA1, data = ss))$coefficients
relapse_coxs<-cbind(relapse_coxs,as.data.frame(summary(coxph(Surv(OS.Time, OS) ~ FOXA1, data = ss))[8])[,c(3,4)])
for(i in colnames(relapse_s1)[2:14]){
       relapse_cox11<-summary(coxph(Surv(OS.Time, OS) ~ get(i), data = ss))$coefficients
       relapse_cox11<-cbind(relapse_cox11,as.data.frame(summary(coxph(Surv(OS.Time, OS) ~ get(i), data = ss))[8])[,c(3,4)])
       relapse_coxs<-rbind(relapse_coxs,relapse_cox11)
  }
colnames(relapse_coxs)<-c("coef","HR","error","z","p","CIlow","CIhigh")
row.names(relapse_coxs)<-colnames(relapse_s1)[1:14]
#forestplot#
relapse_coxs<-relapse_coxs[,c(2,5,6,7)]
relapse_coxs<-relapse_coxs[which(relapse_coxs$p < 0.05),]
relapse_coxs$gene<-row.names(relapse_coxs)
forestplot(relapse_coxs, # 森林图文本部分
                        mean = relapse_coxs$HR, # 图形元素中HR部分
                        lower = relapse_coxs$CIlow,  # 图形元素中置信区间
                        upper = relapse_coxs$CIhigh,
                        zero = 1, #显示y=0的垂直线
                        xlog=FALSE, #x轴的坐标不取对数
                        fn.ci_norm = fpDrawCircleCI, #误差条显示方式
                        boxsize = 0.1, ##误差条中的圆心点大小
                        col=fpColors(line = "#69a794", #误差条的线的颜色   "#dd8047","#a5ab81","#d8b25c","#968c8c"
                                                               box="#69a794"), #误差条的圆心点的颜色    
                        lty.ci = 7,   # 误差条的线的线型
                        lwd.ci = 3,   # 误差条的线的宽度
                        ci.vertices.height = 0.10, # # 误差条末端的长度
                        txt_gp = fpTxtGp(ticks = gpar(cex = 0.5), xlab = gpar(cex = 0.7), cex = 0.7), #文本大小设置
                        lineheight = "auto")#线的高度
#保存时改图片大小#

#如果结果好
#用这里的结果改变train和test的基因
#再次做分类器
ao<-intersect(row.names(relapse_s1),row.names(relapse_s1_train))
relapse_s1_train<-relapse_s1[ao,]
relapse_s1_train<-relapse_s1_train[,c(3,5,8,19)]
colnames(relapse_s1_train)[4]<-"class"
relapse_s1_train$class<-as.factor(as.numeric(relapse_s1_train$class)) 

ao<-intersect(row.names(relapse_s1_t),row.names(relapse_s1_test))
relapse_s1_test<-relapse_s1_t[ao,]
relapse_s1_test<-relapse_s1_test[,c(3,5,8,19)]
colnames(relapse_s1_test)[4]<-"class"
relapse_s1_test$class<-as.factor(as.numeric(relapse_s1_test$class)) 

## 选取误差最小的节点数mtry，找最优参数mtry，即指定节点中用于二叉树的最佳变量个数
set.seed(1234)
err <- c()
for(i in 1:(ncol(relapse_s1_train)-1)){
  mtry_fit <- randomForest(as.factor(relapse_s1_train$class) ~ ., data = relapse_s1_train, mtry = i)
  err <- c(err,mean(mtry_fit$err.rate))
}
which.min(err) 


##寻找最佳参数ntree，即指定随机森林所包含的最佳决策树数目
set.seed(1000)
ntree_fit <- randomForest(relapse_s1_train$class ~ ., data = relapse_s1_train, mtry = 3, ntree = 3000)
plot(ntree_fit) #绘制模型误差与决策树数量关系图 


##构建模型
set.seed(2000)
rf <- randomForest(relapse_s1_train$class ~ ., data = relapse_s1_train, mtry = 3, ntree = 2500, importance = TRUE, proximity = TRUE)
pred <- predict(rf,newdata = relapse_s1_test)

table(pred,relapse_s1_test$class)  

#绘制ROC曲线
rf_roc <- roc(relapse_s1_test$class,as.numeric(pred))
plot(rf_roc, print.auc=TRUE, auc.polygon=TRUE, grid=c(0.1, 0.2),grid.col=c("green", "red"), max.auc.polygon=TRUE,auc.polygon.col="skyblue", print.thres=TRUE,main='随机森林模型ROC曲线')

rf_roc <- multiclass.roc(relapse_s1_test$class,as.numeric(pred))#多分类方法roc
auc(rf_roc)




##k近邻##
library(class)
library(caret)
ao<-c()
for (k in 1:10) {
  knnresult <- knn(train = relapse_s1_train[,1:3],test = relapse_s1_test[,1:3],cl=relapse_s1_train$class,k = k)
  table(relapse_s1_test$class,knnresult)
  #knn_roc <- multiclass.roc(test3$class,as.numeric(knnresult))
  knn_roc <- roc(relapse_s1_test$class,as.numeric(knnresult))
  print(knn_roc)
  #print(sum(diag(table(test4$class,knnresult)))/sum(table(test4$class,knnresult)))
  ao[k]<-knn_roc$auc
}

max(ao)
#找到最合适k#
knnresult <- knn(train = relapse_s1_train[,1:3],test = relapse_s1_test[,1:3],cl=relapse_s1_train$class,k = which(ao == max(ao)))
table(relapse_s1_test$class,knnresult)
#knn_roc <- multiclass.roc(test3$class,as.numeric(knnresult))
knn_roc <- roc(relapse_s1_test$class,as.numeric(knnresult))
plot(knn_roc, print.auc=TRUE, auc.polygon=TRUE, grid=c(0.1, 0.2),grid.col=c("green", "red"), max.auc.polygon=TRUE,auc.polygon.col="skyblue", print.thres=TRUE,main='随机森林模型ROC曲线')



##SVM支持向量机##
BiocManager::install("e1071", type="binary")
library(e1071)
library(pROC)
library(backports)

#svm(0.766)
svmres <- svm(class~.,data = relapse_s1_train, type = 'C',kernel = 'radial')
#测试集
pre_svm <- predict(svmres,newdata = relapse_s1_test)
obs_p_svm <-data.frame(prob=pre_svm,obs=relapse_s1_test$class)
###输出混淆矩阵
table(relapse_s1_test$class,pre_svm,dnn=c("真实值","预测值"))
###绘制ROC曲线
#svm_roc <- multiclass.roc(relapse_s1_test$class,as.numeric(pre_svm))#
svm_roc <- roc(relapse_s1_test$class,as.numeric(pre_svm))#
plot(svm_roc, print.auc=TRUE, auc.polygon=TRUE, grid=c(0.1, 0.2),grid.col=c("green", "red"), max.auc.polygon=TRUE,auc.polygon.col="skyblue", print.thres=TRUE,main='SVM模型ROC曲线 kernel = radial')

#生存#
immu<-read.table("immu.txt",header = T,sep = "\t",row.names = 1)
ao<-intersect(row.names(obs_p_svm),row.names(immu))
surv<-cbind(obs_p_svm[ao,],immu[ao,c(32,33)])
fit1 <- survfit(Surv(OS.Time, OS) ~ prob,data = surv)
ggsurvplot(fit1,risk.table=F,
           pval=TRUE,ggtheme = theme_bw(),
           ylab="Survival probabilities",legend=c(0.8,0.9),
           legend.title="",
           pval.method=TRUE) 

#富集分析#
library(clusterProfiler)
library(org.Hs.eg.db)
library(ggplot2)
genes<-colnames(relapse_s1_test)[1:3]
genes<-colnames(relapse_s1)[1:14]
ego <- enrichGO(gene=genes,OrgDb = org.Hs.eg.db,keyType = "SYMBOL",ont = "BP",pvalueCutoff=0.05)
#ego <- simplify(ego,cutoff=0.7,by="p.adjust",select_fun=min)  ##去冗余
head(ego@result)
geo_plot<-cbind(as.data.frame(ego@result[2]),as.data.frame(ego@result[5]))
geo_plot<-cbind(geo_plot,as.data.frame(ego@result[3]))
geo_plot<-cbind(geo_plot,as.data.frame(ego@result[9]))
geo_plot<-geo_plot[1:20,]
ggplot(geo_plot,aes(GeneRatio,reorder(Description,Count))) +
  geom_point(aes(size=Count,color=pvalue)) +
  scale_size_continuous(range = c(6,10)) +
  scale_color_gradient(low="#ED5227",high = "#f8b37f") +
  theme(axis.text.x = element_text(size = 10),    ###主题
        axis.text.y = element_text(size = 10),
        #legend.position = "top",
        #legend.background = element_rect(fill="transparent", size=.5),
        axis.line = element_line(size = 0.5, colour = "black"),
        axis.title = element_blank(),
        strip.background = element_blank(),
        strip.text = element_blank(),
        panel.background = element_blank(),
        panel.border = element_blank(),
        panel.grid = element_blank())


#enrichplot#
library(DOSE)
library(enrichplot)
library(dplyr)
library(clusterProfiler)


emapplot(pairwise_termsim(ego),showCategory = 30)

p<-emapplot(
  pairwise_termsim(ego),
  color = "p.adjust",
  layout = "nicely",
  node_scale = NULL,
  line_scale = NULL,
  min_edge = 0.2,
  node_label_size = NULL,
  cex_label_category = 1,
  cex_category = NULL,
  cex_line = 0.5
)
ggsave("relapse_3genes_pathway.pdf",p)

emapplot(
  pairwise_termsim(ego),
  showCategory = 30,
  color = "p.adjust",
  layout = "nicely",
  split = NULL,
  pie = "equal",
  legend_n = 5,
  cex_category = NULL,
  pie_scale = NULL,
  cex_line = 1,
  min_edge = 0.2,
  cex_label_category = 1,
  node_label_size = NULL
)




#朴素贝叶斯##

library(caret)
library(e1071)
nb.model <- naiveBayes(class~.,data = relapse_s1_train)
#预测结果
nb_predict <- predict(nb.model,newdata = relapse_s1_test)
#生成实际与预测交叉表和预测精度
nb.table <- table(actual=relapse_s1_test$class,predict=nb_predict)
nb_roc <- multiclass.roc(relapse_s1_test$class,as.numeric(nb_predict))#
nb_roc <- roc(relapse_s1_test$class,as.numeric(nb_predict))#
nb_roc 
nb_ratio <- sum(diag(nb.table))/sum(nb.table)
nb_ratio  #[1] 
plot(nb_roc, print.auc=TRUE, auc.polygon=TRUE, grid=c(0.1, 0.2),grid.col=c("green", "red"), max.auc.polygon=TRUE,auc.polygon.col="skyblue", print.thres=TRUE,main='SVM模型ROC曲线 kernel = radial')



######transfer######
#在这里重复随机1#
transfer_s1<-read.csv("transfer_s1.csv",row.names = 1)
clinical<-read.table("clinical.txt",sep = "\t",header = T,row.names = 1)
clinical$category<-as.factor(clinical$category)
ao<-intersect(row.names(clinical),row.names(transfer_s1))
transfer_s1<-transfer_s1[ao,];clinical_s1<-clinical[ao,]
transfer_s1$category<-clinical_s1$category;transfer_s1$stage<-clinical_s1$stage
normal_t1<-transfer_s1[which(transfer_s1$category == 1),]
transfer_s1<-transfer_s1[which(transfer_s1$category == 3),]

#转换ID#
colnames(transfer_s1)[1:20]<-mapIds(org.Hs.eg.db,keys=colnames(transfer_s1)[1:20],column="SYMBOL",keytype="ENSEMBL",multiVals="first")
colnames(normal_t1)[1:20]<-mapIds(org.Hs.eg.db,keys=colnames(normal_t1)[1:20],column="SYMBOL",keytype="ENSEMBL",multiVals="first")
transfer_s1<-transfer_s1[,-which(is.na(colnames(transfer_s1)))]
colnames(transfer_s1)<-gsub("-",".",colnames(transfer_s1))
normal_t1<-normal_t1[,-which(is.na(colnames(normal_t1)))]
colnames(normal_t1)<-gsub("-",".",colnames(normal_t1))

#抽取20%做检验集(与正常样本的20%合并)#
sj<-sample(1:78,16)  #transfer_s1行数，行数*0.2#
transfer_s1_t<-transfer_s1[sj,]
transfer_s1<-transfer_s1[-sj,]
sj<-sample(1:2245,449)  #normal_t1行数，行数*0.2#
transfer_s1<-rbind(transfer_s1,normal_t1[-sj,])
normal_t1<-normal_t1[sj,]
transfer_s1_t<-rbind(transfer_s1_t,normal_t1)

#cox（训练集）#
transfer_cox1<-summary(coxph(Surv(OS.Time, OS) ~ KLHDC7B.DT, data = transfer_s1))$coefficients
transfer_cox1<-cbind(transfer_cox1,as.data.frame(summary(coxph(Surv(OS.Time, OS) ~ KLHDC7B.DT, data = transfer_s1))[8])[,c(3,4)])
for(i in colnames(transfer_s1)[2:18]){
  transfer_cox11<-summary(coxph(Surv(OS.Time, OS) ~ get(i), data = transfer_s1))$coefficients
  transfer_cox11<-cbind(transfer_cox11,as.data.frame(summary(coxph(Surv(OS.Time, OS) ~ get(i), data = transfer_s1))[8])[,c(3,4)])
  transfer_cox1<-rbind(transfer_cox1,transfer_cox11)
}
colnames(transfer_cox1)<-c("coef","HR","error","z","p","CIlow","CIhigh")
row.names(transfer_cox1)<-colnames(transfer_s1)[1:18]



#forestplot#
transfer_cox1<-transfer_cox1[,c(2,5,6,7)]
transfer_cox1<-transfer_cox1[which(transfer_cox1$p < 0.05),]
transfer_cox1$gene<-row.names(transfer_cox1)
forestplot(transfer_cox1, # 森林图文本部分
           mean = transfer_cox1$HR, # 图形元素中HR部分
           lower = transfer_cox1$CIlow,  # 图形元素中置信区间
           upper = transfer_cox1$CIhigh,
           zero = 1, #显示y=0的垂直线
           xlog=FALSE, #x轴的坐标不取对数
           fn.ci_norm = fpDrawCircleCI, #误差条显示方式
           boxsize = 0.1, ##误差条中的圆心点大小
           col=fpColors(line = "#69a794", #误差条的线的颜色   "#dd8047","#a5ab81","#d8b25c","#968c8c"
                        box="#69a794"), #误差条的圆心点的颜色    
           lty.ci = 7,   # 误差条的线的线型
           lwd.ci = 3,   # 误差条的线的宽度
           ci.vertices.height = 0.10, # # 误差条末端的长度
           txt_gp = fpTxtGp(ticks = gpar(cex = 0.5), xlab = gpar(cex = 0.7), cex = 0.7), #文本大小设置
           lineheight = "auto")#线的高度 

#在这里重复随机2***#
a<-c()
for(i in 1:1000){
  transfer_s1_train<-transfer_s1[,intersect(colnames(transfer_s1),row.names(transfer_cox1[which(transfer_cox1$HR > 1),]))]
  transfer_s1_train$class<-transfer_s1$category
  transfer_s1_train$class<-as.factor(as.numeric(transfer_s1_train$class))   #只有2类，而不是其他类为0#
  transfer_s1_test<-transfer_s1_t[,intersect(colnames(transfer_s1),row.names(transfer_cox1[which(transfer_cox1$HR > 1),]))]
  ao<-intersect(row.names(transfer_s1_test),row.names(clinical))
  transfer_s1_test<-cbind(transfer_s1_test,clinical[ao,]$category)
  colnames(transfer_s1_test)[15]<-"class"
  transfer_s1_test$class<-as.factor(as.numeric(transfer_s1_test$class))
  
  
  transfer_s1_train<-transfer_s1_train[c(1:62,sample(63:1858,62)),] #1.2类数据量差太多，随机截取#
  transfer_s1_test<-transfer_s1_test[c(1:16,sample(17:465,17)),]
  
  svmres <- svm(class~.,data = transfer_s1_train, type = 'C',kernel = 'radial')
  pre_svm <- predict(svmres,newdata = transfer_s1_test)
  obs_p_svm <-data.frame(prob=pre_svm,obs=transfer_s1_test$class)
  svm_roc <- roc(transfer_s1_test$class,as.numeric(pre_svm))#
  a[i]<-svm_roc$auc
  write.csv(transfer_s1_test,paste0("D://danni//1//结果图//转录组//分类器//ss//transfer_s1_test_",svm_roc$auc,".csv"))
  write.csv(transfer_s1_train,paste0("D://danni//1//结果图//转录组//分类器//ss//transfer_s1_train_",svm_roc$auc,".csv"))
}
max(a)

#如果结果好，验证改变后的train（样本变了）cox#
transfer_s1_test<-read.csv("D://danni//1//结果图//转录组//分类器//transfer//0.818//transfer_s1_test.csv",row.names = 1)
transfer_s1_train<-read.csv("D://danni//1//结果图//转录组//分类器//transfer//0.818//transfer_s1_train.csv",row.names = 1)


ao<-intersect(row.names(transfer_s1),row.names(transfer_s1_train))
ss<-transfer_s1[ao,]
transfer_coxs<-summary(coxph(Surv(OS.Time, OS) ~ KLHDC7B.DT, data = ss))$coefficients
transfer_coxs<-cbind(transfer_coxs,as.data.frame(summary(coxph(Surv(OS.Time, OS) ~ KLHDC7B.DT, data = ss))[8])[,c(3,4)])
for(i in colnames(ss)[2:18]){
  transfer_cox11<-summary(coxph(Surv(OS.Time, OS) ~ get(i), data = ss))$coefficients
  transfer_cox11<-cbind(transfer_cox11,as.data.frame(summary(coxph(Surv(OS.Time, OS) ~ get(i), data = ss))[8])[,c(3,4)])
  transfer_coxs<-rbind(transfer_coxs,transfer_cox11)
}
colnames(transfer_coxs)<-c("coef","HR","error","z","p","CIlow","CIhigh")
row.names(transfer_coxs)<-colnames(transfer_s1)[1:18]
#forestplot#
transfer_coxs<-transfer_coxs[,c(2,5,6,7)]
transfer_coxs<-transfer_coxs[which(transfer_coxs$p < 0.05),]
transfer_coxs$gene<-row.names(transfer_coxs)
forestplot(transfer_coxs, # 森林图文本部分
           mean = transfer_coxs$HR, # 图形元素中HR部分
           lower = transfer_coxs$CIlow,  # 图形元素中置信区间
           upper = transfer_coxs$CIhigh,
           zero = 1, #显示y=0的垂直线
           xlog=FALSE, #x轴的坐标不取对数
           fn.ci_norm = fpDrawCircleCI, #误差条显示方式
           boxsize = 0.1, ##误差条中的圆心点大小
           col=fpColors(line = "#69a794", #误差条的线的颜色   "#dd8047","#a5ab81","#d8b25c","#968c8c"
                        box="#69a794"), #误差条的圆心点的颜色    
           lty.ci = 7,   # 误差条的线的线型
           lwd.ci = 3,   # 误差条的线的宽度
           ci.vertices.height = 0.10, # # 误差条末端的长度
           txt_gp = fpTxtGp(ticks = gpar(cex = 0.5), xlab = gpar(cex = 0.7), cex = 0.7), #文本大小设置
           lineheight = "auto")#线的高度
#保存时改图片大小#

#如果结果好
#用这里的结果改变train和test的基因
#再次做分类器
ao<-intersect(row.names(transfer_s1),row.names(transfer_s1_train))
transfer_s1_train<-transfer_s1[ao,]
transfer_s1_train<-transfer_s1_train[,c(1,2,3,4,7,8,11,15,16,23)]
colnames(transfer_s1_train)[10]<-"class"
transfer_s1_train$class<-as.factor(as.numeric(transfer_s1_train$class)) 

ao<-intersect(row.names(transfer_s1_t),row.names(transfer_s1_test))
transfer_s1_test<-transfer_s1_t[ao,]
transfer_s1_test<-transfer_s1_test[,c(1,2,3,4,7,8,11,15,16,23)]
colnames(transfer_s1_test)[10]<-"class"
transfer_s1_test$class<-as.factor(as.numeric(transfer_s1_test$class)) 

## 选取误差最小的节点数mtry，找最优参数mtry，即指定节点中用于二叉树的最佳变量个数
set.seed(1234)
err <- c()
for(i in 1:(ncol(transfer_s1_train)-1)){
  mtry_fit <- randomForest(as.factor(transfer_s1_train$class) ~ ., data = transfer_s1_train, mtry = i)
  err <- c(err,mean(mtry_fit$err.rate))
}
which.min(err) 


##寻找最佳参数ntree，即指定随机森林所包含的最佳决策树数目
set.seed(1000)
ntree_fit <- randomForest(transfer_s1_train$class ~ ., data = transfer_s1_train, mtry = 3, ntree = 3000)
plot(ntree_fit) #绘制模型误差与决策树数量关系图 


##构建模型
set.seed(2000)
rf <- randomForest(transfer_s1_train$class ~ ., data = transfer_s1_train, mtry = 3, ntree = 1500, importance = TRUE, proximity = TRUE)
pred <- predict(rf,newdata = transfer_s1_test)

table(pred,transfer_s1_test$class)  

#绘制ROC曲线
rf_roc <- roc(transfer_s1_test$class,as.numeric(pred))
plot(rf_roc, print.auc=TRUE, auc.polygon=TRUE, grid=c(0.1, 0.2),grid.col=c("green", "red"), max.auc.polygon=TRUE,auc.polygon.col="skyblue", print.thres=TRUE,main='随机森林模型ROC曲线')




##k近邻##
library(class)
library(caret)
ao<-c()
for (k in 1:10) {
  knnresult <- knn(train = transfer_s1_train[,1:3],test = transfer_s1_test[,1:3],cl=transfer_s1_train$class,k = k)
  table(transfer_s1_test$class,knnresult)
  #knn_roc <- multiclass.roc(test3$class,as.numeric(knnresult))
  knn_roc <- roc(transfer_s1_test$class,as.numeric(knnresult))
  print(knn_roc)
  #print(sum(diag(table(test4$class,knnresult)))/sum(table(test4$class,knnresult)))
  ao[k]<-knn_roc$auc
}

max(ao)
#找到最合适k#
knnresult <- knn(train = transfer_s1_train[,1:3],test = transfer_s1_test[,1:3],cl=transfer_s1_train$class,k = which(ao == max(ao)))
table(transfer_s1_test$class,knnresult)
#knn_roc <- multiclass.roc(test3$class,as.numeric(knnresult))
knn_roc <- roc(transfer_s1_test$class,as.numeric(knnresult))
plot(knn_roc, print.auc=TRUE, auc.polygon=TRUE, grid=c(0.1, 0.2),grid.col=c("green", "red"), max.auc.polygon=TRUE,auc.polygon.col="skyblue", print.thres=TRUE,main='随机森林模型ROC曲线')



##SVM支持向量机##
BiocManager::install("e1071", type="binary")
library(e1071)
library(pROC)
library(backports)

#svm
svmres <- svm(class~.,data = transfer_s1_train, type = 'C',kernel = 'radial')
#测试集
pre_svm <- predict(svmres,newdata = transfer_s1_test)
obs_p_svm <-data.frame(prob=pre_svm,obs=transfer_s1_test$class)
###输出混淆矩阵
table(transfer_s1_test$class,pre_svm,dnn=c("真实值","预测值"))
###绘制ROC曲线
#svm_roc <- multiclass.roc(transfer_s1_test$class,as.numeric(pre_svm))#
svm_roc <- roc(transfer_s1_test$class,as.numeric(pre_svm))#
plot(svm_roc, print.auc=TRUE, auc.polygon=TRUE, grid=c(0.1, 0.2),grid.col=c("green", "red"), max.auc.polygon=TRUE,auc.polygon.col="skyblue", print.thres=TRUE,main='SVM模型ROC曲线 kernel = radial')


#生存#
immu<-read.table("immu.txt",header = T,sep = "\t",row.names = 1)
ao<-intersect(row.names(obs_p_svm),row.names(immu))
surv<-cbind(obs_p_svm[ao,],immu[ao,c(32,33)])
fit1 <- survfit(Surv(OS.Time, OS) ~ prob,data = surv)
ggsurvplot(fit1,risk.table=F,
           pval=TRUE,ggtheme = theme_bw(),
           ylab="Survival probabilities",legend=c(0.8,0.9),
           legend.title="",
           pval.method=TRUE) 


#富集分析#
library(clusterProfiler)
library(org.Hs.eg.db)
genes<-colnames(transfer_s1_test)[1:9]
genes<-colnames(transfer_s1)[1:18]
genes<-gsub("\\.","-",genes)
genes1<-c("KLHDC7B","ANKRD22","RAB27B","LIPM")
#genes2<-genes[5:9]
ego <- enrichGO(gene=genes,OrgDb = org.Hs.eg.db,keyType = "SYMBOL",ont = "BP",pvalueCutoff=0.05)
head(ego@result)

geo_plot<-cbind(as.data.frame(ego@result[2]),as.data.frame(ego@result[5]))
geo_plot<-cbind(geo_plot,as.data.frame(ego@result[3]))
geo_plot<-cbind(geo_plot,as.data.frame(ego@result[9]))
geo_plot<-geo_plot[1:20,]
ggplot(geo_plot,aes(GeneRatio,reorder(Description,Count))) +
  geom_point(aes(size=Count,color=pvalue)) +
  scale_size_continuous(range = c(6,10)) +
  scale_color_gradient(low="#EE3F4D",high = "#e6d2d5") +
  theme(axis.text.x = element_text(size = 10),    ###主题
        axis.text.y = element_text(size = 10),
        #legend.position = "top",
        #legend.background = element_rect(fill="transparent", size=.5),
        axis.line = element_line(size = 0.5, colour = "black"),
        axis.title = element_blank(),
        strip.background = element_blank(),
        strip.text = element_blank(),
        panel.background = element_blank(),
        panel.border = element_blank(),
        panel.grid = element_blank())

#3+9
genes<-c(colnames(relapse_s1_test)[1:3],colnames(transfer_s1_test)[1:9])
genes<-gsub("\\.","-",genes)
ego <- enrichGO(gene=genes,OrgDb = org.Hs.eg.db,keyType = "SYMBOL",ont = "BP",pvalueCutoff=0.05)
head(ego@result)

geo_plot<-cbind(as.data.frame(ego@result[2]),as.data.frame(ego@result[5]))
geo_plot<-cbind(geo_plot,as.data.frame(ego@result[3]))
geo_plot<-cbind(geo_plot,as.data.frame(ego@result[9]))
geo_plot<-geo_plot[1:20,]
ggplot(geo_plot,aes(GeneRatio,reorder(Description,Count))) +
  geom_point(aes(size=Count,color=pvalue)) +
  scale_size_continuous(range = c(6,10)) +
  scale_color_gradient(low="#681752",high = "#c08eaf") +
  theme(axis.text.x = element_text(size = 10),    ###主题
        axis.text.y = element_text(size = 10),
        #legend.position = "top",
        #legend.background = element_rect(fill="transparent", size=.5),
        axis.line = element_line(size = 0.5, colour = "black"),
        axis.title = element_blank(),
        strip.background = element_blank(),
        strip.text = element_blank(),
        panel.background = element_blank(),
        panel.border = element_blank(),
        panel.grid = element_blank())


#KEGG#
f<-c("ENSG00000272666","ENSG00000152766","ENSG00000041353","ENSG00000173239",
     "ENSG00000211966","ENSG00000211679","ENSG00000211895","ENSG00000254709",
     "ENSG00000239951")   ##9基因的ENSEMBL编号
EG2Ensembl=toTable(org.Hs.egENSEMBL)
geneLists=data.frame(ensembl_id=f)
results=merge(geneLists,EG2Ensembl,by='ensembl_id',all.x=T)
id=na.omit(results$gene_id)



ekk <- enrichKEGG(gene= id,organism  = 'hsa', qvalueCutoff = 0.05)
ekk@result


#enrichplot#
library(DOSE)
library(enrichplot)
library(dplyr)
library(clusterProfiler)

genes<-c(genes1,genes2)

gene_symbol <- bitr(genes, fromType="SYMBOL", toType=c("ENSEMBL", "ENTREZID"), OrgDb="org.Hs.eg.db")
gene_symbol


ego <- enrichGO(genes2,OrgDb = org.Hs.eg.db,keyType = "SYMBOL",ont = "BP",pvalueCutoff=0.05)


ego <- enrichGO(genes1,OrgDb = org.Hs.eg.db,keyType = "SYMBOL",ont = "BP",pvalueCutoff=0.05)


p<-emapplot(
  pairwise_termsim(ego),
  showCategory = 20,
  color = "p.adjust",
  layout = "nicely",
  node_scale = NULL,
  line_scale = NULL,
  min_edge = 0.2,
  node_label_size = NULL,
  cex_label_category = 1,
  cex_category = NULL,
  cex_line = 0.5
)
ggsave("transfer_5,9genes_pathway.pdf",p)


#朴素贝叶斯##

library(caret)
library(e1071)
nb.model <- naiveBayes(class~.,data = transfer_s1_train)
#预测结果
nb_predict <- predict(nb.model,newdata = transfer_s1_test)
#生成实际与预测交叉表和预测精度
nb.table <- table(actual=transfer_s1_test$class,predict=nb_predict)
nb_roc <- multiclass.roc(transfer_s1_test$class,as.numeric(nb_predict))#
nb_roc <- roc(transfer_s1_test$class,as.numeric(nb_predict))#
nb_roc 
nb_ratio <- sum(diag(nb.table))/sum(nb.table)
nb_ratio  #[1] 
plot(nb_roc, print.auc=TRUE, auc.polygon=TRUE, grid=c(0.1, 0.2),grid.col=c("green", "red"), max.auc.polygon=TRUE,auc.polygon.col="skyblue", print.thres=TRUE,main='SVM模型ROC曲线 kernel = radial')





#####################################################
#服务器#
setwd("/pub6/siyu/hdn/mutation")
mutation <- read.table("/pub6/siyu/mutation/pancancer-1.txt",sep = "\t",header = T,row.names = 1)
for (mu in 2:10){
  mutation1 <- read.table(paste0("/pub6/siyu/mutation/pancancer-",mu,".txt"),sep = "\t",header = T,row.names = 1)
  mutation<-rbind(mutation,mutation1)
  print(mu)
}
colnames(mutation)<-gsub("\\.","-",colnames(mutation))

clinical<-read.table("clinical.txt",sep = "\t",header = T,row.names = 1)
clinical$category<-as.factor(clinical$category)



#循环#
m10<-clinical[which(clinical$category == 10),]
m12<-clinical[which(clinical$category == 12),]
ao<-c()
for(i in 1:length(row.names(m10))){
  for(j in 1:length(colnames(mutation))){
    if(row.names(m10)[i] == colnames(mutation)[j]){
      ao[j]<-j
    }
  }
}
ao<-na.omit(ao)
length(ao)
mutation10<-mutation[,ao]

ao<-c()
for(i in 1:length(row.names(m12))){
  for(j in 1:length(colnames(mutation))){
    if(row.names(m12)[i] == colnames(mutation)[j]){
      ao[j]<-j
    }
  }
}
ao<-na.omit(ao)
length(ao)
mutation12<-mutation[,ao]

write.csv(mutation10,"mutation10.csv")
write.csv(mutation11,"mutation11.csv")


mutation1<-read.csv("mutation1.csv",row.names = 1)
mutation2<-read.csv("mutation2.csv",row.names = 1)
mutation3<-read.csv("mutation3.csv",row.names = 1)
mutation4<-read.csv("mutation4.csv",row.names = 1)
mutation5<-read.csv("mutation5.csv",row.names = 1)
mutation6<-read.csv("mutation6.csv",row.names = 1)
mutation7<-read.csv("mutation7.csv",row.names = 1)
mutation8<-read.csv("mutation8.csv",row.names = 1)
mutation9<-read.csv("mutation9.csv",row.names = 1)
mutation10<-read.csv("mutation10.csv",row.names = 1)
mutation11<-read.csv("mutation11.csv",row.names = 1)
mutation12<-read.csv("mutation12.csv",row.names = 1)





####突变频率####
mu<-as.data.frame(apply(mutation1,1,mean))
mu<-cbind(mu,as.data.frame(apply(mutation2,1,mean)))
mu<-cbind(mu,as.data.frame(apply(mutation3,1,mean)))
mu<-cbind(mu,as.data.frame(apply(mutation4,1,mean)))
mu<-cbind(mu,as.data.frame(apply(mutation5,1,mean)))
mu<-cbind(mu,as.data.frame(apply(mutation6,1,mean)))
mu<-cbind(mu,as.data.frame(apply(mutation7,1,mean)))
mu<-cbind(mu,as.data.frame(apply(mutation8,1,mean)))
mu<-cbind(mu,as.data.frame(apply(mutation9,1,mean)))
mu<-cbind(mu,as.data.frame(apply(mutation10,1,mean)))
mu<-cbind(mu,as.data.frame(apply(mutation11,1,mean)))
mu<-cbind(mu,as.data.frame(apply(mutation12,1,mean)))





#fisher p值#
fp<-function(x1,x2){
  ao<-c()
  for(i in 1:nrow(x1)){
    a<-length(which(x1[i,] == "1"))
    b<-length(which(x1[i,] == "0"))
    c<-length(which(x2[i,] == "1"))
    d<-length(which(x2[i,] == "0"))
    data<-matrix(c(b,d,a,c),ncol = 2,nrow =2)
    ao[i]<-fisher.test(data)$p
    print(length(ao))
  }
  ao   ##输出结果
}

s1r<-fp(mutation1,mutation2)
write.csv(as.data.frame(s1r),"relapse1.csv")
s2r<-fp(mutation4,mutation5)
write.csv(as.data.frame(s2r),"relapse2.csv")
s3r<-fp(mutation7,mutation8)
write.csv(as.data.frame(s3r),"relapse3.csv")
s45r<-fp(mutation10,mutation11)
write.csv(as.data.frame(s45r),"relapse45.csv")

s1t<-fp(mutation1,mutation3)
write.csv(as.data.frame(s1t),"transfer1.csv")
s2t<-fp(mutation4,mutation6)
write.csv(as.data.frame(s2t),"transfer2.csv")
s3t<-fp(mutation7,mutation9)
write.csv(as.data.frame(s3t),"transfer3.csv")
s45t<-fp(mutation10,mutation12)
write.csv(as.data.frame(s45t),"transfer45.csv")


#stage3+4+5(3+9genes)#
normal345<-cbind(mutation7,mutation10)
r1<-normal345[c(1985,16714,17650),]
t1<-normal345[c(1030,8414,8501,8552,8564,8573,9379,10146,15011),]
relapse345<-cbind(mutation8,mutation11)
relapse345<-relapse345[c(1985,16714,17650),]
transfer345<-cbind(mutation9,mutation12)
transfer345<-transfer345[c(1030,8414,8501,8552,8564,8573,9379,10146,15011),]

s345r<-fp(r1,relapse345)  ##代替s3r与s45r
s345t<-fp(t1,transfer345)  ##代替s3t与s45t





#R#
rm(list = ls(all = TRUE))
setwd("D://danni//1//结果图//突变")
library(ggplot2)
library(pheatmap)

relapse<-read.table("mu_relapse突变频率.txt",header = T,sep = "\t",row.names = 1)
transfer<-read.table("mu_transfer突变频率.txt",header = T,sep = "\t",row.names = 1)


relapse_p<-read.table("relapse_p.txt",header = T,sep = "\t",row.names = 1)
transfer_p<-read.table("transfer_p.txt",header = T,sep = "\t",row.names = 1)


gene1<-read.table("1genes.txt",header = T,sep = "\t",row.names = 1)
gene27<-read.table("27genes_p.txt",header = T,sep = "\t",row.names = 1)



#热图#
gene1<-gene1-0.04   #p
pheatmap(gene1,cluster_col = F,cluster_row = F,show_rownames = T,
         color = c(colorRampPalette(colors = c("#ed5126","#d2d97a"))(floor(abs(min(gene2))/0.001)),colorRampPalette(colors = c("#c6dfc8","#61ac85"))(floor(abs(max(gene2))/0.001))),
         breaks = c(seq(min(gene2),-0.001,by=0.001),seq(0,max(gene2),by=0.001)),
         angle_col = 0  #坐标方向
)

gene27<-gene27-0.05  #p
pheatmap(gene27,cluster_col = F,cluster_row = F,show_rownames = T,
         color = c(colorRampPalette(colors = c("#ed5126","#d2d97a"))(floor(abs(min(gene27))/0.0001)),colorRampPalette(colors = c("#c6dfc8","#61ac85"))(floor(abs(max(gene27))/0.0001))),
         breaks = c(seq(min(gene27),-0.0001,by=0.0001),seq(0,max(gene27),by=0.0001)),
         angle_col = 0  #坐标方向
)



##富集分析##
library(clusterProfiler)
library(org.Hs.eg.db)
library(ggplot2)
genes<-row.names(gene27)
ego <- enrichGO(gene=genes,OrgDb = org.Hs.eg.db,keyType = "SYMBOL",ont = "BP",pvalueCutoff=0.05)
#ego <- simplify(ego,cutoff=0.05,by="p.adjust",select_fun=min)  ##去冗余
head(ego@result)
geo_plot<-cbind(as.data.frame(ego@result[2]),as.data.frame(ego@result[5]))
geo_plot<-cbind(geo_plot,as.data.frame(ego@result[3]))
geo_plot<-cbind(geo_plot,as.data.frame(ego@result[9]))
geo_plot<-geo_plot[1:25,]
ggplot(geo_plot,aes(GeneRatio,reorder(Description,Count))) +
  geom_point(aes(size=Count,color=pvalue)) +
  scale_size_continuous(range = c(6,10)) +
  scale_color_gradient(low="#681752",high = "#c08eaf") +
  theme(axis.text.x = element_text(size = 10),    ###主题
        axis.text.y = element_text(size = 10),
        #legend.position = "top",
        #legend.background = element_rect(fill="transparent", size=.5),
        axis.line = element_line(size = 0.5, colour = "black"),
        axis.title = element_blank(),
        strip.background = element_blank(),
        strip.text = element_blank(),
        panel.background = element_blank(),
        panel.border = element_blank(),
        panel.grid = element_blank())


#enrichplot#
library(DOSE)
library(enrichplot)
library(dplyr)
library(clusterProfiler)



emapplot(
  pairwise_termsim(ego),
  showCategory = 25,
  color = "p.adjust",
  layout = "nicely",
  node_scale = NULL,
  line_scale = NULL,
  min_edge = 0.2,
  node_label_size = NULL,
  cex_label_category = 1,
  cex_category = NULL,
  cex_line = 0.5
)


#kegg#
id <- bitr(genes, fromType="SYMBOL", toType=c( "ENTREZID"), OrgDb="org.Hs.eg.db")
id<-id$ENTREZID


ekk <- enrichKEGG(gene= id,organism  = 'hsa', qvalueCutoff = 0.05)
ekk@result

emapplot(
  pairwise_termsim(ekk),
  showCategory = 25,
  color = "p.adjust",
  layout = "nicely",
  node_scale = NULL,
  line_scale = NULL,
  min_edge = 0.2,
  node_label_size = NULL,
  cex_label_category = 1,
  cex_category = NULL,
  cex_line = 0.5
)


###stage1 生存###
mutation1<-read.csv("D://danni//1//结果图//突变//数据//mutation1.csv",row.names = 1)
mutation3<-read.csv("D://danni//1//结果图//突变//数据//mutation3.csv",row.names = 1)
time<-read.table("D://danni//1//time.txt",header = T,sep = "\t",row.names = 1)
s1nr<-cbind(mutation1,mutation3)
s1nr<-s1nr[genes,]
s1nr<-t(s1nr)
for(i in 1:11130){
  if(is.na(time$days_to_death[i])){
    time$days_to_death[i]<-time$days_to_last_followup[i]
  }}
time<-time[-which(duplicated(substring(row.names(time),1,12))),]
row.names(time)<-substring(row.names(time),1,12)
ao<-intersect(row.names(s1nr),row.names(time)) 
s1nr<-s1nr[ao,];time_<-time[ao,]
s1nr<-cbind(s1nr,time_[,1:2])


library(survival)
library(ggplot2)
library(ggpubr)
library(survminer)
for(i in colnames(s1nr)[1:27]){
  pdf(file = paste0(i,".pdf"))
  fit1 <- survfit(Surv(days_to_death, vital_status) ~ RYR2,data = s1nr)
  print(ggsurvplot(fit1,risk.table=F,
             palette = c("#9abeaf","#f1939c"),
             pval=TRUE,ggtheme = theme_bw(),
             ylab="Survival probabilities",legend=c(0.8,0.9),
             legend.title="",
             pval.method=TRUE))
  dev.off() 
}


gene_8<-c("ADGRV1","CSMD3","RYR2","USH2A","ZFHX4","KMT2D","MUC16","MUC17")
s1nr_8<-s1nr[,gene_8]
s1nr_8<-cbind(s1nr_8,s1nr[,28:29])

#cox#
library(survival)
library(ggplot2)
library(ggpubr)
library(survminer)
library(AnnotationDbi)
library(org.Hs.eg.db)
library(forestplot)

cox<-summary(coxph(Surv(days_to_death, vital_status) ~ RYR2+CSMD3, data = s1nr_8))$coefficients
cox<-cbind(cox,as.data.frame(summary(coxph(Surv(days_to_death, vital_status) ~ RYR2+CSMD3, data = s1nr_8))[8])[,c(3,4)])
colnames(cox)<-c("coef","HR","error","z","p","CIlow","CIhigh")
cox<-cox[,c(2,5,6,7)]
#cox<-cox[which(cox$p < 0.05),]
cox$gene<-row.names(cox)

forestplot(cox, # 森林图文本部分
           mean = cox$HR, # 图形元素中HR部分
           lower = cox$CIlow,  # 图形元素中置信区间
           upper = cox$CIhigh,
           zero = 1, #显示y=0的垂直线
           xlog=FALSE, #x轴的坐标不取对数
           fn.ci_norm = fpDrawCircleCI, #误差条显示方式
           boxsize = 0.15, ##误差条中的圆心点大小
           col=fpColors(line = "#69a794", #误差条的线的颜色   "#dd8047","#a5ab81","#d8b25c","#968c8c"
                        box="#69a794"), #误差条的圆心点的颜色    
           lty.ci = 7,   # 误差条的线的线型
           lwd.ci = 3,   # 误差条的线的宽度
           ci.vertices.height = 0.10, # # 误差条末端的长度
           txt_gp = fpTxtGp(ticks = gpar(cex = 0.5), xlab = gpar(cex = 0.7), cex = 0.7), #文本大小设置
           lineheight = "auto")#线的高度 




genes_2<-c("CSMD3","RYR2")
ego <- enrichGO(gene=genes_2,OrgDb = org.Hs.eg.db,keyType = "SYMBOL",ont = "BP",pvalueCutoff=0.05)
#ego <- simplify(ego,cutoff=0.05,by="p.adjust",select_fun=min)  ##去冗余

#enrichplot#
library(DOSE)
library(enrichplot)
library(dplyr)
library(clusterProfiler)



emapplot(
  pairwise_termsim(ego),
  showCategory = 25,
  color = "p.adjust",
  layout = "nicely",
  node_scale = NULL,
  line_scale = NULL,
  min_edge = 0.2,
  node_label_size = NULL,
  cex_label_category = 1,
  cex_category = NULL,
  cex_line = 0.5
)


#kegg#
id <- bitr(genes, fromType="SYMBOL", toType=c( "ENTREZID"), OrgDb="org.Hs.eg.db")
id<-id$ENTREZID


ekk <- enrichKEGG(gene= id,organism  = 'hsa', qvalueCutoff = 0.05)
ekk@result

emapplot(
  pairwise_termsim(ekk),
  showCategory = 25,
  color = "p.adjust",
  layout = "nicely",
  node_scale = NULL,
  line_scale = NULL,
  min_edge = 0.2,
  node_label_size = NULL,
  cex_label_category = 1,
  cex_category = NULL,
  cex_line = 0.5
)



###打分矩阵###
library(ggplot2)
library(ggsignif)
library(ggpubr)
mutation1<-read.csv("D://danni//1//结果图//突变//数据//mutation1.csv",row.names = 1)
mutation3<-read.csv("D://danni//1//结果图//突变//数据//mutation3.csv",row.names = 1)


#所有基因富集区间#
mutation1<-t(mutation1);mutation3<-t(mutation3)
m1<-apply(mutation1,1,sum);m3<-apply(mutation3,1,sum)
m1<-as.data.frame(m1);m1$transfer<-0;colnames(m1)[1]<-"score"
m3<-as.data.frame(m3);m3$transfer<-1;colnames(m3)[1]<-"score"
score<-rbind(m1,m3)


score<-read.csv("score.csv",row.names = 1)
score$sample<-as.factor(score$sample);score$transfer<-as.factor(score$transfer)
ggplot(score,aes(x=as.factor(gene),fill =transfer)) + 
  geom_bar(na.rm = T,position = "fill") +
  scale_fill_manual(values = c("#92bba1","#de9952")) +
  #coord_flip()+
  theme(axis.text.x = element_text(size = 10),    ###主题
        axis.text.y = element_text(size = 10),
        #legend.position = "top",
        #legend.background = element_rect(fill="transparent", size=.5),
        axis.line = element_line(size = 0.5, colour = "black"),
        axis.title = element_blank(),
        strip.background = element_blank(),
        strip.text = element_blank(),
        panel.background = element_blank(),
        panel.border = element_blank(),
        panel.grid = element_blank())

zx1<-read.table("折线图.txt",header = T,sep = "\t")
ggplot(zx1,aes(x = as.factor(X),y = percent,color = class,group = class))+
  geom_line(size = 2) +
  geom_point(size = 3.5) +
  scale_color_manual(values = c("#92bba1","#de9952" ))+
  theme(axis.text.x = element_text(size = 10),    ###主题
        axis.text.y = element_text(size = 10),
        #legend.position = "top",
        #legend.background = element_rect(fill="transparent", size=.5),
        axis.line = element_line(size = 0.5, colour = "black"),
        axis.title = element_blank(),
        strip.background = element_blank(),
        strip.text = element_blank(),
        panel.background = element_blank(),
        panel.border = element_blank(),
        panel.grid = element_blank())


ks.test(zx1$percent[1:5],zx1$percent[6:10])








#27genes#
mutation1<-t(mutation1);mutation3<-t(mutation3)
mutation1<-mutation1[,genes];mutation3<-mutation3[,genes]
m1<-apply(mutation1,1,sum);m3<-apply(mutation3,1,sum)
m1<-as.data.frame(m1);m1$transfer<-0;colnames(m1)[1]<-"score"
m3<-as.data.frame(m3);m3$transfer<-1;colnames(m3)[1]<-"score"
score_27<-rbind(m1,m3)

score_27$mu1<-1;score_27$mu1[which(score_27$score < 1)]<-0
score_27$mu2<-1;score_27$mu2[which(score_27$score < 2)]<-0
score_27$mu3<-1;score_27$mu3[which(score_27$score < 3)]<-0
score_27$mu4<-1;score_27$mu4[which(score_27$score < 4)]<-0
score_27$mu5<-1;score_27$mu5[which(score_27$score < 5)]<-0
score_27$mu6<-1;score_27$mu6[which(score_27$score < 6)]<-0
score_27$mu7<-1;score_27$mu7[which(score_27$score < 7)]<-0
score_27$mu8<-1;score_27$mu8[which(score_27$score < 8)]<-0
score_27$mu9<-1;score_27$mu9[which(score_27$score < 9)]<-0
score_27$mu10<-1;score_27$mu10[which(score_27$score < 10)]<-0
score_27$mu11<-1;score_27$mu11[which(score_27$score < 11)]<-0
score_27$mu12<-1;score_27$mu12[which(score_27$score < 12)]<-0
score_27$mu13<-1;score_27$mu13[which(score_27$score < 13)]<-0
score_27$mu14<-1;score_27$mu14[which(score_27$score < 14)]<-0
score_27$mu15<-1;score_27$mu15[which(score_27$score < 15)]<-0
score_27$mu16<-1;score_27$mu16[which(score_27$score < 16)]<-0
score_27$mu17<-1;score_27$mu17[which(score_27$score < 17)]<-0
score_27$mu18<-1;score_27$mu18[which(score_27$score < 18)]<-0
score_27$mu19<-1;score_27$mu19[which(score_27$score < 19)]<-0
score_27$mu20<-1;score_27$mu20[which(score_27$score < 20)]<-0
score_27$mu21<-1;score_27$mu21[which(score_27$score < 21)]<-0
score_27$mu22<-1;score_27$mu22[which(score_27$score < 22)]<-0
score_27$mu23<-1;score_27$mu23[which(score_27$score < 23)]<-0
score_27$mu24<-1;score_27$mu24[which(score_27$score < 24)]<-0
score_27$mu25<-1;score_27$mu25[which(score_27$score < 25)]<-0
score_27$mu26<-1;score_27$mu26[which(score_27$score < 26)]<-0
score_27$mu27<-1;score_27$mu27[which(score_27$score < 27)]<-0


score_27$score1<-0
score_27$score1[which(score_27$score > 3 & score_27$score < 8)]<-4
score_27$score1[which(score_27$score > 7 & score_27$score < 12)]<-8
score_27$score1[which(score_27$score > 11 & score_27$score < 16)]<-12
score_27$score1[which(score_27$score > 15 & score_27$score < 20)]<-16
score_27$score1[which(score_27$score > 19 & score_27$score < 24)]<-20
score_27$score1[which(score_27$score > 24 & score_27$score < 28)]<-24


ggplot(score_27,aes(x = as.factor(transfer),y = score))+
  geom_violin(aes(fill = as.factor(transfer)),trim=FALSE,color="white")+#color小提琴轮廓线颜色
  #geom_boxplot(width = 0.5,outlier.colour = NA)+
  stat_compare_means(comparisons = list(c("0", "1"))) +
  scale_fill_manual(values = c( "#d1c2d3","#806d9e" ))+
  stat_summary(fun="mean",geom="point",shape=23,size=2,fill="white")+#均值标记
  theme(axis.text.x = element_text(size = 10),    ###主题
        axis.text.y = element_text(size = 10),
        #legend.position = "top",
        #legend.background = element_rect(fill="transparent", size=.5),
        axis.line = element_line(size = 0.5, colour = "black"),
        axis.title = element_blank(),
        strip.background = element_blank(),
        strip.text = element_blank(),
        panel.background = element_blank(),
        panel.border = element_blank(),
        panel.grid = element_blank())


ao<-intersect(row.names(score_27),row.names(time))
time_27<-time[ao,];score_27<-score_27[ao,]
score_27<-cbind(score_27,time_27[,1:2])



for(i in colnames(score_27)[3:29]){
  pdf(file = paste0("27genes_",i,".pdf"))
  fit1 <- survfit(Surv(days_to_death, vital_status) ~ get(i),data = score_27)
  print(ggsurvplot(fit1,risk.table=F,
                   palette = c("#9abeaf","#f1939c"),
                   pval=TRUE,ggtheme = theme_bw(),
                   ylab="Survival probabilities",legend=c(0.8,0.9),
                   legend.title="",
                   pval.method=TRUE))
  dev.off() 
}


ggplot(score_27,aes(x=as.factor(score),fill = as.factor(transfer))) + 
  geom_bar(na.rm = T,position = "fill") +
  scale_fill_manual(values = c("#d1c2d3","#806d9e")) +
  #coord_flip()+
  theme(axis.text.x = element_text(size = 10),    ###主题
        axis.text.y = element_text(size = 10),
        #legend.position = "top",
        #legend.background = element_rect(fill="transparent", size=.5),
        axis.line = element_line(size = 0.5, colour = "black"),
        axis.title = element_blank(),
        strip.background = element_blank(),
        strip.text = element_blank(),
        panel.background = element_blank(),
        panel.border = element_blank(),
        panel.grid = element_blank())





#28genes#
mutation1<-t(mutation1);mutation3<-t(mutation3)
genes_28<-c(genes,"IGHA1")
mutation1<-mutation1[,genes_28];mutation3<-mutation3[,genes_28]
m1<-apply(mutation1,1,sum);m3<-apply(mutation3,1,sum)
m1<-as.data.frame(m1);m1$transfer<-0;colnames(m1)[1]<-"score"
m3<-as.data.frame(m3);m3$transfer<-1;colnames(m3)[1]<-"score"
score_28<-rbind(m1,m3)
score_28$mu1<-1;score_28$mu1[which(score_28$score < 1)]<-0
score_28$mu2<-1;score_28$mu2[which(score_28$score < 2)]<-0
score_28$mu3<-1;score_28$mu3[which(score_28$score < 3)]<-0
score_28$mu4<-1;score_28$mu4[which(score_28$score < 4)]<-0
score_28$mu5<-1;score_28$mu5[which(score_28$score < 5)]<-0
score_28$mu6<-1;score_28$mu6[which(score_28$score < 6)]<-0
score_28$mu7<-1;score_28$mu7[which(score_28$score < 7)]<-0
score_28$mu8<-1;score_28$mu8[which(score_28$score < 8)]<-0
score_28$mu9<-1;score_28$mu9[which(score_28$score < 9)]<-0
score_28$mu10<-1;score_28$mu10[which(score_28$score < 10)]<-0
score_28$mu11<-1;score_28$mu11[which(score_28$score < 11)]<-0
score_28$mu12<-1;score_28$mu12[which(score_28$score < 12)]<-0
score_28$mu13<-1;score_28$mu13[which(score_28$score < 13)]<-0
score_28$mu14<-1;score_28$mu14[which(score_28$score < 14)]<-0
score_28$mu15<-1;score_28$mu15[which(score_28$score < 15)]<-0
score_28$mu16<-1;score_28$mu16[which(score_28$score < 16)]<-0
score_28$mu17<-1;score_28$mu17[which(score_28$score < 17)]<-0
score_28$mu18<-1;score_28$mu18[which(score_28$score < 18)]<-0
score_28$mu19<-1;score_28$mu19[which(score_28$score < 19)]<-0
score_28$mu20<-1;score_28$mu20[which(score_28$score < 20)]<-0
score_28$mu21<-1;score_28$mu21[which(score_28$score < 21)]<-0
score_28$mu22<-1;score_28$mu22[which(score_28$score < 22)]<-0
score_28$mu23<-1;score_28$mu23[which(score_28$score < 23)]<-0
score_28$mu24<-1;score_28$mu24[which(score_28$score < 24)]<-0
score_28$mu25<-1;score_28$mu25[which(score_28$score < 25)]<-0
score_28$mu26<-1;score_28$mu26[which(score_28$score < 26)]<-0
score_28$mu27<-1;score_28$mu27[which(score_28$score < 27)]<-0
score_28$mu28<-1;score_28$mu28[which(score_28$score < 28)]<-0


score_28$score1<-0
score_28$score1[which(score_28$score > 3 & score_28$score < 8)]<-4
score_28$score1[which(score_28$score > 7 & score_28$score < 12)]<-8
score_28$score1[which(score_28$score > 11 & score_28$score < 16)]<-12
score_28$score1[which(score_28$score > 15 & score_28$score < 20)]<-16
score_28$score1[which(score_28$score > 19 & score_28$score < 24)]<-20
score_28$score1[which(score_28$score > 24 & score_28$score < 29)]<-24



ggplot(score_28,aes(x = as.factor(transfer),y = score))+
  geom_violin(aes(fill = as.factor(transfer)),trim=FALSE,color="white")+#color小提琴轮廓线颜色
  #geom_boxplot(width = 0.5,outlier.colour = NA)+
  stat_compare_means(comparisons = list(c("0", "1"))) +
  scale_fill_manual(values = c( "#92bba1","#de9952" ))+
  stat_summary(fun="mean",geom="point",shape=23,size=2,fill="white")+#均值标记
  theme(axis.text.x = element_text(size = 10),    ###主题
        axis.text.y = element_text(size = 10),
        #legend.position = "top",
        #legend.background = element_rect(fill="transparent", size=.5),
        axis.line = element_line(size = 0.5, colour = "black"),
        axis.title = element_blank(),
        strip.background = element_blank(),
        strip.text = element_blank(),
        panel.background = element_blank(),
        panel.border = element_blank(),
        panel.grid = element_blank())



ao<-intersect(row.names(score_28),row.names(time))
time_28<-time[ao,];score_28<-score_28[ao,]
score_28<-cbind(score_28,time_28[,1:2])

for(i in colnames(score_28)[5:32]){
  pdf(file = paste0("28genes_",i,".pdf"))
  fit1 <- survfit(Surv(days_to_death, vital_status) ~ get(i),data = score_28)
  print(ggsurvplot(fit1,risk.table=F,
                   palette = c("#9abeaf","#f1939c"),
                   pval=TRUE,ggtheme = theme_bw(),
                   ylab="Survival probabilities",legend=c(0.8,0.9),
                   legend.title="",
                   pval.method=TRUE))
  dev.off() 
}

score_28_<-score_28[which(score_28$score < 5),]
fit1 <- survfit(Surv(days_to_death, vital_status) ~ score,data = score_28_)
ggsurvplot(fit1,risk.table=F,
                 palette = c("#97a487","#9c9d99","#d8b75a","#f1939c","#db8c44"),
                 pval=TRUE,ggtheme = theme_bw(),
                 ylab="Survival probabilities",legend=c(0.8,0.9),
                 legend.title="",
                 pval.method=TRUE)



ggplot(score_28,aes(x=as.factor(score),fill = as.factor(transfer))) + 
  geom_bar(na.rm = T,position = "fill") +
  scale_fill_manual(values = c("#d1c2d3","#806d9e")) +
  #coord_flip()+
  theme(axis.text.x = element_text(size = 10),    ###主题
        axis.text.y = element_text(size = 10),
        #legend.position = "top",
        #legend.background = element_rect(fill="transparent", size=.5),
        axis.line = element_line(size = 0.5, colour = "black"),
        axis.title = element_blank(),
        strip.background = element_blank(),
        strip.text = element_blank(),
        panel.background = element_blank(),
        panel.border = element_blank(),
        panel.grid = element_blank())




library(clusterProfiler)
library(org.Hs.eg.db)
library(ggplot2)
ego <- enrichGO(gene=genes_28,OrgDb = org.Hs.eg.db,keyType = "SYMBOL",ont = "BP",pvalueCutoff=0.05)
#ego <- simplify(ego,cutoff=0.05,by="p.adjust",select_fun=min)  ##去冗余
head(ego@result)
geo_plot<-cbind(as.data.frame(ego@result[2]),as.data.frame(ego@result[5]))
geo_plot<-cbind(geo_plot,as.data.frame(ego@result[3]))
geo_plot<-cbind(geo_plot,as.data.frame(ego@result[9]))
geo_plot<-geo_plot[1:30,]
ggplot(geo_plot,aes(GeneRatio,reorder(Description,Count))) +
  geom_point(aes(size=Count,color=pvalue)) +
  scale_size_continuous(range = c(6,10)) +
  scale_color_gradient(low="#681752",high = "#c08eaf") +
  theme(axis.text.x = element_text(size = 10),    ###主题
        axis.text.y = element_text(size = 10),
        #legend.position = "top",
        #legend.background = element_rect(fill="transparent", size=.5),
        axis.line = element_line(size = 0.5, colour = "black"),
        axis.title = element_blank(),
        strip.background = element_blank(),
        strip.text = element_blank(),
        panel.background = element_blank(),
        panel.border = element_blank(),
        panel.grid = element_blank())


#enrichplot#
library(DOSE)
library(enrichplot)
library(dplyr)
library(clusterProfiler)



emapplot(
  pairwise_termsim(ego),
  showCategory = 25,
  color = "p.adjust",
  layout = "nicely",
  node_scale = NULL,
  line_scale = NULL,
  min_edge = 0.2,
  node_label_size = NULL,
  cex_label_category = 1,
  cex_category = NULL,
  cex_line = 0.5
)


#kegg#
id <- bitr(genes_28, fromType="SYMBOL", toType=c( "ENTREZID"), OrgDb="org.Hs.eg.db")
id<-id$ENTREZID


ekk <- enrichKEGG(gene= id,organism  = 'hsa', qvalueCutoff = 0.05)
ekk@result

emapplot(
  pairwise_termsim(ekk),
  showCategory = 25,
  color = "p.adjust",
  layout = "nicely",
  node_scale = NULL,
  line_scale = NULL,
  min_edge = 0.2,
  node_label_size = NULL,
  cex_label_category = 1,
  cex_category = NULL,
  cex_line = 0.5
)




#IGHA1#
mutation1<-t(mutation1);mutation3<-t(mutation3)
mutation1<-as.data.frame(mutation1[,"IGHA1"]);mutation3<-as.data.frame(mutation3[,"IGHA1"])
mutation1$transfer<-0;colnames(mutation1)[1]<-"mu"
mutation3$transfer<-1;colnames(mutation3)[1]<-"mu"
score_1<-rbind(mutation1,mutation3)


ao<-intersect(row.names(score_1),row.names(time))
time_1<-time[ao,];score_1<-score_1[ao,]
score_1<-cbind(score_1,time_1[,1:2])
fit1 <- survfit(Surv(days_to_death, vital_status) ~ mu,data = score_1)
ggsurvplot(fit1,risk.table=F,
           palette = c("#9abeaf","#f1939c"),
           pval=TRUE,ggtheme = theme_bw(),
           ylab="Survival probabilities",legend=c(0.8,0.9),
           legend.title="",
           pval.method=TRUE)


ggplot(score_1,aes(x=as.factor(mu),fill = as.factor(transfer))) + 
  geom_bar(na.rm = T,position = "fill") +
  scale_fill_manual(values = c("#d1c2d3","#806d9e")) +
  #coord_flip()+
  theme(axis.text.x = element_text(size = 10),    ###主题
        axis.text.y = element_text(size = 10),
        #legend.position = "top",
        #legend.background = element_rect(fill="transparent", size=.5),
        axis.line = element_line(size = 0.5, colour = "black"),
        axis.title = element_blank(),
        strip.background = element_blank(),
        strip.text = element_blank(),
        panel.background = element_blank(),
        panel.border = element_blank(),
        panel.grid = element_blank())








#4genes#
mutation1<-t(mutation1);mutation3<-t(mutation3)
genes_4<-c("FAT3","NRXN1","DCHS2","PCDH15")
mutation1<-mutation1[,genes_4];mutation3<-mutation3[,genes_4]
m1<-apply(mutation1,1,sum);m3<-apply(mutation3,1,sum)
m1<-as.data.frame(m1);m1$transfer<-0;colnames(m1)[1]<-"score"
m3<-as.data.frame(m3);m3$transfer<-1;colnames(m3)[1]<-"score"
score_4<-rbind(m1,m3)
score_4$mu<-1;score_4$mu[which(score_4$score == 0)]<-0

ggplot(score_4,aes(x = as.factor(transfer),y = score))+
  geom_violin(aes(fill = as.factor(transfer)),trim=FALSE,color="white")+#color小提琴轮廓线颜色
  #geom_boxplot(width = 0.5,outlier.colour = NA)+
  stat_compare_means(comparisons = list(c("0", "1"))) +
  scale_fill_manual(values = c( "#d1c2d3","#806d9e" ))+
  stat_summary(fun="mean",geom="point",shape=23,size=2,fill="white")+#均值标记
  theme(axis.text.x = element_text(size = 10),    ###主题
        axis.text.y = element_text(size = 10),
        #legend.position = "top",
        #legend.background = element_rect(fill="transparent", size=.5),
        axis.line = element_line(size = 0.5, colour = "black"),
        axis.title = element_blank(),
        strip.background = element_blank(),
        strip.text = element_blank(),
        panel.background = element_blank(),
        panel.border = element_blank(),
        panel.grid = element_blank())




ao<-intersect(row.names(score_4),row.names(time))
time_4<-time[ao,];score_4<-score_4[ao,]
score_4<-cbind(score_4,time_4[,1:2])
fit1 <- survfit(Surv(days_to_death, vital_status) ~ mu,data = score_4)
ggsurvplot(fit1,risk.table=F,
           palette = c("#9abeaf","#f1939c"),
           pval=TRUE,ggtheme = theme_bw(),
           ylab="Survival probabilities",legend=c(0.8,0.9),
           legend.title="",
           pval.method=TRUE)



ggplot(score_4,aes(x=as.factor(score),fill = as.factor(transfer))) + 
  geom_bar(na.rm = T,position = "fill") +
  scale_fill_manual(values = c("#d1c2d3","#806d9e")) +
  #coord_flip()+
  theme(axis.text.x = element_text(size = 10),    ###主题
        axis.text.y = element_text(size = 10),
        #legend.position = "top",
        #legend.background = element_rect(fill="transparent", size=.5),
        axis.line = element_line(size = 0.5, colour = "black"),
        axis.title = element_blank(),
        strip.background = element_blank(),
        strip.text = element_blank(),
        panel.background = element_blank(),
        panel.border = element_blank(),
        panel.grid = element_blank())




#5genes#
mutation1<-t(mutation1);mutation3<-t(mutation3)
genes_5<-c("HYDIN","DNAH8","SYNE2","DNAH11","DNAH3")
mutation1<-mutation1[,genes_5];mutation3<-mutation3[,genes_5]
m1<-apply(mutation1,1,sum);m3<-apply(mutation3,1,sum)
m1<-as.data.frame(m1);m1$transfer<-0;colnames(m1)[1]<-"score"
m3<-as.data.frame(m3);m3$transfer<-1;colnames(m3)[1]<-"score"
score_5<-rbind(m1,m3)
score_5$mu<-1;score_5$mu[which(score_5$score == 0)]<-0

ggplot(score_5,aes(x = as.factor(transfer),y = score))+
  geom_violin(aes(fill = as.factor(transfer)),trim=FALSE,color="white")+#color小提琴轮廓线颜色
  #geom_boxplot(width = 0.5,outlier.colour = NA)+
  stat_compare_means(comparisons = list(c("0", "1"))) +
  scale_fill_manual(values = c( "#d1c2d3","#806d9e" ))+
  stat_summary(fun="mean",geom="point",shape=23,size=2,fill="white")+#均值标记
  theme(axis.text.x = element_text(size = 10),    ###主题
        axis.text.y = element_text(size = 10),
        #legend.position = "top",
        #legend.background = element_rect(fill="transparent", size=.5),
        axis.line = element_line(size = 0.5, colour = "black"),
        axis.title = element_blank(),
        strip.background = element_blank(),
        strip.text = element_blank(),
        panel.background = element_blank(),
        panel.border = element_blank(),
        panel.grid = element_blank())




ao<-intersect(row.names(score_5),row.names(time))
time_5<-time[ao,];score_5<-score_5[ao,]
score_5<-cbind(score_5,time_5[,1:2])
fit1 <- survfit(Surv(days_to_death, vital_status) ~ mu,data = score_5)
ggsurvplot(fit1,risk.table=F,
           palette = c("#9abeaf","#f1939c"),
           pval=TRUE,ggtheme = theme_bw(),
           ylab="Survival probabilities",legend=c(0.8,0.9),
           legend.title="",
           pval.method=TRUE)


ggplot(score_5,aes(x=as.factor(score),fill = as.factor(transfer))) + 
  geom_bar(na.rm = T,position = "fill") +
  scale_fill_manual(values = c("#d1c2d3","#806d9e")) +
  #coord_flip()+
  theme(axis.text.x = element_text(size = 10),    ###主题
        axis.text.y = element_text(size = 10),
        #legend.position = "top",
        #legend.background = element_rect(fill="transparent", size=.5),
        axis.line = element_line(size = 0.5, colour = "black"),
        axis.title = element_blank(),
        strip.background = element_blank(),
        strip.text = element_blank(),
        panel.background = element_blank(),
        panel.border = element_blank(),
        panel.grid = element_blank())




#4+5 genes#
mutation1<-t(mutation1);mutation3<-t(mutation3)
genes_45<-c("FAT3","NRXN1","DCHS2","PCDH15","HYDIN","DNAH8","SYNE2","DNAH11","DNAH3")
mutation1<-mutation1[,genes_45];mutation3<-mutation3[,genes_45]
m1<-apply(mutation1,1,sum);m3<-apply(mutation3,1,sum)
m1<-as.data.frame(m1);m1$transfer<-0;colnames(m1)[1]<-"score"
m3<-as.data.frame(m3);m3$transfer<-1;colnames(m3)[1]<-"score"
score_45<-rbind(m1,m3)
score_45$mu<-1;score_45$mu[which(score_45$score == 0)]<-0


score_45$score1<-0
score_45$score1[which(score_45$score > 1 & score_45$score < 4)]<-2
score_45$score1[which(score_45$score > 3 & score_45$score < 6)]<-4
score_45$score1[which(score_45$score > 5 & score_45$score < 8)]<-6
score_45$score1[which(score_45$score > 7 & score_45$score < 10)]<-8

ggplot(score_45,aes(x = as.factor(transfer),y = score))+
  geom_violin(aes(fill = as.factor(transfer)),trim=FALSE,color="white")+#color小提琴轮廓线颜色
  #geom_boxplot(width = 0.5,outlier.colour = NA)+
  stat_compare_means(comparisons = list(c("0", "1"))) +
  scale_fill_manual(values = c( "#d1c2d3","#806d9e" ))+
  stat_summary(fun="mean",geom="point",shape=23,size=2,fill="white")+#均值标记
  theme(axis.text.x = element_text(size = 10),    ###主题
        axis.text.y = element_text(size = 10),
        #legend.position = "top",
        #legend.background = element_rect(fill="transparent", size=.5),
        axis.line = element_line(size = 0.5, colour = "black"),
        axis.title = element_blank(),
        strip.background = element_blank(),
        strip.text = element_blank(),
        panel.background = element_blank(),
        panel.border = element_blank(),
        panel.grid = element_blank())




ao<-intersect(row.names(score_45),row.names(time))
time_45<-time[ao,];score_45<-score_45[ao,]
score_45<-cbind(score_45,time_45[,1:2])
fit1 <- survfit(Surv(days_to_death, vital_status) ~ mu,data = score_45)
ggsurvplot(fit1,risk.table=F,
           palette = c("#9abeaf","#f1939c"),
           pval=TRUE,ggtheme = theme_bw(),
           ylab="Survival probabilities",legend=c(0.8,0.9),
           legend.title="",
           pval.method=TRUE)


ggplot(score_45,aes(x=as.factor(score1),fill = as.factor(transfer))) + 
  geom_bar(na.rm = T,position = "fill") +
  scale_fill_manual(values = c("#d1c2d3","#806d9e")) +
  #coord_flip()+
  theme(axis.text.x = element_text(size = 10),    ###主题
        axis.text.y = element_text(size = 10),
        #legend.position = "top",
        #legend.background = element_rect(fill="transparent", size=.5),
        axis.line = element_line(size = 0.5, colour = "black"),
        axis.title = element_blank(),
        strip.background = element_blank(),
        strip.text = element_blank(),
        panel.background = element_blank(),
        panel.border = element_blank(),
        panel.grid = element_blank())





#4+5+1 genes#
mutation1<-t(mutation1);mutation3<-t(mutation3)
genes_10<-c("FAT3","NRXN1","DCHS2","PCDH15","HYDIN","DNAH8","SYNE2","DNAH11","DNAH3","IGHA1")
mutation1<-mutation1[,genes_10];mutation3<-mutation3[,genes_10]
m1<-apply(mutation1,1,sum);m3<-apply(mutation3,1,sum)
m1<-as.data.frame(m1);m1$transfer<-0;colnames(m1)[1]<-"score"
m3<-as.data.frame(m3);m3$transfer<-1;colnames(m3)[1]<-"score"
score_10<-rbind(m1,m3)
score_10$mu<-1;score_10$mu[which(score_10$score == 0)]<-0


score_10$score1<-0
score_10$score1[which(score_10$score > 1 & score_10$score < 4)]<-2
score_10$score1[which(score_10$score > 3 & score_10$score < 6)]<-4
score_10$score1[which(score_10$score > 5 & score_10$score < 8)]<-6
score_10$score1[which(score_10$score > 7 & score_10$score < 11)]<-8

ggplot(score_10,aes(x = as.factor(transfer),y = score))+
  geom_violin(aes(fill = as.factor(transfer)),trim=FALSE,color="white")+#color小提琴轮廓线颜色
  #geom_boxplot(width = 0.5,outlier.colour = NA)+
  stat_compare_means(comparisons = list(c("0", "1"))) +
  scale_fill_manual(values = c( "#d1c2d3","#806d9e" ))+
  stat_summary(fun="mean",geom="point",shape=23,size=2,fill="white")+#均值标记
  theme(axis.text.x = element_text(size = 10),    ###主题
        axis.text.y = element_text(size = 10),
        #legend.position = "top",
        #legend.background = element_rect(fill="transparent", size=.5),
        axis.line = element_line(size = 0.5, colour = "black"),
        axis.title = element_blank(),
        strip.background = element_blank(),
        strip.text = element_blank(),
        panel.background = element_blank(),
        panel.border = element_blank(),
        panel.grid = element_blank())




ao<-intersect(row.names(score_10),row.names(time))
time_10<-time[ao,];score_10<-score_10[ao,]
score_10<-cbind(score_10,time_10[,1:2])
fit1 <- survfit(Surv(days_to_death, vital_status) ~ mu,data = score_10)
ggsurvplot(fit1,risk.table=F,
           palette = c("#9abeaf","#f1939c"),
           pval=TRUE,ggtheme = theme_bw(),
           ylab="Survival probabilities",legend=c(0.8,0.9),
           legend.title="",
           pval.method=TRUE)


ggplot(score_10,aes(x=as.factor(score1),fill = as.factor(transfer))) + 
  geom_bar(na.rm = T,position = "fill") +
  scale_fill_manual(values = c("#d1c2d3","#806d9e")) +
  #coord_flip()+
  theme(axis.text.x = element_text(size = 10),    ###主题
        axis.text.y = element_text(size = 10),
        #legend.position = "top",
        #legend.background = element_rect(fill="transparent", size=.5),
        axis.line = element_line(size = 0.5, colour = "black"),
        axis.title = element_blank(),
        strip.background = element_blank(),
        strip.text = element_blank(),
        panel.background = element_blank(),
        panel.border = element_blank(),
        panel.grid = element_blank())


id <- bitr(genes_10, fromType="SYMBOL", toType=c( "ENTREZID"), OrgDb="org.Hs.eg.db")
id<-id$ENTREZID


ekk <- enrichKEGG(gene= id,organism  = 'hsa', qvalueCutoff = 0.05)
ekk@result




#4+5+4 genes#
mutation1<-t(mutation1);mutation3<-t(mutation3)
genes_13<-c("FAT3","NRXN1","DCHS2","PCDH15","HYDIN","DNAH8","SYNE2","DNAH11","DNAH3","ADGRV1","USH2A","IGHA1")
mutation1<-mutation1[,genes_13];mutation3<-mutation3[,genes_13]
m1<-apply(mutation1,1,sum);m3<-apply(mutation3,1,sum)
m1<-as.data.frame(m1);m1$transfer<-0;colnames(m1)[1]<-"score"
m3<-as.data.frame(m3);m3$transfer<-1;colnames(m3)[1]<-"score"
score_13<-rbind(m1,m3)
score_13$mu<-1;score_13$mu[which(score_13$score == 0)]<-0


score_13$score1<-score_13$score
score_13$score1[which(score_13$score > 3)]<-4


ggplot(score_13,aes(x = as.factor(transfer),y = score))+
  geom_violin(aes(fill = as.factor(transfer)),trim=FALSE,color="white")+#color小提琴轮廓线颜色
  #geom_boxplot(width = 0.5,outlier.colour = NA)+
  stat_compare_means(comparisons = list(c("0", "1"))) +
  scale_fill_manual(values = c(  "#92bba1","#de9952" ))+
  stat_summary(fun="mean",geom="point",shape=23,size=2,fill="white")+#均值标记
  theme(axis.text.x = element_text(size = 10),    ###主题
        axis.text.y = element_text(size = 10),
        #legend.position = "top",
        #legend.background = element_rect(fill="transparent", size=.5),
        axis.line = element_line(size = 0.5, colour = "black"),
        axis.title = element_blank(),
        strip.background = element_blank(),
        strip.text = element_blank(),
        panel.background = element_blank(),
        panel.border = element_blank(),
        panel.grid = element_blank())




ao<-intersect(row.names(score_13),row.names(time))
time_13<-time[ao,];score_13<-score_13[ao,]
score_13<-cbind(score_13,time_13[,1:2])
fit1 <- survfit(Surv(days_to_death, vital_status) ~ mu,data = score_13)
ggsurvplot(fit1,risk.table=F,
           palette = c("#9abeaf","#f1939c"),
           pval=TRUE,ggtheme = theme_bw(),
           ylab="Survival probabilities",legend=c(0.8,0.9),
           legend.title="",
           pval.method=TRUE)


ggplot(score_13,aes(x=as.factor(score1),fill = as.factor(transfer))) + 
  geom_bar(na.rm = T,position = "fill") +
  scale_fill_manual(values = c("#92bba1","#de9952")) +
  #coord_flip()+
  theme(axis.text.x = element_text(size = 10),    ###主题
        axis.text.y = element_text(size = 10),
        #legend.position = "top",
        #legend.background = element_rect(fill="transparent", size=.5),
        axis.line = element_line(size = 0.5, colour = "black"),
        axis.title = element_blank(),
        strip.background = element_blank(),
        strip.text = element_blank(),
        panel.background = element_blank(),
        panel.border = element_blank(),
        panel.grid = element_blank())





#随机p#
fp_sam<-function(x1,x2){
  ao<-c()
  for(i in 1:nrow(x1)){
    a<-length(which(x1[i,] == "1"))
    b<-length(which(x1[i,] == "0"))
    c<-length(which(x2[i,] == "1"))
    d<-length(which(x2[i,] == "0"))
    data<-matrix(c(b,d,a,c),ncol = 2,nrow =2)
    ao[i]<-fisher.test(data)$p
  }
  ao   ##输出结果
}

pp<-data.frame(row.names = row.names(mutation1))
for(j in 1:100){
  mutation1_<-mutation1[,sample(1:2171,76)]
  pp_<-as.data.frame(fp_sam(mutation1_,mutation3))
  pp<-cbind(pp,pp_)
  mutation1_$mu<-apply(mutation1_,1,mean)
  write.csv(mutation1_,file = paste0("D://danni//1//结果图//突变//随机抽样//mutation1_",j,".csv"))
}
colnames(pp)<-c(1:100)
pp$p<-apply(pp,1,mean)
write.csv(pp,"P_100.csv")


###分类器(4+5+4genes)###
mutation1<-read.csv("D://danni//1//结果图//突变//数据//mutation1.csv",row.names = 1)
mutation3<-read.csv("D://danni//1//结果图//突变//数据//mutation3.csv",row.names = 1)
mutation1<-t(mutation1);mutation3<-t(mutation3)
genes_13<-c("FAT3","NRXN1","DCHS2","PCDH15","HYDIN","DNAH8","SYNE2","DNAH11","DNAH3","ADGRV1","USH2A","IGHA1")
mutation1<-as.data.frame(mutation1[,genes_13]);mutation3<-as.data.frame(mutation3[,genes_13])
mutation1$class<-0;mutation3$class<-1


#从这里循环#
library(class)
library(caret)
library(e1071)
library(pROC)
library(backports)

##k近邻##
mutation1_<-mutation1[sample(1:2171,76),]
ao<-sample(1:76,15);ao1<-sample(1:76,15)

train<-rbind(mutation1_[-ao,],mutation3[-ao1,])
test<-rbind(mutation1_[ao,],mutation3[ao1,])

ao<-c()
for (k in 1:10) {
  knnresult <- knn(train = train[,1:12],test = test[,1:12],cl=train$class,k = k)
  table(test$class,knnresult)
  #knn_roc <- multiclass.roc(test3$class,as.numeric(knnresult))
  knn_roc <- roc(test$class,as.numeric(knnresult))
  print(knn_roc)
  #print(sum(diag(table(test4$class,knnresult)))/sum(table(test4$class,knnresult)))
  ao[k]<-knn_roc$auc
}

max(ao)
#找到最合适k#
knnresult <- knn(train = train[,1:12],test = test[,1:12],cl=train$class,k = which(ao == max(ao)))
table(test$class,knnresult)
#knn_roc <- multiclass.roc(test3$class,as.numeric(knnresult))
knn_roc <- roc(test$class,as.numeric(knnresult))
knn_roc
plot(knn_roc, print.auc=TRUE, auc.polygon=TRUE, grid=c(0.1, 0.2),grid.col=c("green", "red"), max.auc.polygon=TRUE,auc.polygon.col="skyblue", print.thres=TRUE,main='k近邻ROC曲线')


#生存k近邻#
test$test<-knnresult
ao<-intersect(row.names(test),row.names(time))
test<-cbind(test[ao,],time[ao,1:2])


fit1 <- survfit(Surv(days_to_death, vital_status) ~ test,data = test)
ggsurvplot(fit1,risk.table=F,
           palette = c("#92bba1","#de9952"),
           pval=TRUE,ggtheme = theme_bw(),
           ylab="Survival probabilities",legend=c(0.8,0.9),
           legend.title="",
           pval.method=TRUE) 


##SVM支持向量机##
mutation1_<-mutation1[sample(1:2171,76),]
ao<-sample(1:76,15);ao1<-sample(1:76,15)

train<-rbind(mutation1_[-ao,],mutation3[-ao1,])
test<-rbind(mutation1_[ao,],mutation3[ao1,])

svmres <- svm(class~.,data = train, type = 'C',kernel = 'radial')
#测试集
pre_svm <- predict(svmres,newdata = test)
obs_p_svm <-data.frame(prob=pre_svm,obs=test$class)
###输出混淆矩阵
table(test$class,pre_svm,dnn=c("真实值","预测值"))
###绘制ROC曲线
#svm_roc <- multiclass.roc(transfer_s1_test$class,as.numeric(pre_svm))#
svm_roc <- roc(test$class,as.numeric(pre_svm))
svm_roc
plot(svm_roc, print.auc=TRUE, auc.polygon=TRUE, grid=c(0.1, 0.2),grid.col=c("green", "red"), max.auc.polygon=TRUE,auc.polygon.col="skyblue", print.thres=TRUE,main='SVM模型ROC曲线 kernel = radial')


#生存SVM#
test$test<-pre_svm
ao<-intersect(row.names(test),row.names(time))
test<-cbind(test[ao,],time[ao,1:2])


fit1 <- survfit(Surv(days_to_death, vital_status) ~ test,data = test)
ggsurvplot(fit1,risk.table=F,
           palette = c("#92bba1","#de9952"),
           pval=TRUE,ggtheme = theme_bw(),
           ylab="Survival probabilities",legend=c(0.8,0.9),
           legend.title="",
           pval.method=TRUE)  


#朴素贝叶斯##
mutation1_<-mutation1[sample(1:2171,76),]
ao<-sample(1:76,15);ao1<-sample(1:76,15)

train<-rbind(mutation1_[-ao,],mutation3[-ao1,])
test<-rbind(mutation1_[ao,],mutation3[ao1,])


nb.model <- naiveBayes(class~.,data = train)
#预测结果
nb_predict <- predict(nb.model,newdata = test)
#生成实际与预测交叉表和预测精度
nb.table <- table(actual=test$class,predict=nb_predict)
nb.table
nb_roc <- multiclass.roc(test$class,as.numeric(nb_predict))#
nb_roc <- roc(test$class,as.numeric(nb_predict))#
nb_roc 
nb_ratio <- sum(diag(nb.table))/sum(nb.table)
nb_ratio  #[1] 
plot(nb_roc, print.auc=TRUE, auc.polygon=TRUE, grid=c(0.1, 0.2),grid.col=c("green", "red"), max.auc.polygon=TRUE,auc.polygon.col="skyblue", print.thres=TRUE,main='朴素贝叶斯')




#生存贝叶斯#
test$test<-nb_predict
ao<-intersect(row.names(test),row.names(time))
test<-cbind(test[ao,],time[ao,1:2])


fit1 <- survfit(Surv(days_to_death, vital_status) ~ test,data = test)
ggsurvplot(fit1,risk.table=F,
           palette = c("#92bba1","#de9952"),
           pval=TRUE,ggtheme = theme_bw(),
           ylab="Survival probabilities",legend=c(0.8,0.9),
           legend.title="",
           pval.method=TRUE) 


#突变负荷#
#服务器#
setwd("/pub6/siyu/hdn/mutation")
mutation <- read.table("/pub6/siyu/mutation/pancancer-1.txt",sep = "\t",header = T,row.names = 1)
for (mu in 2:10){
  mutation1 <- read.table(paste0("/pub6/siyu/mutation/pancancer-",mu,".txt"),sep = "\t",header = T,row.names = 1)
  mutation<-rbind(mutation,mutation1)
  print(mu)
}
colnames(mutation)<-gsub("\\.","-",colnames(mutation))
mutation<-as.data.frame(t(mutation))
#target<-read.table("target.txt",header = T,sep = "\t")     ##靶向治疗相关基因
#mutation<-mutation[,target$Gene]
mu_sep<-as.data.frame(apply(mutation,1,sum))

clinical<-read.table("clinical.txt",sep = "\t",header = T,row.names = 1)
clinical$category<-as.factor(clinical$category)

ao<-intersect(row.names(clinical),row.names(mu_sep))
mu_sep<-cbind(mu_sep[ao,],clinical[ao,c(4,7)])
write.csv(mu_sep,"mu_sep.csv")   ###write.csv(mu_sep,"mu_sep_target.csv")


#R#
mu_sep<-read.csv("mu_sep.csv",row.names = 1)
colnames(mu_sep)[1]<-"number"
mu_sep$class<-"primary tumor"
mu_sep$class[which(mu_sep$category == 2 | mu_sep$category == 5 |mu_sep$category == 8 |mu_sep$category == 11)]<-"recurrence"
mu_sep$class[which(mu_sep$category == 3 | mu_sep$category == 6 |mu_sep$category == 9 |mu_sep$category == 12)]<-"metastasis"

ggplot(mu_sep) +
  geom_boxplot(aes(x = factor(stage),y = number,color = as.factor(class)),outlier.colour = "white")+
  geom_violin(aes(x = factor(stage),y = number,fill = as.factor(class)),trim=FALSE,color="white")+#color小提琴轮廓线颜色
  scale_fill_manual(values = c("#f1939c","#9abeaf","#f8e0b0")) +
  scale_color_manual(values = c("#f1939c","#9abeaf","#f8e0b0")) +
  coord_cartesian(ylim = c(0,1000)) +
  theme(axis.text.x = element_text(size = 10),    ###主题
        axis.text.y = element_text(size = 10),
        #legend.position = "top",
        #legend.background = element_rect(fill="transparent", size=.5),
        axis.line = element_line(size = 0.5, colour = "black"),
        axis.title = element_blank(),
        strip.background = element_blank(),
        strip.text = element_blank(),
        panel.background = element_blank(),
        panel.border = element_blank(),
        panel.grid = element_blank())


ggplot(mu_sep,aes(x = factor(class),y = number,fill = as.factor(stage))) +
  geom_boxplot(outlier.colour = "white")+
  #geom_violin(aes(x = factor(class),y = number,fill = as.factor(stage)),trim=FALSE,color="white")+#color小提琴轮廓线颜色
  scale_fill_manual(values = c("#9abeaf","#8fb2c9","#f8e0b0","#f1939c")) +
  scale_color_manual(values = c("#9abeaf","#8fb2c9","#f8e0b0","#f1939c")) +
  stat_summary_bin(aes(x = factor(class),y = number,color = as.factor(stage)),fun="mean",geom="point",shape=0,size=2)+#均值标记
  coord_cartesian(ylim = c(0,10)) +
  theme(axis.text.x = element_text(size = 10),    ###主题
        axis.text.y = element_text(size = 10),
        #legend.position = "top",
        #legend.background = element_rect(fill="transparent", size=.5),
        axis.line = element_line(size = 0.5, colour = "black"),
        axis.title = element_blank(),
        strip.background = element_blank(),
        strip.text = element_blank(),
        panel.background = element_blank(),
        panel.border = element_blank(),
        panel.grid = element_blank())


ggplot(mu_sep) +
  geom_boxplot(aes(x = factor(class),y = number,fill = as.factor(class)),outlier.colour = "white")+
  #geom_violin(aes(x = factor(class),y = number,fill = as.factor(class)),trim=FALSE,color="white")+#color小提琴轮廓线颜色
  scale_fill_manual(values = c("#f1939c","#9abeaf","#f8e0b0")) +
  scale_color_manual(values = c("#f1939c","#9abeaf","#f8e0b0")) +
  coord_cartesian(ylim = c(0,1000)) +
  theme(axis.text.x = element_text(size = 10),    ###主题
        axis.text.y = element_text(size = 10),
        #legend.position = "top",
        #legend.background = element_rect(fill="transparent", size=.5),
        axis.line = element_line(size = 0.5, colour = "black"),
        axis.title = element_blank(),
        strip.background = element_blank(),
        strip.text = element_blank(),
        panel.background = element_blank(),
        panel.border = element_blank(),
        panel.grid = element_blank())

mu_sep_tr<-mu_sep#[which(mu_sep$class == "metastasis"),]
mu_sep_tr$stage1<-"Other stage"
mu_sep_tr$stage1[which(mu_sep_tr$stage == "Stage I")]<-"Stage I"
ggplot(mu_sep_tr) +
  geom_boxplot(aes(x = factor(stage1),y = number,fill = factor(class,levels = c("primary tumor","recurrence","metastasis"))),outlier.colour = "white")+
  #geom_violin(aes(x = factor(stage1),y = number,fill = as.factor(stage1)),trim=FALSE,color="white")+#color小提琴轮廓线颜色
  scale_fill_manual(values = c("#9abeaf","#f8e0b0","#f1939c")) +
  scale_color_manual(values = c("#9abeaf","#f8e0b0","#f1939c")) +
  stat_summary_bin(aes(x = factor(stage1),y = number,color = as.factor(class)),fun="mean",geom="point",shape=23,size=2)+#均值标记
  coord_cartesian(ylim = c(0,10)) +
  theme(axis.text.x = element_text(size = 10),    ###主题
        axis.text.y = element_text(size = 10),
        legend.position = "top",
        #legend.background = element_rect(fill="transparent", size=.5),
        axis.line = element_line(size = 0.5, colour = "black"),
        axis.title = element_blank(),
        strip.background = element_blank(),
        strip.text = element_blank(),
        panel.background = element_blank(),
        panel.border = element_blank(),
        panel.grid = element_blank())






#############################################################
rm(list = ls(all = T))
setwd("D://danni//1//结果图//cnv")
library(ggplot2)

####p值####
#服务器#
setwd("/pub6/siyu/hdn/cnv")
cnv <- data.frame()
for (i in 1:10) {
  cnv1 <- read.table(paste0("/pub6/siyu/cnv/pancancer-",i,".txt"), sep = "\t", row.names= 1, header = T, stringsAsFactors = F)
  cnv <- rbind(cnv,cnv1)
}
colnames(cnv)<-gsub("\\.","-",colnames(cnv))
genelocation <- read.table("/pub6/siyu/ucsc-mRNA-FPKM-UQ/gene_location.txt", sep = "\t", header = T, stringsAsFactors = F)##ENSG
cnv<-as.data.frame(t(cnv))


clinical<-read.table("clinical.txt",sep = "\t",header = T,row.names = 1)
clinical$category<-as.factor(clinical$category)

ao<-intersect(row.names(clinical),row.names(cnv))
cnv<-cbind(cnv[ao,],clinical[ao,c(4,7)])
colnames(cnv)[24777]<-"class"
cnv1<-cnv[which(cnv$class == 1 ),]
cnv2<-cnv[which(cnv$class == 2 ),]
cnv3<-cnv[which(cnv$class == 3 ),]
cnv4<-cnv[which(cnv$class == 4 ),]
cnv5<-cnv[which(cnv$class == 5 ),]
cnv6<-cnv[which(cnv$class == 6 ),]
cnv7<-cnv[which(cnv$class == 7 ),]
cnv8<-cnv[which(cnv$class == 8 ),]
cnv9<-cnv[which(cnv$class == 9 ),]
cnv10<-cnv[which(cnv$class == 10 ),]
cnv11<-cnv[which(cnv$class == 11 ),]
cnv12<-cnv[which(cnv$class == 12 ),]



###扩增###
fp<-function(x1,x2){
  ao<-c()
  for(i in 1:24776){
    a<-length(which(x1[,i] == "1" | x1[,i] == "2"))
    b<-length(which(x2[,i] == "1" | x2[,i] == "2"))
    c<-length(which(x1[,i] == "0" ))
    d<-length(which(x2[,i] == "0" ))
    data<-matrix(c(a,b,c,d),ncol = 2,nrow =2)
    ao[i]<-fisher.test(data)$p
    print(length(ao))
  }
  ao   ##输出结果
}

relapse_kz_s1<-fp(cnv1,cnv2)
relapse_kz_s2<-fp(cnv4,cnv5)
relapse_kz_s3<-fp(cnv7,cnv8)
relapse_kz_s45<-fp(cnv10,cnv11)
cnv_relapse_kz<-cbind(relapse_kz_s1,relapse_kz_s2,relapse_kz_s3,relapse_kz_s45)
row.names(cnv_relapse_kz)<-colnames(cnv1)[1:24776]
write.csv(cnv_relapse_kz,"cnv_relapse_kz.csv")

transfer_kz_s1<-fp(cnv1,cnv3)
transfer_kz_s2<-fp(cnv4,cnv6)
transfer_kz_s3<-fp(cnv7,cnv9)
transfer_kz_s45<-fp(cnv10,cnv12)
cnv_transfer_kz<-cbind(transfer_kz_s1,transfer_kz_s2,transfer_kz_s3,transfer_kz_s45)
row.names(cnv_transfer_kz)<-colnames(cnv1)[1:24776]
write.csv(cnv_transfer_kz,"cnv_transfer_kz.csv")


###删失###
fp_<-function(x1,x2){
  ao<-c()
  for(i in 1:24776){
    a<-length(which(x1[,i] == "-1" | x1[,i] == "-2"))
    b<-length(which(x2[,i] == "-1" | x2[,i] == "-2"))
    c<-length(which(x1[,i] == "0" ))
    d<-length(which(x2[,i] == "0" ))
    data<-matrix(c(a,b,c,d),ncol = 2,nrow =2)
    ao[i]<-fisher.test(data)$p
    print(length(ao))
  }
  ao   ##输出结果
}

relapse_ss_s1<-fp_(cnv1,cnv2)
relapse_ss_s2<-fp_(cnv4,cnv5)
relapse_ss_s3<-fp_(cnv7,cnv8)
relapse_ss_s45<-fp_(cnv10,cnv11)
cnv_relapse_ss<-cbind(relapse_ss_s1,relapse_ss_s2,relapse_ss_s3,relapse_ss_s45)
row.names(cnv_relapse_ss)<-colnames(cnv1)[1:24776]
write.csv(cnv_relapse_ss,"cnv_relapse_ss.csv")

transfer_ss_s1<-fp_(cnv1,cnv3)
transfer_ss_s2<-fp_(cnv4,cnv6)
transfer_ss_s3<-fp_(cnv7,cnv9)
transfer_ss_s45<-fp_(cnv10,cnv12)
cnv_transfer_ss<-cbind(transfer_ss_s1,transfer_ss_s2,transfer_ss_s3,transfer_ss_s45)
row.names(cnv_transfer_ss)<-colnames(cnv1)[1:24776]
write.csv(cnv_transfer_ss,"cnv_transfer_ss.csv")





#R#
relapse_kz<-read.csv("cnv_relapse_kz.csv",row.names = 1)
relapse_kz<-relapse_kz[which(relapse_kz$relapse_kz_s1 < 0.05 & relapse_kz$relapse_kz_s2 > 0.05 &
                               relapse_kz$relapse_kz_s3 > 0.05 & relapse_kz$relapse_kz_s45 > 0.05),]
relapse_ss<-read.csv("cnv_relapse_ss.csv",row.names = 1)
relapse_ss<-relapse_ss[which(relapse_ss$relapse_ss_s1 < 0.05 & relapse_ss$relapse_ss_s2 > 0.05 &
                               relapse_ss$relapse_ss_s3 > 0.05 & relapse_ss$relapse_ss_s45 > 0.05),]
transfer_kz<-read.csv("cnv_transfer_kz.csv",row.names = 1)
transfer_kz<-transfer_kz[which(transfer_kz$transfer_kz_s1 < 0.05 & transfer_kz$transfer_kz_s2 > 0.05 &
                                 transfer_kz$transfer_kz_s3 > 0.05 & transfer_kz$transfer_kz_s45 > 0.05),]
transfer_ss<-read.csv("cnv_transfer_ss.csv",row.names = 1)
transfer_ss<-transfer_ss[which(transfer_ss$transfer_ss_s1 < 0.05 & transfer_ss$transfer_ss_s2 > 0.05 &
                                 transfer_ss$transfer_ss_s3 > 0.05 & transfer_ss$transfer_ss_s45 > 0.05),]





####面积图####
#服务器#
setwd("/pub6/siyu/hdn/cnv")
cnv <- data.frame()
for (i in 1:10) {
  cnv1 <- read.table(paste0("/pub6/siyu/cnv/pancancer-",i,".txt"), sep = "\t", row.names= 1, header = T, stringsAsFactors = F)
  cnv <- rbind(cnv,cnv1)
}

clinical<-read.table("clinical.txt",sep = "\t",header = T)
clinical$category<-as.factor(clinical$category)
clinical$X<-gsub("-",".",clinical$X)


for(i in 1:12){
  cnv1 <- cnv[,na.omit(match(clinical$X[which(clinical$category==i)],colnames(cnv)))]
a<-dim(cnv1)[2]+1;b<-dim(cnv1)[2]+4
print(dim(cnv1))
cnv1$amp <- apply(cnv1[,1:dim(cnv1)[2]],1,function(x) length(which(x==2))/length(x))
cnv1$gain <- apply(cnv1[,1:dim(cnv1)[2]],1,function(x) length(which(x==1))/length(x))
cnv1$loss <- apply(cnv1[,1:dim(cnv1)[2]],1,function(x) length(which(x==-1))/length(x))
cnv1$del <- apply(cnv1[,1:dim(cnv1)[2]],1,function(x) length(which(x==-2))/length(x))
cnv1fre <- cnv1[,a:b]  ##dim(cnv1)[2]+1   dim(cnv1)[2]+4
write.table(cnv1fre, paste0("cnv-",i,"frequency.txt"), sep="\t",quote = F )

genelocation <- read.table("/pub6/wenjing/cnv/genelocation (1)", sep = "\t", header = F, stringsAsFactors = F)
location <- genelocation[,-c(5,6)]
convert <- read.table("/pub6/wenjing/cnv/mart_export.txt", sep = "\t", header = T, stringsAsFactors = F)
location$ensg <- convert[match(substr(location$V4,1,15),convert[,3]),1]

cnv1$gene <- gsub("\\|.*","",rownames(cnv1))
cnv1$ensg <- gsub(".*\\|","",rownames(cnv1))

cnv1$ensg[-which((nchar(cnv1$ensg)>15)==TRUE)] <- location[match(cnv1$ensg[-which((nchar(cnv1$ensg)>15)==TRUE)],location$V7),6]
cnv1$ensg <- substr(cnv1$ensg,1,15)
cnv1 <- na.omit(cnv1)
cnv1$enst <- location[match(cnv1$ensg,location$ensg),4]
cnv1$chr <- location[match(cnv1$ensg,location$ensg),1]
cnv1$start <- location[match(cnv1$ensg,location$ensg),2]
cnv1$end <- location[match(cnv1$ensg,location$ensg),3]
write.table(cnv1, paste0(i,"-cnvall.txt"), sep="\t",quote = F )
print(i)
}

#R#
for(i in 1:12){
  cnv1 <- read.table(paste0("D://danni//1//结果图//cnv//数据//",i,"-cnvall.txt"), sep = "\t", header = T,row.names = 1,stringsAsFactors = F)
cnv1$loss <- 0-cnv1$loss
cnv1$del <- 0-cnv1$del
cnv1$chr[which(cnv1$chr=="chrX")] <- "chr23"
cnv1$chr <- as.numeric(gsub("chr","",cnv1$chr))

cnv2 <- cnv1[order(cnv1$chr,cnv1$start),]#按chr从小到大，如果chr一样，则按start从小到大
cnv2$position <- 1:dim(cnv2)[1]

a <- as.data.frame(table(cnv2$chr))$Freq
b <- c()
for (j in 1:23) {
  b[j] <- sum(a[1:j])
}

ggplot() + 
  geom_area(data = cnv2,aes(x = position,y = amp+gain),color = "#DE9952",fill = "#DE9952")+
  geom_area(data = cnv2,aes(x = position,y = gain),color = "#D4CB71",fill = "#D4CB71")+
  geom_area(data = cnv2,aes(x = position,y = loss+del),color = "#61AC85",fill = "#61AC85")+
  geom_area(data = cnv2,aes(x = position,y = loss),color = "#C1DCC4",fill = "#C1DCC4")+
  geom_vline(xintercept = b,linetype ="dotted")+
  ylim(-1,1)+
  theme(axis.text.x = element_blank(),    ###主题
        axis.text.y = element_text(size = 13),
        axis.line = element_line(),
        axis.title = element_blank(),
        strip.background = element_blank(),
        strip.text = element_blank(),
        panel.background = element_blank(),
        panel.border = element_blank(),
        panel.grid = element_blank())
ggsave(paste0("cnv-",i,".pdf"),width = 5,height = 2)
print(i)
}









####cnv数量条形图####
setwd("/pub6/siyu/hdn/cnv")
cnv <- data.frame()
for (i in 1:10) {
  cnv1 <- read.table(paste0("/pub6/siyu/cnv/pancancer-",i,".txt"), sep = "\t", row.names= 1, header = T, stringsAsFactors = F)
  cnv <- rbind(cnv,cnv1)
}
colnames(cnv)<-gsub("\\.","-",colnames(cnv))
genelocation <- read.table("/pub6/siyu/ucsc-mRNA-FPKM-UQ/gene_location.txt", sep = "\t", header = T, stringsAsFactors = F)##ENSG
cnv<-as.data.frame(t(cnv))

clinical<-read.table("clinical.txt",sep = "\t",header = T,row.names = 1)
clinical$category<-as.factor(clinical$category)

ao<-intersect(row.names(clinical),row.names(cnv))
cnv<-cbind(cnv[ao,],clinical[ao,c(4,7)])
colnames(cnv)[c(24777,24778)]<-c("stage","class")

ao<-c()
for(i in i:7476){
  ao[i]<-length(which(cnv[i,1:24776] == 1 | cnv[i,1:24776] == 2))
  print(i)
}
kz<-as.data.frame(ao)
row.names(kz)<-row.names(cnv)
kz<-cbind(kz,cnv[,c(24777,24778)])
write.csv(kz,"kz_count.csv")

ao<-c()
for(i in 1:7476){
  ao[i]<-length(which(cnv[i,1:24776] == -1 | cnv[i,1:24776] == -2))
  print(i)
}
ss<-as.data.frame(ao)
row.names(ss)<-row.names(cnv)
ss<-cbind(ss,cnv[,c(24777,24778)])
write.csv(ss,"ss_count.csv")



#R#
library(ggplot2)
kz_count<-read.csv("kz_count.csv",row.names = 1)
kz_count$class[which(kz_count$class == 1 | kz_count$class == 4 | kz_count$class == 7 | kz_count$class == 10)]<-"primary"
kz_count$class[which(kz_count$class == 2 | kz_count$class == 5 | kz_count$class == 8 | kz_count$class == 11)]<-"recurrence"
kz_count$class[which(kz_count$class == 3 | kz_count$class == 6 | kz_count$class == 9 | kz_count$class == 12)]<-"metastasis"

kz_count$ao[which(kz_count$class == "primary")]<-kz_count$ao[which(kz_count$class == "primary")]/6316
kz_count$ao[which(kz_count$class == "recurrence")]<-kz_count$ao[which(kz_count$class == "recurrence")]/658
kz_count$ao[which(kz_count$class == "metastasis")]<-kz_count$ao[which(kz_count$class == "metastasis")]/457

ggplot(kz_count,aes(x = as.factor(stage),y = ao ,fill = factor(stage))) +
  geom_boxplot() +
  scale_fill_manual(values = c("#9abeaf","#8fb2c9","#f8e0b0","#f1939c")) +   #"#93b5cf","#eea08c","#e77c8e"
  #coord_cartesian(ylim = c(0,2.5)) +
  stat_summary(fun="mean",geom="point",shape=23,size=2,fill="white") +  #均值标记
  theme(axis.text.x = element_text(size = 10),    ###主题
        axis.text.y = element_text(size = 10),
        #legend.position = "top",
        #legend.background = element_rect(fill="transparent", size=.5),
        axis.line = element_line(size = 0.5, colour = "black"),
        axis.title = element_blank(),
        strip.background = element_blank(),
        strip.text = element_blank(),
        panel.background = element_blank(),
        panel.border = element_blank(),
        panel.grid = element_blank())




ss_count<-read.csv("ss_count.csv",row.names = 1)
ss_count$class[which(ss_count$class == 1 | ss_count$class == 4 | ss_count$class == 7 | ss_count$class == 10)]<-"primary"
ss_count$class[which(ss_count$class == 2 | ss_count$class == 5 | ss_count$class == 8 | ss_count$class == 11)]<-"recurrence"
ss_count$class[which(ss_count$class == 3 | ss_count$class == 6 | ss_count$class == 9 | ss_count$class == 12)]<-"metastasis"

ss_count$ao[which(ss_count$class == "primary")]<-ss_count$ao[which(ss_count$class == "primary")]/6316
ss_count$ao[which(ss_count$class == "recurrence")]<-ss_count$ao[which(ss_count$class == "recurrence")]/658
ss_count$ao[which(ss_count$class == "metastasis")]<-ss_count$ao[which(ss_count$class == "metastasis")]/457

ggplot(ss_count,aes(x = as.factor(class),y = ao ,fill = factor(class))) +
  geom_boxplot() +
  scale_fill_manual(values = c("#93b5cf","#eea08c","#e77c8e")) +   #"#9abeaf","#8fb2c9","#f8e0b0","#f1939c"
  #coord_cartesian(ylim = c(0,2.5)) +
  stat_summary(fun="mean",geom="point",shape=23,size=2,fill="white") +  #均值标记
  theme(axis.text.x = element_text(size = 10),    ###主题
        axis.text.y = element_text(size = 10),
        #legend.position = "top",
        #legend.background = element_rect(fill="transparent", size=.5),
        axis.line = element_line(size = 0.5, colour = "black"),
        axis.title = element_blank(),
        strip.background = element_blank(),
        strip.text = element_blank(),
        panel.background = element_blank(),
        panel.border = element_blank(),
        panel.grid = element_blank())



####pearson相关系数####
#服务器#
#relapse kz#
setwd("/pub6/siyu/hdn/chayi")
relapse_exp<-read.csv("relapse_exp.csv",row.names = 1)
colnames(relapse_exp)<-gsub("\\.","-",colnames(relapse_exp))
relapse_exp<-as.data.frame(t(relapse_exp))

clinical<-read.table("clinical.txt",header = T,sep = "\t",row.names = 1)
clinical<-clinical[which(clinical$stage == "Stage I"),]
clinical<-clinical[which(clinical$class == "relapse" | clinical$class == "normal"),]

ao<-intersect(row.names(clinical),row.names(relapse_exp))
relapse_exp_s1<-relapse_exp[ao,]

setwd("/pub6/siyu/hdn/cnv")
cnv <- data.frame()
for (i in 1:10) {
  cnv1 <- read.table(paste0("/pub6/siyu/cnv/pancancer-",i,".txt"), sep = "\t", row.names= 1, header = T, stringsAsFactors = F)
  cnv <- rbind(cnv,cnv1)
}
colnames(cnv)<-gsub("\\.","-",colnames(cnv))
cnv<-as.data.frame(t(cnv))

ao<-intersect(row.names(clinical),row.names(cnv))
cnv_s1<-cnv[ao,]

library(AnnotationDbi)
library(org.Hs.eg.db)
colnames(relapse_exp_s1)<-mapIds(org.Hs.eg.db,keys=colnames(relapse_exp_s1),column="SYMBOL",keytype="ENSEMBL",multiVals="first")
relapse_exp_s1<-na.omit(relapse_exp_s1)

cnv_relapse_kz<-read.csv("cnv_relapse_kz.csv",row.names = 1)
cnv_relapse_kz<-cnv_relapse_kz[which(cnv_relapse_kz$relapse_kz_s1 < 0.05 & cnv_relapse_kz$relapse_kz_s2 > 0.05 &
                                       cnv_relapse_kz$relapse_kz_s3 > 0.05 & cnv_relapse_kz$relapse_kz_s45 > 0.05),]

ao<-intersect(row.names(cnv_relapse_kz),colnames(cnv_s1))
ao<-intersect(ao,colnames(relapse_exp_s1))
relapse_exp_s1<-relapse_exp_s1[,ao];cnv_s1<-cnv_s1[,ao]
ao<-intersect(row.names(relapse_exp_s1),row.names(cnv_s1))
relapse_exp_s1<-relapse_exp_s1[ao,];cnv_s1<-cnv_s1[ao,]


pearson<-function(x1,x2){
  p<-c()
  cor<-c()
  for(i in 1:ncol(x1)){
    p[i]<-as.numeric(cor.test(x1[,i],x2[,i])[3])
    cor[i]<-as.numeric(cor.test(x1[,i],x2[,i])[4])
  }
  ss<-cbind(p,cor)
  row.names(ss)<-colnames(x1)
  ss
}

kz_relapse<-pearson(relapse_exp_s1,cnv_s1)
write.csv(kz_relapse,"pearson_kz_relapse.csv")

#R#
pearson_kz_relapse<-read.csv("D://danni//1//结果图//cnv//pearson//pearson_kz_relapse.csv",row.names = 1)
relapse_exp<-read.csv("D://danni//1//结果图//cnv//pearson//relapse_.csv",row.names = 1)
relapse_exp$symbol<-mapIds(org.Hs.eg.db,keys=row.names(relapse_exp),column="SYMBOL",keytype="ENSEMBL",multiVals="first")
relapse_exp<-na.omit(relapse_exp)
pearson_kz_relapse<-pearson_kz_relapse[which(pearson_kz_relapse$p < 0.05),]
pearson_kz_relapse<-pearson_kz_relapse[which(pearson_kz_relapse$cor > 0.5 |pearson_kz_relapse$cor < -0.5),]

ao<-intersect(row.names(pearson_kz_relapse),relapse_exp$symbol)
relapse_exp<-relapse_exp[na.omit(match(relapse_exp[,9],ao)),]
row.names(relapse_exp)<-relapse_exp$symbol
relapse_exp<-as.data.frame(relapse_exp[,c(1,3,5,7)])
relapse_kz<-as.data.frame(relapse_kz[ao,])
relapse_kz<-relapse_kz-0.05


ninstall.packages("circlize")
library(circlize)
UpColor <- colorRamp2(breaks = c(min(relapse_kz), 0, max(relapse_kz)), colors = c("#AB221F","white","#3878C1"))
DnColor <- colorRamp2(breaks = c(min(relapse_exp),0, max(relapse_exp)), colors = c("#3878C1","white","#AB221F"))

## 使用up数据集来产生数据
library(ComplexHeatmap)
Heatmap(relapse_kz, column_title = "Copy number variation across cancer types", ## 列的标题 
        rect_gp = gpar(type = "none"), #绘制空的数据框 
        show_heatmap_legend = F, ##是否显示基本的注释说明 
        cluster_rows = T, cluster_columns = F ) ## 是否对行列进行聚类
DiagFunc <- function(up, down)
{function(j, i, x, y, width, height, fill)
{ grid.polygon(unit.c(x - 0.5*width, x - 0.5*width, x + 0.5*width), 
               unit.c(y - 0.5*height, y + 0.5*height, y + 0.5*height), 
               gp = gpar(fill = DnColor(down[i, j]), col = "grey")) 
  grid.polygon(unit.c(x + 0.5*width, x + 0.5*width, x - 0.5*width),
               unit.c(y + 0.5*height, y - 0.5*height, y - 0.5*height),
               gp = gpar(fill = UpColor(up[i, j]), col = "grey")) }}#绘制基本图形

Heatmap(relapse_exp,
        rect_gp = gpar(type = "none"), show_heatmap_legend = F, 
        cluster_rows = T, cluster_columns = F, ##绘制空的热图框 
        #left_annotation = row_an, ##添加左侧注释信息
        cell_fun = DiagFunc(up = relapse_kz, down = relapse_exp)  ) ## 绘制表格内的内容



#relapse ss#
clinical<-read.table("clinical.txt",header = T,sep = "\t",row.names = 1)
clinical<-clinical[which(clinical$stage == "Stage I"),]
clinical<-clinical[which(clinical$class == "relapse" | clinical$class == "normal"),]

ao<-intersect(row.names(clinical),row.names(relapse_exp))
relapse_exp_s1<-relapse_exp[ao,]

ao<-intersect(row.names(clinical),row.names(cnv))
cnv_s1<-cnv[ao,]

colnames(relapse_exp_s1)<-mapIds(org.Hs.eg.db,keys=colnames(relapse_exp_s1),column="SYMBOL",keytype="ENSEMBL",multiVals="first")
relapse_exp_s1<-na.omit(relapse_exp_s1)

cnv_relapse_ss<-read.csv("cnv_relapse_ss.csv",row.names = 1)
cnv_relapse_ss<-cnv_relapse_ss[which(cnv_relapse_ss$relapse_ss_s1 < 0.05 & cnv_relapse_ss$relapse_ss_s2 > 0.05 &
                                       cnv_relapse_ss$relapse_ss_s3 > 0.05 & cnv_relapse_ss$relapse_ss_s45 > 0.05),]

ao<-intersect(row.names(cnv_relapse_ss),colnames(cnv_s1))
ao<-intersect(ao,colnames(relapse_exp_s1))
relapse_exp_s1<-relapse_exp_s1[,ao];cnv_s1<-cnv_s1[,ao]
ao<-intersect(row.names(relapse_exp_s1),row.names(cnv_s1))
relapse_exp_s1<-relapse_exp_s1[ao,];cnv_s1<-cnv_s1[ao,]

ss_relapse<-pearson(relapse_exp_s1,cnv_s1)
write.csv(ss_relapse,"pearson_ss_relapse.csv")


#R#
pearson_ss_relapse<-read.csv("D://danni//1//结果图//cnv//pearson//pearson_ss_relapse.csv",row.names = 1)
relapse_exp<-read.csv("D://danni//1//结果图//cnv//pearson//relapse_.csv",row.names = 1)
relapse_exp$symbol<-mapIds(org.Hs.eg.db,keys=row.names(relapse_exp),column="SYMBOL",keytype="ENSEMBL",multiVals="first")
relapse_exp<-na.omit(relapse_exp)
pearson_ss_relapse<-pearson_ss_relapse[which(pearson_ss_relapse$p < 0.05),]
pearson_ss_relapse<-pearson_ss_relapse[which(pearson_ss_relapse$cor > 0.5 |pearson_ss_relapse$cor < -0.5),]

ao<-intersect(row.names(pearson_ss_relapse),relapse_exp$symbol)
relapse_exp<-relapse_exp[na.omit(match(relapse_exp[,9],ao)),]
row.names(relapse_exp)<-relapse_exp$symbol
relapse_exp<-as.data.frame(relapse_exp[,c(1,3,5,7)])
relapse_ss<-as.data.frame(relapse_ss[ao,])
relapse_ss<-relapse_ss-0.05


ninstall.packages("circlize")
library(circlize)
UpColor <- colorRamp2(breaks = c(min(relapse_ss), 0, max(relapse_ss)), colors = c("#AB221F","white","#3878C1"))
DnColor <- colorRamp2(breaks = c(min(relapse_exp),0, max(relapse_exp)), colors = c("#3878C1","white","#AB221F"))

## 使用up数据集来产生数据
library(ComplexHeatmap)
Heatmap(relapse_ss, column_title = "Copy number variation across cancer types", ## 列的标题 
        rect_gp = gpar(type = "none"), #绘制空的数据框 
        show_heatmap_legend = F, ##是否显示基本的注释说明 
        cluster_rows = T, cluster_columns = F ) ## 是否对行列进行聚类
DiagFunc <- function(up, down)
{function(j, i, x, y, width, height, fill)
{ grid.polygon(unit.c(x - 0.5*width, x - 0.5*width, x + 0.5*width), 
               unit.c(y - 0.5*height, y + 0.5*height, y + 0.5*height), 
               gp = gpar(fill = DnColor(down[i, j]), col = "grey")) 
  grid.polygon(unit.c(x + 0.5*width, x + 0.5*width, x - 0.5*width),
               unit.c(y + 0.5*height, y - 0.5*height, y - 0.5*height),
               gp = gpar(fill = UpColor(up[i, j]), col = "grey")) }}#绘制基本图形

Heatmap(relapse_exp,
        rect_gp = gpar(type = "none"), show_heatmap_legend = F, 
        cluster_rows = T, cluster_columns = F, ##绘制空的热图框 
        #left_annotation = row_an, ##添加左侧注释信息
        cell_fun = DiagFunc(up = relapse_ss, down = relapse_exp)  ) ## 绘制表格内的内容



#transfer kz#
setwd("/pub6/siyu/hdn/chayi")
transfer_exp<-read.csv("transfer_exp.csv",row.names = 1)
colnames(transfer_exp)<-gsub("\\.","-",colnames(transfer_exp))
transfer_exp<-as.data.frame(t(transfer_exp))

clinical<-read.table("clinical.txt",header = T,sep = "\t",row.names = 1)
clinical<-clinical[which(clinical$stage == "Stage I"),]
clinical<-clinical[which(clinical$class == "transfer" | clinical$class == "normal"),]

ao<-intersect(row.names(clinical),row.names(transfer_exp))
transfer_exp_s1<-transfer_exp[ao,]

setwd("/pub6/siyu/hdn/cnv")
ao<-intersect(row.names(clinical),row.names(cnv))
cnv_s1<-cnv[ao,]

library(AnnotationDbi)
library(org.Hs.eg.db)
colnames(transfer_exp_s1)<-mapIds(org.Hs.eg.db,keys=colnames(transfer_exp_s1),column="SYMBOL",keytype="ENSEMBL",multiVals="first")
transfer_exp_s1<-na.omit(transfer_exp_s1)

cnv_transfer_kz<-read.csv("cnv_transfer_kz.csv",row.names = 1)
cnv_transfer_kz<-cnv_transfer_kz[which(cnv_transfer_kz$transfer_kz_s1 < 0.05 & cnv_transfer_kz$transfer_kz_s2 > 0.05 &
                                         cnv_transfer_kz$transfer_kz_s3 > 0.05 & cnv_transfer_kz$transfer_kz_s45 > 0.05),]

ao<-intersect(row.names(cnv_transfer_kz),colnames(cnv_s1))
ao<-intersect(ao,colnames(transfer_exp_s1))
transfer_exp_s1<-transfer_exp_s1[,ao];cnv_s1<-cnv_s1[,ao]
ao<-intersect(row.names(transfer_exp_s1),row.names(cnv_s1))
transfer_exp_s1<-transfer_exp_s1[ao,];cnv_s1<-cnv_s1[ao,]


pearson<-function(x1,x2){
  p<-c()
  cor<-c()
  for(i in 1:ncol(x1)){
    p[i]<-as.numeric(cor.test(x1[,i],x2[,i])[3])
    cor[i]<-as.numeric(cor.test(x1[,i],x2[,i])[4])
  }
  ss<-cbind(p,cor)
  row.names(ss)<-colnames(x1)
  ss
}

kz_transfer<-pearson(transfer_exp_s1,cnv_s1)
write.csv(kz_transfer,"pearson_kz_transfer.csv")


#R#
pearson_kz_transfer<-read.csv("D://danni//1//结果图//cnv//pearson//pearson_kz_transfer.csv",row.names = 1)
transfer_exp<-read.csv("D://danni//1//结果图//cnv//pearson//transfer_.csv",row.names = 1)
transfer_exp$symbol<-mapIds(org.Hs.eg.db,keys=row.names(transfer_exp),column="SYMBOL",keytype="ENSEMBL",multiVals="first")
transfer_exp<-na.omit(transfer_exp)
pearson_kz_transfer<-pearson_kz_transfer[which(pearson_kz_transfer$p < 0.05),]
pearson_kz_transfer<-pearson_kz_transfer[which(pearson_kz_transfer$cor > 0.5 |pearson_kz_transfer$cor < -0.5),]

ao<-intersect(row.names(pearson_kz_transfer),transfer_exp$symbol)
transfer_exp<-transfer_exp[na.omit(match(transfer_exp[,9],ao)),]
row.names(transfer_exp)<-transfer_exp$symbol
transfer_exp<-as.data.frame(transfer_exp[,c(1,3,5,7)])
transfer_kz<-as.data.frame(transfer_kz[ao,])
transfer_kz<-transfer_kz-0.05


install.packages("circlize")
library(circlize)
UpColor <- colorRamp2(breaks = c(min(transfer_kz), 0, max(transfer_kz)), colors = c("#AB221F","white","#3878C1"))
DnColor <- colorRamp2(breaks = c(min(transfer_exp),0, max(transfer_exp)), colors = c("#3878C1","white","#AB221F"))

## 使用up数据集来产生数据
library(ComplexHeatmap)
Heatmap(transfer_kz, column_title = "Copy number variation acrokz cancer types", ## 列的标题 
        rect_gp = gpar(type = "none"), #绘制空的数据框 
        show_heatmap_legend = F, ##是否显示基本的注释说明 
        cluster_rows = T, cluster_columns = F ) ## 是否对行列进行聚类
DiagFunc <- function(up, down)
{function(j, i, x, y, width, height, fill)
{ grid.polygon(unit.c(x - 0.5*width, x - 0.5*width, x + 0.5*width), 
               unit.c(y - 0.5*height, y + 0.5*height, y + 0.5*height), 
               gp = gpar(fill = DnColor(down[i, j]), col = "grey")) 
  grid.polygon(unit.c(x + 0.5*width, x + 0.5*width, x - 0.5*width),
               unit.c(y + 0.5*height, y - 0.5*height, y - 0.5*height),
               gp = gpar(fill = UpColor(up[i, j]), col = "grey")) }}#绘制基本图形

Heatmap(transfer_exp,
        rect_gp = gpar(type = "none"), show_heatmap_legend = F, 
        cluster_rows = T, cluster_columns = F, ##绘制空的热图框 
        #left_annotation = row_an, ##添加左侧注释信息
        cell_fun = DiagFunc(up = transfer_kz, down = transfer_exp)  ) ## 绘制表格内的内容


#transfer ss#
clinical<-read.table("clinical.txt",header = T,sep = "\t",row.names = 1)
clinical<-clinical[which(clinical$stage == "Stage I"),]
clinical<-clinical[which(clinical$class == "transfer" | clinical$class == "normal"),]

ao<-intersect(row.names(clinical),row.names(transfer_exp))
transfer_exp_s1<-transfer_exp[ao,]

ao<-intersect(row.names(clinical),row.names(cnv))
cnv_s1<-cnv[ao,]

colnames(transfer_exp_s1)<-mapIds(org.Hs.eg.db,keys=colnames(transfer_exp_s1),column="SYMBOL",keytype="ENSEMBL",multiVals="first")
transfer_exp_s1<-na.omit(transfer_exp_s1)

cnv_transfer_ss<-read.csv("cnv_transfer_ss.csv",row.names = 1)
cnv_transfer_ss<-cnv_transfer_ss[which(cnv_transfer_ss$transfer_ss_s1 < 0.05 & cnv_transfer_ss$transfer_ss_s2 > 0.05 &
                                         cnv_transfer_ss$transfer_ss_s3 > 0.05 & cnv_transfer_ss$transfer_ss_s45 > 0.05),]

ao<-intersect(row.names(cnv_transfer_ss),colnames(cnv_s1))
ao<-intersect(ao,colnames(transfer_exp_s1))
transfer_exp_s1<-transfer_exp_s1[,ao];cnv_s1<-cnv_s1[,ao]
ao<-intersect(row.names(transfer_exp_s1),row.names(cnv_s1))
transfer_exp_s1<-transfer_exp_s1[ao,];cnv_s1<-cnv_s1[ao,]

ss_transfer<-pearson(transfer_exp_s1,cnv_s1)
write.csv(ss_transfer,"pearson_ss_transfer.csv")


#R#
pearson_ss_transfer<-read.csv("D://danni//1//结果图//cnv//pearson//pearson_ss_transfer.csv",row.names = 1)
transfer_exp<-read.csv("D://danni//1//结果图//cnv//pearson//transfer_.csv",row.names = 1)
transfer_exp$symbol<-mapIds(org.Hs.eg.db,keys=row.names(transfer_exp),column="SYMBOL",keytype="ENSEMBL",multiVals="first")
transfer_exp<-na.omit(transfer_exp)
pearson_ss_transfer<-pearson_ss_transfer[which(pearson_ss_transfer$p < 0.05),]
pearson_ss_transfer<-pearson_ss_transfer[which(pearson_ss_transfer$cor > 0.5 |pearson_ss_transfer$cor < -0.5),]

ao<-intersect(row.names(pearson_ss_transfer),transfer_exp$symbol)
transfer_exp<-transfer_exp[na.omit(match(transfer_exp[,9],ao)),]
row.names(transfer_exp)<-transfer_exp$symbol
transfer_exp<-as.data.frame(transfer_exp[,c(1,3,5,7)])
transfer_ss<-as.data.frame(transfer_ss[ao,])
transfer_ss<-transfer_ss-0.05


ninstall.packages("circlize")
library(circlize)
UpColor <- colorRamp2(breaks = c(min(transfer_ss), 0, max(transfer_ss)), colors = c("#AB221F","white","#3878C1"))
DnColor <- colorRamp2(breaks = c(min(transfer_exp),0, max(transfer_exp)), colors = c("#3878C1","white","#AB221F"))

## 使用up数据集来产生数据
library(ComplexHeatmap)
Heatmap(transfer_ss, column_title = "Copy number variation across cancer types", ## 列的标题 
        rect_gp = gpar(type = "none"), #绘制空的数据框 
        show_heatmap_legend = F, ##是否显示基本的注释说明 
        cluster_rows = T, cluster_columns = F ) ## 是否对行列进行聚类
DiagFunc <- function(up, down)
{function(j, i, x, y, width, height, fill)
{ grid.polygon(unit.c(x - 0.5*width, x - 0.5*width, x + 0.5*width), 
               unit.c(y - 0.5*height, y + 0.5*height, y + 0.5*height), 
               gp = gpar(fill = DnColor(down[i, j]), col = "grey")) 
  grid.polygon(unit.c(x + 0.5*width, x + 0.5*width, x - 0.5*width),
               unit.c(y + 0.5*height, y - 0.5*height, y - 0.5*height),
               gp = gpar(fill = UpColor(up[i, j]), col = "grey")) }}#绘制基本图形

Heatmap(transfer_exp,
        rect_gp = gpar(type = "none"), show_heatmap_legend = F, 
        cluster_rows = T, cluster_columns = F, ##绘制空的热图框 
        #left_annotation = row_an, ##添加左侧注释信息
        cell_fun = DiagFunc(up = transfer_ss, down = transfer_exp)  ) ## 绘制表格内的内容



####数量与表达值比较####
#relapse kz#
setwd("/pub6/siyu/hdn/chayi")
relapse_exp<-read.csv("relapse_exp.csv",row.names = 1)
colnames(relapse_exp)<-gsub("\\.","-",colnames(relapse_exp))
relapse_exp<-as.data.frame(t(relapse_exp))

clinical<-read.table("clinical.txt",header = T,sep = "\t",row.names = 1)
#clinical<-clinical[which(clinical$stage == "Stage I"),]
clinical<-clinical[which(clinical$class == "relapse"),]

ao<-intersect(row.names(clinical),row.names(relapse_exp))
relapse_exp_s1<-relapse_exp[ao,]

setwd("/pub6/siyu/hdn/cnv")
cnv <- data.frame()
for (i in 1:10) {
  cnv1 <- read.table(paste0("/pub6/siyu/cnv/pancancer-",i,".txt"), sep = "\t", row.names= 1, header = T, stringsAsFactors = F)
  cnv <- rbind(cnv,cnv1)
}
colnames(cnv)<-gsub("\\.","-",colnames(cnv))
cnv<-as.data.frame(t(cnv))

ao<-intersect(row.names(clinical),row.names(cnv))
cnv_s1<-cnv[ao,]

library(AnnotationDbi)
library(org.Hs.eg.db)
colnames(relapse_exp_s1)<-mapIds(org.Hs.eg.db,keys=colnames(relapse_exp_s1),column="SYMBOL",keytype="ENSEMBL",multiVals="first")
relapse_exp_s1<-na.omit(relapse_exp_s1)


ao<-intersect(colnames(cnv_s1),colnames(relapse_exp_s1))
relapse_exp_s1<-relapse_exp_s1[,ao];cnv_s1<-cnv_s1[,ao]
ao<-intersect(row.names(relapse_exp_s1),row.names(cnv_s1))
relapse_exp_s1<-relapse_exp_s1[ao,];cnv_s1<-cnv_s1[ao,]


count<-function(exp,cnv){
  exp_count<-matrix(ncol = 2,nrow = ncol(cnv))
  for(i in 1:ncol(cnv)){
    exp_count[i,1]<-median(exp[,i])
    exp_count[i,2]<-length(which(cnv[,i] == 1 | cnv[,i]== 2))
  }
  exp_count<-as.data.frame(exp_count)
  row.names(exp_count)<-colnames(cnv)
  colnames(exp_count)<-c("exp","cnv")
  exp_count
}


relapse<-count(relapse_exp_s1,cnv_s1)
write.csv(relapse,"relapse_expcount.csv")


#relapse ss#
clinical<-read.table("clinical.txt",header = T,sep = "\t",row.names = 1)
#clinical<-clinical[which(clinical$stage == "Stage I"),]
clinical<-clinical[which(clinical$class == "relapse"),]

ao<-intersect(row.names(clinical),row.names(relapse_exp))
relapse_exp_s1<-relapse_exp[ao,]

setwd("/pub6/siyu/hdn/cnv")
ao<-intersect(row.names(clinical),row.names(cnv))
cnv_s1<-cnv[ao,]

library(AnnotationDbi)
library(org.Hs.eg.db)
colnames(relapse_exp_s1)<-mapIds(org.Hs.eg.db,keys=colnames(relapse_exp_s1),column="SYMBOL",keytype="ENSEMBL",multiVals="first")
relapse_exp_s1<-na.omit(relapse_exp_s1)


ao<-intersect(colnames(cnv_s1),colnames(relapse_exp_s1))
relapse_exp_s1<-relapse_exp_s1[,ao];cnv_s1<-cnv_s1[,ao]
ao<-intersect(row.names(relapse_exp_s1),row.names(cnv_s1))
relapse_exp_s1<-relapse_exp_s1[ao,];cnv_s1<-cnv_s1[ao,]


count<-function(exp,cnv){
  exp_count<-matrix(ncol = 2,nrow = ncol(cnv))
  for(i in 1:ncol(cnv)){
    exp_count[i,1]<-mean(exp[,i])
    exp_count[i,2]<-length(which(cnv[,i] == -1 | cnv[,i]== -2))
  }
  exp_count<-as.data.frame(exp_count)
  row.names(exp_count)<-colnames(cnv)
  colnames(exp_count)<-c("exp","cnv")
  exp_count
}


relapse<-count(relapse_exp_s1,cnv_s1)
write.csv(relapse,"relapse_expcount_ss.csv")





#transfer kz#
setwd("/pub6/siyu/hdn/chayi")
transfer_exp<-read.csv("transfer_exp.csv",row.names = 1)
colnames(transfer_exp)<-gsub("\\.","-",colnames(transfer_exp))
transfer_exp<-as.data.frame(t(transfer_exp))

clinical<-read.table("clinical.txt",header = T,sep = "\t",row.names = 1)
clinical<-clinical[which(clinical$stage == "Stage I"),]
clinical<-clinical[which(clinical$class == "transfer"),]

ao<-intersect(row.names(clinical),row.names(transfer_exp))
transfer_exp_s1<-transfer_exp[ao,]

setwd("/pub6/siyu/hdn/cnv")

ao<-intersect(row.names(clinical),row.names(cnv))
cnv_s1<-cnv[ao,]

library(AnnotationDbi)
library(org.Hs.eg.db)
colnames(transfer_exp_s1)<-mapIds(org.Hs.eg.db,keys=colnames(transfer_exp_s1),column="SYMBOL",keytype="ENSEMBL",multiVals="first")
transfer_exp_s1<-na.omit(transfer_exp_s1)


ao<-intersect(colnames(cnv_s1),colnames(transfer_exp_s1))
transfer_exp_s1<-transfer_exp_s1[,ao];cnv_s1<-cnv_s1[,ao]
ao<-intersect(row.names(transfer_exp_s1),row.names(cnv_s1))
transfer_exp_s1<-transfer_exp_s1[ao,];cnv_s1<-cnv_s1[ao,]


count<-function(exp,cnv){
  exp_count<-matrix(ncol = 2,nrow = ncol(cnv))
  for(i in 1:ncol(cnv)){
    exp_count[i,1]<-mean(exp[which(cnv[,i] == 1 | cnv[,i]== 2),i])-mean(exp[which(cnv[,i] == 0),i])
    exp_count[i,2]<-length(which(cnv[,i] == 1 | cnv[,i]== 2))
  }
  exp_count<-as.data.frame(exp_count)
  row.names(exp_count)<-colnames(cnv)
  colnames(exp_count)<-c("exp","cnv")
  exp_count
}


transfer<-count(transfer_exp_s1,cnv_s1)
write.csv(transfer,"transfer_expcount.csv")

#R#
pp<-read.csv("transfer_expcount.csv",row.names = 1)
ao<-intersect(row.names(pp),row.names(cnv_transfer_kz))
pp<-pp[ao,]
ggplot(pp,aes(x = cnv, y  = exp)) + 
  geom_point(size = 1)+ #,shape = 19
  theme(axis.text.x = element_text(),    ###主题
        axis.text.y = element_text(),
        #legend.position = "top",
        #legend.background = element_rect(fill="transparent", size=.5),
        axis.line = element_blank(),
        axis.title = element_blank(),
        strip.background = element_blank(),
        strip.text = element_blank(),
        panel.background = element_blank(),
        panel.border = element_blank(),
        panel.grid = element_blank())



#transfer ss#
clinical<-read.table("clinical.txt",header = T,sep = "\t",row.names = 1)
#clinical<-clinical[which(clinical$stage == "Stage I"),]
clinical<-clinical[which(clinical$class == "transfer"),]

ao<-intersect(row.names(clinical),row.names(transfer_exp))
transfer_exp_s1<-transfer_exp[ao,]

setwd("/pub6/siyu/hdn/cnv")
ao<-intersect(row.names(clinical),row.names(cnv))
cnv_s1<-cnv[ao,]

library(AnnotationDbi)
library(org.Hs.eg.db)
colnames(transfer_exp_s1)<-mapIds(org.Hs.eg.db,keys=colnames(transfer_exp_s1),column="SYMBOL",keytype="ENSEMBL",multiVals="first")
transfer_exp_s1<-na.omit(transfer_exp_s1)


ao<-intersect(colnames(cnv_s1),colnames(transfer_exp_s1))
transfer_exp_s1<-transfer_exp_s1[,ao];cnv_s1<-cnv_s1[,ao]
ao<-intersect(row.names(transfer_exp_s1),row.names(cnv_s1))
transfer_exp_s1<-transfer_exp_s1[ao,];cnv_s1<-cnv_s1[ao,]


count<-function(exp,cnv){
  exp_count<-matrix(ncol = 2,nrow = ncol(cnv))
  for(i in 1:ncol(cnv)){
    exp_count[i,1]<-mean(exp[,i])
    exp_count[i,2]<-length(which(cnv[,i] == -1 | cnv[,i]== -2))
  }
  exp_count<-as.data.frame(exp_count)
  row.names(exp_count)<-colnames(cnv)
  colnames(exp_count)<-c("exp","cnv")
  exp_count
}


transfer<-count(transfer_exp_s1,cnv_s1)
write.csv(transfer,"transfer_expcount_ss.csv")




####双热图####
relapse_kz<-read.csv("cnv_relapse_kz.csv",row.names = 1)
relapse_kz<-relapse_kz[which(relapse_kz$relapse_kz_s1 < 0.05 & relapse_kz$relapse_kz_s2 > 0.05 &
                               relapse_kz$relapse_kz_s3 > 0.05 & relapse_kz$relapse_kz_s45 > 0.05),]
relapse_ss<-read.csv("cnv_relapse_ss.csv",row.names = 1)
relapse_ss<-relapse_ss[which(relapse_ss$relapse_ss_s1 < 0.05 & relapse_ss$relapse_ss_s2 > 0.05 &
                               relapse_ss$relapse_ss_s3 > 0.05 & relapse_ss$relapse_ss_s45 > 0.05),]
transfer_kz<-read.csv("cnv_transfer_kz.csv",row.names = 1)
transfer_kz<-transfer_kz[which(transfer_kz$transfer_kz_s1 < 0.05 & transfer_kz$transfer_kz_s2 > 0.05 &
                                 transfer_kz$transfer_kz_s3 > 0.05 & transfer_kz$transfer_kz_s45 > 0.05),]
transfer_ss<-read.csv("cnv_transfer_ss.csv",row.names = 1)
transfer_ss<-transfer_ss[which(transfer_ss$transfer_ss_s1 < 0.05 & transfer_ss$transfer_ss_s2 > 0.05 &
                                 transfer_ss$transfer_ss_s3 > 0.05 & transfer_ss$transfer_ss_s45 > 0.05),]

relapse_exp<-read.csv("relapse_.csv",row.names = 1)
transfer_exp<-read.csv("transfer_.csv",row.names = 1)

library(AnnotationDbi)
library(org.Hs.eg.db)
relapse_exp$symbol<-mapIds(org.Hs.eg.db,keys=row.names(relapse_exp),column="SYMBOL",keytype="ENSEMBL",multiVals="first")
transfer_exp$symbol<-mapIds(org.Hs.eg.db,keys=row.names(transfer_exp),column="SYMBOL",keytype="ENSEMBL",multiVals="first")

transfer_exp<-transfer_exp[which(transfer_exp$stage1.FC > 0 & transfer_exp$stage1.P < 0.05 & transfer_exp$stage2.FC < 0 & 
                                   transfer_exp$stage3.FC < 0 & transfer_exp$stage45.FC < 0),]

ao<-intersect(row.names(transfer_kz),transfer_exp$symbol)
transfer_kz<-transfer_kz[ao,]
transfer_exp<-transfer_exp[na.omit(match(row.names(transfer_kz),transfer_exp$symbol)),]
row.names(transfer_exp)<-transfer_exp$symbol
transfer_exp<-transfer_exp[,c(1,3,5,7)]


library(circlize)
UpColor <- colorRamp2(breaks = c(min(transfer_kz), 0.05, max(transfer_kz)), colors = c("#AB221F","white","#3878C1"))
DnColor <- colorRamp2(breaks = c(min(transfer_exp),0, max(transfer_exp)), colors = c("#3878C1","white","#AB221F"))

## 使用up数据集来产生数据
library(ComplexHeatmap)
Heatmap(transfer_kz, column_title = "Copy number variation across cancer types", ## 列的标题 
        rect_gp = gpar(type = "none"), #绘制空的数据框 
        show_heatmap_legend = F, ##是否显示基本的注释说明 
        cluster_rows = T, cluster_columns = F ) ## 是否对行列进行聚类
DiagFunc <- function(up, down)
{function(j, i, x, y, width, height, fill)
{ grid.polygon(unit.c(x - 0.5*width, x - 0.5*width, x + 0.5*width), 
               unit.c(y - 0.5*height, y + 0.5*height, y + 0.5*height), 
               gp = gpar(fill = DnColor(down[i, j]), col = "grey")) 
  grid.polygon(unit.c(x + 0.5*width, x + 0.5*width, x - 0.5*width),
               unit.c(y + 0.5*height, y - 0.5*height, y - 0.5*height),
               gp = gpar(fill = UpColor(up[i, j]), col = "grey")) }}#绘制基本图形

Heatmap(transfer_exp,
        rect_gp = gpar(type = "none"), show_heatmap_legend = F, 
        cluster_rows = T, cluster_columns = F, ##绘制空的热图框 
        #left_annotation = row_an, ##添加左侧注释信息
        cell_fun = DiagFunc(up = transfer_ss, down = transfer_exp)  ) ## 绘制表格内的内容



library(reshape2)
library(ggplot2)
library(stringr)
location<-read.table("genelocation.txt",header = T,sep = "\t")
location<-location[na.omit(match(row.names(transfer_exp),location$geneName)),]
row.names(location)<-location$geneName;location<-location[,c(1,2,3)]
location$ch<-1
for(i in 1:nrow(location)){
  location$ch<-substring(location$chrom,4,nchar(location$chrom[i]))
}
location$ch<-as.numeric(location$ch)
location<-location[order(location$ch),]
location<-location[,-4]
#transfer<-cbind(location,transfer_exp)
#transfer<-melt(transfer,c("chrom","chromStart","chromEnd"))

library(circlize)
f=colorRamp2(breaks = c(min(transfer_exp),0, max(transfer_exp)), colors = c("green","black","red"))
circos.par(gap.degree=5,start.degree=80)
circos.genomicInitialize(location)
circos.genomicTrackPlotRegion(transfer, stack = TRUE,
                              
                              panel.fun = function(chrom, value, ...) {
                                
                                circos.genomicRect(chrom, value, col = f(value[[1]]), border = NA, ...)
                                
                              },bg.border=NA)






transfer_exp1<-as.data.frame(cbind(transfer_exp,row.names(transfer_exp)))
level<-as.factor(row.names(location))
colnames(transfer_exp1)<-c("1","2","3","4","gene")
transfer_exp1<-melt(transfer_exp1,"gene")
transfer_exp1$variable<-as.numeric(transfer_exp1$variable)
ggplot(transfer_exp1,aes(x = factor(gene,levels = level) ,y = variable,fill = value)) +
  geom_tile() +
  scale_fill_gradient2(low = "#1772b4",mid = "white",high = "#f1939c") +
  ylim(-5,5) +
  coord_polar(theta = "x") +
  theme(#axis.text.x = element_blank(),    ###主题
        axis.text.y = element_text(size = 10),
        axis.line = element_line(),
        axis.title = element_blank(),
        strip.background = element_blank(),
        strip.text = element_blank(),
        panel.background = element_blank(),
        panel.border = element_blank(),
        panel.grid = element_blank())

transfer_kz1<-as.data.frame(cbind(transfer_kz,row.names(transfer_kz)))
level<-as.factor(row.names(location))
colnames(transfer_kz1)<-c("1","2","3","4","gene")
transfer_kz1<-melt(transfer_kz1,"gene")
transfer_kz1$variable<-as.numeric(transfer_kz1$variable)
transfer_kz1$value<-transfer_kz1$value-0.05
ggplot(transfer_kz1,aes(x = factor(gene,levels = level) ,y = variable,fill = value)) +
  geom_tile() +
  scale_fill_gradient2(low = "#ec2b24",mid = "white",high = "#93b5cf") +
  ylim(-5,5) +
  coord_polar(theta = "x") +
  theme(#axis.text.x = element_blank(),    ###主题
    axis.text.y = element_text(size = 10),
    axis.line = element_line(),
    axis.title = element_blank(),
    strip.background = element_blank(),
    strip.text = element_blank(),
    panel.background = element_blank(),
    panel.border = element_blank(),
    panel.grid = element_blank())




  



####富集####
genes<-row.names(transfer_exp)


library(clusterProfiler)
library(org.Hs.eg.db)
ego <- enrichGO(gene=genes,OrgDb = org.Hs.eg.db,keyType = "SYMBOL",ont = "BP",pvalueCutoff=0.05)
head(ego@result)

geo_plot<-cbind(as.data.frame(ego@result[2]),as.data.frame(ego@result[5]))
geo_plot<-cbind(geo_plot,as.data.frame(ego@result[3]))
geo_plot<-cbind(geo_plot,as.data.frame(ego@result[9]))
geo_plot<-geo_plot[1:20,]
ggplot(geo_plot,aes(GeneRatio,reorder(Description,Count))) +
  geom_point(aes(size=Count,color=pvalue)) +
  scale_size_continuous(range = c(6,10)) +
  scale_color_gradient(low = "#61649f",high = "#e3b4b8") +
  theme(axis.text.x = element_text(size = 10),    ###主题
        axis.text.y = element_text(size = 10),
        #legend.position = "top",
        #legend.background = element_rect(fill="transparent", size=.5),
        axis.line = element_line(size = 0.5, colour = "black"),
        axis.title = element_blank(),
        strip.background = element_blank(),
        strip.text = element_blank(),
        panel.background = element_blank(),
        panel.border = element_blank(),
        panel.grid = element_blank())


#KEGG#
gene_ENSE <- bitr(genes, fromType="SYMBOL", toType=c("ENSEMBL", "ENTREZID"), OrgDb="org.Hs.eg.db")
ENSEMBL<-gene_ENSE$ENSEMBL  ##输入ENSG编号
EG2Ensembl=toTable(org.Hs.egENSEMBL)
geneLists=data.frame(ensembl_id=ENSEMBL)
results=merge(geneLists,EG2Ensembl,by='ensembl_id',all.x=T)
id=na.omit(results$gene_id)



ekk <- enrichKEGG(gene= id,keyType = "kegg",organism  = 'human', qvalueCutoff = 0.05,pvalueCutoff = 0.05)
ekk@result
hh<-as.data.frame(ekk@result)
row.names(hh)<-1:nrow(hh)
hh$order<-factor(rev(as.integer(row.names(hh))),labels = rev(hh$Description))
hh<-hh[1:9,]
ggplot(hh,aes(y = order,x = Count)) +
  geom_point(aes(size=Count,color=pvalue)) +
  scale_size_continuous(range = c(6,10)) +
  scale_color_gradient(low = "#61649f",high = "#e3b4b8") +
  theme(axis.text.x = element_text(size = 10),    ###主题
        axis.text.y = element_text(size = 10),
        #legend.position = "top",
        #legend.background = element_rect(fill="transparent", size=.5),
        axis.line = element_line(size = 0.5, colour = "black"),
        axis.title = element_blank(),
        strip.background = element_blank(),
        strip.text = element_blank(),
        panel.background = element_blank(),
        panel.border = element_blank(),
        panel.grid = element_blank())




#enrichplot#
library(DOSE)
library(enrichplot)
library(dplyr)


emapplot(
  pairwise_termsim(ego),
  showCategory = 20,
  color = "p.adjust",
  layout = "nicely",
  node_scale = NULL,
  line_scale = NULL,
  min_edge = 0.2,
  node_label_size = NULL,
  cex_label_category = 1,
  cex_category = NULL,
  cex_line = 0.5
)





#################################################
rm(list = ls(all = T))
library(ggplot2)
library(ggsignif)
library(ggpubr)
library(survival)
library(survminer)
library(forestplot)
library(pheatmap)
setwd("D://danni//1//结果图//肿瘤微环境//")
cli<-read.table("D://danni//1//clinical.txt",header = T,sep = "\t",row.names = 1)

time<-read.table("time.txt",header = T,sep = "\t")
time<-time[-which(duplicated(substring(time$sampleID,1,12))),]
time$sampleID<-substring(time$sampleID,1,12)
time$sampleID<-gsub("\\.","-",time$sampleID)   ##\\转义##
row.names(time)<-time$sampleID;time<-time[,-1]
for(i in 1:10850){
  if(is.na(time$days_to_death[i])){
    time$days_to_death[i]<-time$days_to_last_followup[i]
  }}
for(i in 1:10850){
  if(is.na(time$days_to_new_tumor_event_after_initial_treatment[i])){
    time$days_to_new_tumor_event_after_initial_treatment[i]<-time$days_to_death[i]
  }}
ao<-intersect(row.names(cli),row.names(time))
cli_time<-cbind(cli[ao,],time[ao,3])
colnames(cli_time)[10]<-"time"

####epic####
epic<-read.table("epic.txt",header = T,sep = "\t",row.names = 1)
epic<-epic[-which(duplicated(substring(row.names(epic),1,12))),]
row.names(epic)<-substring(row.names(epic),1,12)
ao<-intersect(row.names(cli),row.names(epic))
cli_ao<-cli[ao,];epic<-epic[ao,]
#epic[,1:8]<-scale(epic[,1:8])
epic$class<-as.factor(cli_ao$category);epic$stage<-as.factor(cli_ao$stage)
epic_relapse<-epic[-which(epic$class == 3 | epic$class == 6 | epic$class == 9 | epic$class == 12),]
epic_transfer<-epic[-which(epic$class == 2 | epic$class == 5 | epic$class == 8 | epic$class == 11),]

for (i in 1:8) {
  ggplot(epic_relapse,aes(x = class,y = get(colnames(epic_relapse)[i]) ,group = class)) +
    geom_boxplot(fill = c("#93b5cf","#eea08c","#93b5cf","#eea08c","#93b5cf","#eea08c","#93b5cf","#eea08c")) +
    ggtitle(colnames(epic_relapse)[i]) + 
    coord_cartesian(ylim = boxplot.stats(epic_relapse[,i])$stats[c(1, 5)]*1.05) +
    stat_compare_means(comparisons = list(c("1","2"),c("4","5"),c("7","8"),c("10","11")),
                       label.y = c(boxplot.stats(epic_relapse[,i])$stats[3],
                                   boxplot.stats(epic_relapse[,i])$stats[3],
                                   boxplot.stats(epic_relapse[,i])$stats[3],
                                   boxplot.stats(epic_relapse[,i])$stats[3])) + 
    theme(axis.text.x = element_text(size = 10),    ###主题
          axis.text.y = element_text(size = 10),
          #legend.position = "top",
          #legend.background = element_rect(fill="transparent", size=.5),
          axis.line = element_line(size = 0.5, colour = "black"),
          axis.title = element_blank(),
          strip.background = element_blank(),
          strip.text = element_blank(),
          panel.background = element_blank(),
          panel.border = element_blank(),
          panel.grid = element_blank())
  ggsave(paste0("D://danni//1//结果图//肿瘤微环境//epic1//recurrence_",colnames(epic_relapse)[i],".png"))
}


for (i in 1:8) {
  ggplot(epic_transfer,aes(x = class,y = get(colnames(epic_transfer)[i]) ,fill = class)) +
    geom_boxplot(fill = c("#93b5cf","#e77c8e","#93b5cf","#e77c8e","#93b5cf","#e77c8e","#93b5cf","#e77c8e"))+
    ggtitle(colnames(epic_transfer)[i]) + 
    coord_cartesian(ylim = boxplot.stats(epic_transfer[,i])$stats[c(1, 5)]*1.05) +
    stat_compare_means(comparisons = list(c("1","3"),c("4","6"),c("7","9"),c("10","12")),
                       label.y = c(boxplot.stats(epic_transfer[,i])$stats[3],
                                  boxplot.stats(epic_transfer[,i])$stats[3],
                                  boxplot.stats(epic_transfer[,i])$stats[3],
                                  boxplot.stats(epic_transfer[,i])$stats[3])) + 
    stat_summary(fun="mean",geom="point",shape=23,size=2,fill="white") +  #均值标记
    theme(axis.text.x = element_text(size = 10),    ###主题
          axis.text.y = element_text(size = 10),
          #legend.position = "top",
          #legend.background = element_rect(fill="transparent", size=.5),
          axis.line = element_line(size = 0.5, colour = "black"),
          axis.title = element_blank(),
          strip.background = element_blank(),
          strip.text = element_blank(),
          panel.background = element_blank(),
          panel.border = element_blank(),
          panel.grid = element_blank())
  ggsave(paste0("D://danni//1//结果图//肿瘤微环境//epic1//metastasis_",colnames(epic_transfer)[i],".png"))
}



#cox#
ao<-intersect(row.names(cli_time),row.names(epic_relapse))
epic_relapse<-cbind(epic_relapse[ao,],cli_time[ao,c(10)])
colnames(epic_relapse)[11]<-"time"
epic_relapse_s1<-epic_relapse[which(epic_relapse$stage == "Stage I"),]
epic_relapse_s1$relapse<-0
epic_relapse_s1$relapse[which(epic_relapse_s1$class == "2")] <- 1
#epic_relapse_s1$relapse<-as.factor(epic_relapse_s1$relapse)
epic_relapse$relapse<-0
epic_relapse$relapse[which(epic_relapse$class == "2" |
                             epic_relapse$class == "5" |
                             epic_relapse$class == "8" |
                             epic_relapse$class == "11")]<-1


epic_relapse_cox1<-summary(coxph(Surv(time, relapse) ~ Bcells, data = epic_relapse_s1))$coefficients
epic_relapse_cox1<-cbind(epic_relapse_cox1,as.data.frame(summary(coxph(Surv(time, relapse) ~ Bcells, data = epic_relapse_s1))[8])[,c(3,4)])
for(i in colnames(epic_relapse_s1)[2:8]){
  epic_relapse_cox11<-summary(coxph(Surv(time, relapse) ~ get(i), data = epic_relapse_s1))$coefficients
  epic_relapse_cox11<-cbind(epic_relapse_cox11,as.data.frame(summary(coxph(Surv(time, relapse) ~ get(i), data = epic_relapse_s1))[8])[,c(3,4)])
  epic_relapse_cox1<-rbind(epic_relapse_cox1,epic_relapse_cox11)
}
colnames(epic_relapse_cox1)<-c("coef","HR","error","z","p","CIlow","CIhigh")
row.names(epic_relapse_cox1)<-colnames(epic_relapse)[1:8]

epic_relapse_cox1<-epic_relapse_cox1[,c(2,5,6,7)]
epic_relapse_cox1<-epic_relapse_cox1[which(epic_relapse_cox1$p < 0.05),]
epic_relapse_cox1$gene<-row.names(epic_relapse_cox1)
forestplot(epic_relapse_cox1, # 森林图文本部分
           mean = epic_relapse_cox1$HR, # 图形元素中HR部分
           lower = epic_relapse_cox1$CIlow,  # 图形元素中置信区间
           upper = epic_relapse_cox1$CIhigh,
           zero = 1, #显示y=0的垂直线
           xlog=FALSE, #x轴的坐标不取对数
           fn.ci_norm = fpDrawCircleCI, #误差条显示方式
           boxsize = 0.1, ##误差条中的圆心点大小
           col=fpColors(line = "#69a794", #误差条的线的颜色   "#dd8047","#a5ab81","#d8b25c","#968c8c"
                        box="#69a794"), #误差条的圆心点的颜色    
           lty.ci = 7,   # 误差条的线的线型
           lwd.ci = 3,   # 误差条的线的宽度
           ci.vertices.height = 0.10, # # 误差条末端的长度
           txt_gp = fpTxtGp(ticks = gpar(cex = 0.5), xlab = gpar(cex = 0.7), cex = 0.7), #文本大小设置
           lineheight = "auto")#线的高度 


ao<-intersect(row.names(cli_time),row.names(epic_transfer))
epic_transfer<-cbind(epic_transfer[ao,],cli_time[ao,c(10)])
colnames(epic_transfer)[11]<-"time"
epic_transfer_s1<-epic_transfer[which(epic_transfer$stage == "Stage I"),]
epic_transfer_s1$transfer<-0
epic_transfer_s1$transfer[which(epic_transfer_s1$class == "3")] <- 1
epic_transfer$transfer<-0
epic_transfer$transfer[which(epic_transfer$class == "3" |
                               epic_transfer$class == "6" |
                               epic_transfer$class == "9" |
                               epic_transfer$class == "12")]<-1


epic_transfer_cox1<-summary(coxph(Surv(time, transfer) ~ Bcells, data = epic_transfer_s1))$coefficients
epic_transfer_cox1<-cbind(epic_transfer_cox1,as.data.frame(summary(coxph(Surv(time, transfer) ~ Bcells, data = epic_transfer_s1))[8])[,c(3,4)])
for(i in colnames(epic_transfer_s1)[2:8]){
  epic_transfer_cox11<-summary(coxph(Surv(time, transfer) ~ get(i), data = epic_transfer_s1))$coefficients
  epic_transfer_cox11<-cbind(epic_transfer_cox11,as.data.frame(summary(coxph(Surv(time, transfer) ~ get(i), data = epic_transfer_s1))[8])[,c(3,4)])
  epic_transfer_cox1<-rbind(epic_transfer_cox1,epic_transfer_cox11)
}
colnames(epic_transfer_cox1)<-c("coef","HR","error","z","p","CIlow","CIhigh")
row.names(epic_transfer_cox1)<-colnames(epic_transfer)[1:8]

epic_transfer_cox1<-epic_transfer_cox1[,c(2,5,6,7)]
epic_transfer_cox1<-epic_transfer_cox1[which(epic_transfer_cox1$p < 0.05),]
epic_transfer_cox1$gene<-row.names(epic_transfer_cox1)
forestplot(epic_transfer_cox1, # 森林图文本部分
           mean = epic_transfer_cox1$HR, # 图形元素中HR部分
           lower = epic_transfer_cox1$CIlow,  # 图形元素中置信区间
           upper = epic_transfer_cox1$CIhigh,
           zero = 1, #显示y=0的垂直线
           xlog=FALSE, #x轴的坐标不取对数
           fn.ci_norm = fpDrawCircleCI, #误差条显示方式
           boxsize = 0.1, ##误差条中的圆心点大小
           col=fpColors(line = "#69a794", #误差条的线的颜色   "#dd8047","#a5ab81","#d8b25c","#968c8c"
                        box="#69a794"), #误差条的圆心点的颜色    
           lty.ci = 7,   # 误差条的线的线型
           lwd.ci = 3,   # 误差条的线的宽度
           ci.vertices.height = 0.10, # # 误差条末端的长度
           txt_gp = fpTxtGp(ticks = gpar(cex = 0.5), xlab = gpar(cex = 0.7), cex = 0.7), #文本大小设置
           lineheight = "auto")#线的高度  


epic_transfer_s1$cell<-"high"
epic_transfer_s1$cell[which(epic_transfer_s1$CD4_Tcells < mean(epic_transfer_s1$CD4_Tcells))]<-"low"
ggplot(epic_transfer_s1,aes(x=as.factor(transfer),fill = as.factor(cell))) + 
  geom_bar(na.rm = T,position = "fill") +
  scale_fill_manual(values = c("#d1c2d3","#806d9e")) +
  #coord_flip()+
  theme(axis.text.x = element_text(size = 10),    ###主题
        axis.text.y = element_text(size = 10),
        #legend.position = "top",
        #legend.background = element_rect(fill="transparent", size=.5),
        axis.line = element_line(size = 0.5, colour = "black"),
        axis.title = element_blank(),
        strip.background = element_blank(),
        strip.text = element_blank(),
        panel.background = element_blank(),
        panel.border = element_blank(),
        panel.grid = element_blank())


#抽取20%做检验集
epic_transfer_s1$class<-as.factor(as.numeric(epic_transfer_s1$class))
summary(epic_transfer_s1$class)

epic_transfer_s11<-epic_transfer_s1[c(sample(which(epic_transfer_s1$class == 1),77),which(epic_transfer_s1$class == 3)),]
ao1<-sample(which(epic_transfer_s11$class == 1),16)
ao2<-sample(which(epic_transfer_s11$class == 3),16)
epic_transfer_train<-epic_transfer_s11[-c(ao1,ao2),]
epic_transfer_train<-epic_transfer_train[,c(3,5,9)]
epic_transfer_test<-epic_transfer_s11[c(ao1,ao2),]
epic_transfer_test<-epic_transfer_test[,c(3,5,9)]




##k近邻##
library(class)
library(caret)
ao<-c()
for (k in 1:10) {
  knnresult <- knn(train = epic_transfer_train[,1:2],test = epic_transfer_test[,1:2],cl=epic_transfer_train$class,k = k)
  table(epic_transfer_test$class,knnresult)
  #knn_roc <- multiclass.roc(test3$class,as.numeric(knnresult))
  knn_roc <- roc(epic_transfer_test$class,as.numeric(knnresult))
  print(knn_roc)
  #print(sum(diag(table(test4$class,knnresult)))/sum(table(test4$class,knnresult)))
  ao[k]<-knn_roc$auc
}

max(ao)
#找到最合适k#
knnresult <- knn(train = epic_transfer_train[,1:2],test = epic_transfer_test[,1:2],cl=epic_transfer_train$class,k = which(ao == max(ao)))
table(epic_transfer_test$class,knnresult)
#knn_roc <- multiclass.roc(test3$class,as.numeric(knnresult))
knn_roc <- roc(epic_transfer_test$class,as.numeric(knnresult))
plot(knn_roc, print.auc=TRUE, auc.polygon=TRUE, grid=c(0.1, 0.2),grid.col=c("green", "red"), max.auc.polygon=TRUE,auc.polygon.col="skyblue", print.thres=TRUE,main='随机森林模型ROC曲线')

epic_transfer_test$test<-knnresult
ao<-intersect(row.names(epic_transfer_test),row.names(time_sur))
surv<-cbind(epic_transfer_test[ao,],time_sur[ao,c(1,2)])
fit1 <- survfit(Surv(days_to_death, vital_status) ~ test,data = surv)
ggsurvplot(fit1,risk.table=F,
           palette = c("#9abeaf","#f1939c"),
           pval=TRUE,ggtheme = theme_bw(),
           ylab="Survival probabilities",legend=c(0.8,0.9),
           legend.title="",
           pval.method=TRUE) 




####mcp####
mcp<-read.table("mcp.txt",header = T,sep = "\t",row.names = 1)
mcp<-mcp[-which(duplicated(substring(row.names(mcp),1,12))),]
row.names(mcp)<-substring(row.names(mcp),1,12)
ao<-intersect(row.names(cli),row.names(mcp))
cli_ao<-cli[ao,];mcp<-mcp[ao,]
mcp$class<-as.factor(cli_ao$category);mcp$stage<-as.factor(cli_ao$stage)
mcp_relapse<-mcp[-which(mcp$class == 3 | mcp$class == 6 | mcp$class == 9 | mcp$class == 12),]
mcp_transfer<-mcp[-which(mcp$class == 2 | mcp$class == 5 | mcp$class == 8 | mcp$class == 11),]

for (i in 1:10) {
  ggplot(mcp_relapse,aes(x = class,y = get(colnames(mcp_relapse)[i]) ,group = class)) +
    geom_boxplot(fill = c("#93b5cf","#eea08c","#93b5cf","#eea08c","#93b5cf","#eea08c","#93b5cf","#eea08c")) +
    ggtitle(colnames(mcp_relapse)[i]) + 
    coord_cartesian(ylim = boxplot.stats(mcp_relapse[,i])$stats[c(1, 5)]*1.05) +
    stat_compare_means(comparisons = list(c("1","2"),c("4","5"),c("7","8"),c("10","11")),
                       label.y = c(boxplot.stats(mcp_relapse[,i])$stats[5],
                                   boxplot.stats(mcp_relapse[,i])$stats[5],
                                   boxplot.stats(mcp_relapse[,i])$stats[5],
                                   boxplot.stats(mcp_relapse[,i])$stats[5])) + 
    theme(axis.text.x = element_text(size = 10),    ###主题
          axis.text.y = element_text(size = 10),
          #legend.position = "top",
          #legend.background = element_rect(fill="transparent", size=.5),
          axis.line = element_line(size = 0.5, colour = "black"),
          axis.title = element_blank(),
          strip.background = element_blank(),
          strip.text = element_blank(),
          panel.background = element_blank(),
          panel.border = element_blank(),
          panel.grid = element_blank())
  ggsave(paste0("D://danni//1//结果图//肿瘤微环境//mcp//recurrence_",colnames(mcp_relapse)[i],".png"))
}


for (i in 1:10) {
  ggplot(mcp_transfer,aes(x = class,y = get(colnames(mcp_transfer)[i]) ,fill = class)) +
    geom_boxplot(fill = c("#93b5cf","#e77c8e","#93b5cf","#e77c8e","#93b5cf","#e77c8e","#93b5cf","#e77c8e"))+
    ggtitle(colnames(mcp_transfer)[i]) +
    coord_cartesian(ylim = boxplot.stats(mcp_transfer[,i])$stats[c(1, 5)]*1.05) +
    stat_compare_means(comparisons = list(c("1","3"),c("4","6"),c("7","9"),c("10","12")),
                       label.y = c(boxplot.stats(mcp_transfer[,i])$stats[5],
                                   boxplot.stats(mcp_transfer[,i])$stats[5],
                                   boxplot.stats(mcp_transfer[,i])$stats[5],
                                   boxplot.stats(mcp_transfer[,i])$stats[5])) + 
    stat_summary(fun="mean",geom="point",shape=23,size=2,fill="white") +  #均值标记
    theme(axis.text.x = element_text(size = 10),    ###主题
          axis.text.y = element_text(size = 10),
          #legend.position = "top",
          #legend.background = element_rect(fill="transparent", size=.5),
          axis.line = element_line(size = 0.5, colour = "black"),
          axis.title = element_blank(),
          strip.background = element_blank(),
          strip.text = element_blank(),
          panel.background = element_blank(),
          panel.border = element_blank(),
          panel.grid = element_blank())
  ggsave(paste0("D://danni//1//结果图//肿瘤微环境//mcp//metastasis_",colnames(mcp_transfer)[i],".png"))
}



#cox#
ao<-intersect(row.names(cli_time),row.names(mcp_relapse))
mcp_relapse<-cbind(mcp_relapse[ao,],cli_time[ao,c(10)])
colnames(mcp_relapse)[13]<-"time"
mcp_relapse_s1<-mcp_relapse[which(mcp_relapse$stage == "Stage I"),]
mcp_relapse_s1$relapse<-0
mcp_relapse_s1$relapse[which(mcp_relapse_s1$class == "2")] <- 1
#mcp_relapse$relapse<-0
#mcp_relapse$relapse[which(mcp_relapse$class == "2" |
                           #  mcp_relapse$class == "5" |
                           # mcp_relapse$class == "8" |
                           # mcp_relapse$class == "11")]<-1


mcp_relapse_cox1<-summary(coxph(Surv(time, relapse) ~ T.cells, data = mcp_relapse_s1))$coefficients
mcp_relapse_cox1<-cbind(mcp_relapse_cox1,as.data.frame(summary(coxph(Surv(time, relapse) ~ T.cells, data = mcp_relapse_s1))[8])[,c(3,4)])
for(i in colnames(mcp_relapse_s1)[2:10]){
  mcp_relapse_cox11<-summary(coxph(Surv(time, relapse) ~ get(i), data = mcp_relapse_s1))$coefficients
  mcp_relapse_cox11<-cbind(mcp_relapse_cox11,as.data.frame(summary(coxph(Surv(time, relapse) ~ get(i), data = mcp_relapse_s1))[8])[,c(3,4)])
  mcp_relapse_cox1<-rbind(mcp_relapse_cox1,mcp_relapse_cox11)
}
colnames(mcp_relapse_cox1)<-c("coef","HR","error","z","p","CIlow","CIhigh")
row.names(mcp_relapse_cox1)<-colnames(mcp_relapse)[1:10]

mcp_relapse_cox1<-mcp_relapse_cox1[,c(2,5,6,7)]
mcp_relapse_cox1<-mcp_relapse_cox1[which(mcp_relapse_cox1$p < 0.05),]
mcp_relapse_cox1$gene<-row.names(mcp_relapse_cox1)
forestplot(mcp_relapse_cox1, # 森林图文本部分
           mean = mcp_relapse_cox1$HR, # 图形元素中HR部分
           lower = mcp_relapse_cox1$CIlow,  # 图形元素中置信区间
           upper = mcp_relapse_cox1$CIhigh,
           zero = 1, #显示y=0的垂直线
           xlog=FALSE, #x轴的坐标不取对数
           fn.ci_norm = fpDrawCircleCI, #误差条显示方式
           boxsize = 0.1, ##误差条中的圆心点大小
           col=fpColors(line = "#69a794", #误差条的线的颜色   "#dd8047","#a5ab81","#d8b25c","#968c8c"
                        box="#69a794"), #误差条的圆心点的颜色    
           lty.ci = 7,   # 误差条的线的线型
           lwd.ci = 3,   # 误差条的线的宽度
           ci.vertices.height = 0.10, # # 误差条末端的长度
           txt_gp = fpTxtGp(ticks = gpar(cex = 0.5), xlab = gpar(cex = 0.7), cex = 0.7), #文本大小设置
           lineheight = "auto")#线的高度

ao<-intersect(row.names(cli_time),row.names(mcp_transfer))
mcp_transfer<-cbind(mcp_transfer[ao,],cli_time[ao,c(10)])
colnames(mcp_transfer)[13]<-"time"
mcp_transfer_s1<-mcp_transfer[which(mcp_transfer$stage == "Stage I"),]
mcp_transfer_s1$transfer<-0
mcp_transfer_s1$transfer[which(mcp_transfer_s1$class == "3")] <- 1
mcp_transfer$transfer<-0
mcp_transfer$transfer[which(mcp_transfer$class == "3" |
                              mcp_transfer$class == "6" |
                              mcp_transfer$class == "9" |
                              mcp_transfer$class == "12")]<-1


mcp_transfer_cox1<-summary(coxph(Surv(time, transfer) ~ T.cells, data = mcp_transfer_s1))$coefficients
mcp_transfer_cox1<-cbind(mcp_transfer_cox1,as.data.frame(summary(coxph(Surv(time, transfer) ~ T.cells, data = mcp_transfer_s1))[8])[,c(3,4)])
for(i in colnames(mcp_transfer_s1)[2:10]){
  mcp_transfer_cox11<-summary(coxph(Surv(time, transfer) ~ get(i), data = mcp_transfer_s1))$coefficients
  mcp_transfer_cox11<-cbind(mcp_transfer_cox11,as.data.frame(summary(coxph(Surv(time, transfer) ~ get(i), data = mcp_transfer_s1))[8])[,c(3,4)])
  mcp_transfer_cox1<-rbind(mcp_transfer_cox1,mcp_transfer_cox11)
}
colnames(mcp_transfer_cox1)<-c("coef","HR","error","z","p","CIlow","CIhigh")
row.names(mcp_transfer_cox1)<-colnames(mcp_transfer)[1:10]

mcp_transfer_cox1<-mcp_transfer_cox1[,c(2,5,6,7)]
mcp_transfer_cox1<-mcp_transfer_cox1[which(mcp_transfer_cox1$p < 0.05),]
mcp_transfer_cox1$gene<-row.names(mcp_transfer_cox1)
forestplot(mcp_transfer_cox1, # 森林图文本部分
           mean = mcp_transfer_cox1$HR, # 图形元素中HR部分
           lower = mcp_transfer_cox1$CIlow,  # 图形元素中置信区间
           upper = mcp_transfer_cox1$CIhigh,
           zero = 1, #显示y=0的垂直线
           xlog=FALSE, #x轴的坐标不取对数
           fn.ci_norm = fpDrawCircleCI, #误差条显示方式
           boxsize = 0.1, ##误差条中的圆心点大小
           col=fpColors(line = "#69a794", #误差条的线的颜色   "#dd8047","#a5ab81","#d8b25c","#968c8c"
                        box="#69a794"), #误差条的圆心点的颜色    
           lty.ci = 7,   # 误差条的线的线型
           lwd.ci = 3,   # 误差条的线的宽度
           ci.vertices.height = 0.10, # # 误差条末端的长度
           txt_gp = fpTxtGp(ticks = gpar(cex = 0.5), xlab = gpar(cex = 0.7), cex = 0.7), #文本大小设置
           lineheight = "auto")#线的高度

mcp_transfer_s1$cell<-"high"
mcp_transfer_s1$cell[which(mcp_transfer_s1$T.cells < mean(mcp_transfer_s1$T.cells))]<-"low"  #B.lineage,Myeloid.dendritic.cells,Fibroblasts
ggplot(mcp_transfer_s1,aes(x=as.factor(transfer),fill = as.factor(cell))) + 
  geom_bar(na.rm = T,position = "fill") +
  scale_fill_manual(values = c("#d1c2d3","#806d9e")) +
  #coord_flip()+
  theme(axis.text.x = element_text(size = 10),    ###主题
        axis.text.y = element_text(size = 10),
        #legend.position = "top",
        #legend.background = element_rect(fill="transparent", size=.5),
        axis.line = element_line(size = 0.5, colour = "black"),
        axis.title = element_blank(),
        strip.background = element_blank(),
        strip.text = element_blank(),
        panel.background = element_blank(),
        panel.border = element_blank(),
        panel.grid = element_blank())



#抽取20%做检验集
mcp_transfer_s1$class<-as.factor(as.numeric(mcp_transfer_s1$class))
summary(mcp_transfer_s1$class)
library(class)
library(caret)
library(e1071)
library(pROC)
library(backports)


mcp_transfer_s11<-mcp_transfer_s1[c(sample(which(mcp_transfer_s1$class == 1),77),which(mcp_transfer_s1$class == 3)),]
ao1<-sample(which(mcp_transfer_s11$class == 1),16)
ao2<-sample(which(mcp_transfer_s11$class == 3),16)
mcp_transfer_train<-mcp_transfer_s11[-c(ao1,ao2),]
mcp_transfer_train<-mcp_transfer_train[,c(1,5,7,10,11)]
mcp_transfer_test<-mcp_transfer_s11[c(ao1,ao2),]
mcp_transfer_test<-mcp_transfer_test[,c(1,5,7,10,11)]




##k近邻##

ao<-c()
for (k in 1:10) {
  knnresult <- knn(train = mcp_transfer_train[,1:4],test = mcp_transfer_test[,1:4],cl=mcp_transfer_train$class,k = k)
  table(mcp_transfer_test$class,knnresult)
  #knn_roc <- multiclass.roc(test3$class,as.numeric(knnresult))
  knn_roc <- roc(mcp_transfer_test$class,as.numeric(knnresult))
  print(knn_roc)
  #print(sum(diag(table(test4$class,knnresult)))/sum(table(test4$class,knnresult)))
  ao[k]<-knn_roc$auc
}

max(ao)
#找到最合适k#
knnresult <- knn(train = mcp_transfer_train[,1:4],test = mcp_transfer_test[,1:4],cl=mcp_transfer_train$class,k = which(ao == max(ao)))
table(mcp_transfer_test$class,knnresult)
#knn_roc <- multiclass.roc(test3$class,as.numeric(knnresult))
knn_roc <- roc(mcp_transfer_test$class,as.numeric(knnresult))
plot(knn_roc, print.auc=TRUE, auc.polygon=TRUE, grid=c(0.1, 0.2),grid.col=c("green", "red"), max.auc.polygon=TRUE,auc.polygon.col="skyblue", print.thres=TRUE,main='随机森林模型ROC曲线')

mcp_transfer_test$test<-knnresult
ao<-intersect(row.names(mcp_transfer_test),row.names(time_sur))
surv<-cbind(mcp_transfer_test[ao,],time_sur[ao,c(1,2)])
fit1 <- survfit(Surv(days_to_death, vital_status) ~ test,data = surv)
ggsurvplot(fit1,risk.table=F,
           palette = c("#9abeaf","#f1939c"),
           pval=TRUE,ggtheme = theme_bw(),
           ylab="Survival probabilities",legend=c(0.8,0.9),
           legend.title="",
           pval.method=TRUE) 

##SVM支持向量机##
svmres <- svm(class~.,data = mcp_transfer_train, type = 'C',kernel = 'radial')
#测试集
pre_svm <- predict(svmres,newdata = mcp_transfer_test)
obs_p_svm <-data.frame(prob=pre_svm,obs=mcp_transfer_test$class)
###输出混淆矩阵
table(mcp_transfer_test$class,pre_svm,dnn=c("真实值","预测值"))
###绘制ROC曲线
#svm_roc <- multiclass.roc(mcp_transfer_test$class,as.numeric(pre_svm))#
svm_roc <- roc(mcp_transfer_test$class,as.numeric(pre_svm))#
plot(svm_roc, print.auc=TRUE, auc.polygon=TRUE, grid=c(0.1, 0.2),grid.col=c("green", "red"), max.auc.polygon=TRUE,auc.polygon.col="skyblue", print.thres=TRUE,main='SVM模型ROC曲线 kernel = radial')

#生存#
ao<-intersect(row.names(obs_p_svm),row.names(time_sur))
surv<-cbind(obs_p_svm[ao,],time_sur[ao,c(1,2)])
fit1 <- survfit(Surv(days_to_death, vital_status) ~ prob,data = surv)
ggsurvplot(fit1,risk.table=F,
           palette = c("#9abeaf","#f1939c"),
           pval=TRUE,ggtheme = theme_bw(),
           ylab="Survival probabilities",legend=c(0.8,0.9),
           legend.title="",
           pval.method=TRUE) 


#朴素贝叶斯##
nb.model <- naiveBayes(class~.,data = mcp_transfer_train)
#预测结果
nb_predict <- predict(nb.model,newdata = mcp_transfer_test)
#生成实际与预测交叉表和预测精度
nb.table <- table(actual=mcp_transfer_test$class,predict=nb_predict)
nb_roc <- multiclass.roc(mcp_transfer_test$class,as.numeric(nb_predict))#
nb_roc <- roc(mcp_transfer_test$class,as.numeric(nb_predict))#
nb_roc 
nb_ratio <- sum(diag(nb.table))/sum(nb.table)
nb_ratio  #[1] 
plot(nb_roc, print.auc=TRUE, auc.polygon=TRUE, grid=c(0.1, 0.2),grid.col=c("green", "red"), max.auc.polygon=TRUE,auc.polygon.col="skyblue", print.thres=TRUE,main='SVM模型ROC曲线 kernel = radial')


mcp_transfer_test$test<-nb_predict
ao<-intersect(row.names(mcp_transfer_test),row.names(time_sur))
surv<-cbind(mcp_transfer_test[ao,],time_sur[ao,c(1,2)])
fit1 <- survfit(Surv(days_to_death, vital_status) ~ test,data = surv)
ggsurvplot(fit1,risk.table=F,
           palette = c("#9abeaf","#f1939c"),
           pval=TRUE,ggtheme = theme_bw(),
           ylab="Survival probabilities",legend=c(0.8,0.9),
           legend.title="",
           pval.method=TRUE) 

####timer####
timer<-read.table("TIMER.txt",header = T,sep = "\t",row.names = 1)
timer<-timer[-which(duplicated(substring(row.names(timer),1,12))),]
row.names(timer)<-substring(row.names(timer),1,12)
ao<-intersect(row.names(cli),row.names(timer))
cli_ao<-cli[ao,];timer<-timer[ao,]
timer$class<-as.factor(cli_ao$category);timer$stage<-as.factor(cli_ao$stage)
timer[,1:6]<-scale(timer[,1:6])
timer_relapse<-timer[-which(timer$class == 3 | timer$class == 6 | timer$class == 9 | timer$class == 12),]
timer_transfer<-timer[-which(timer$class == 2 | timer$class == 5 | timer$class == 8 | timer$class == 11),]

for (i in 1:6) {
  ggplot(timer_relapse,aes(x = class,y = get(colnames(timer_relapse)[i]) ,group = class)) +
    geom_boxplot(fill = c("#93b5cf","#eea08c","#93b5cf","#eea08c","#93b5cf","#eea08c","#93b5cf","#eea08c")) +
    ggtitle(colnames(timer_relapse)[i]) + 
    coord_cartesian(ylim = boxplot.stats(timer_relapse[,i])$stats[c(1, 5)]*1.05) +
    stat_compare_means(comparisons = list(c("1","2"),c("4","5"),c("7","8"),c("10","11")),
                       label.y = c(boxplot.stats(timer_relapse[,i])$stats[3],
                                   boxplot.stats(timer_relapse[,i])$stats[3],
                                   boxplot.stats(timer_relapse[,i])$stats[3],
                                   boxplot.stats(timer_relapse[,i])$stats[3])) + 
    theme(axis.text.x = element_text(size = 10),    ###主题
          axis.text.y = element_text(size = 10),
          #legend.position = "top",
          #legend.background = element_rect(fill="transparent", size=.5),
          axis.line = element_line(size = 0.5, colour = "black"),
          axis.title = element_blank(),
          strip.background = element_blank(),
          strip.text = element_blank(),
          panel.background = element_blank(),
          panel.border = element_blank(),
          panel.grid = element_blank())
  ggsave(paste0("D://danni//1//结果图//肿瘤微环境//timer1//recurrence_",colnames(timer_relapse)[i],".png"))
}


for (i in 1:6) {
  ggplot(timer_transfer,aes(x = class,y = get(colnames(timer_transfer)[i]) ,fill = class)) +
    geom_boxplot(fill = c("#93b5cf","#e77c8e","#93b5cf","#e77c8e","#93b5cf","#e77c8e","#93b5cf","#e77c8e"))+
    ggtitle(colnames(timer_transfer)[i]) + 
    coord_cartesian(ylim = boxplot.stats(timer_transfer[,i])$stats[c(1, 5)]*1.05) +
    stat_compare_means(comparisons = list(c("1","3"),c("4","6"),c("7","9"),c("10","12")),
                       label.y = c(boxplot.stats(timer_transfer[,i])$stats[3],
                                   boxplot.stats(timer_transfer[,i])$stats[3],
                                   boxplot.stats(timer_transfer[,i])$stats[3],
                                   boxplot.stats(timer_transfer[,i])$stats[3])) + 
    stat_summary(fun="mean",geom="point",shape=23,size=2,fill="white") +  #均值标记
    theme(axis.text.x = element_text(size = 10),    ###主题
          axis.text.y = element_text(size = 10),
          #legend.position = "top",
          #legend.background = element_rect(fill="transparent", size=.5),
          axis.line = element_line(size = 0.5, colour = "black"),
          axis.title = element_blank(),
          strip.background = element_blank(),
          strip.text = element_blank(),
          panel.background = element_blank(),
          panel.border = element_blank(),
          panel.grid = element_blank())
  ggsave(paste0("D://danni//1//结果图//肿瘤微环境//timer1//metastasis_",colnames(timer_transfer)[i],".png"))
}

#cox#
ao<-intersect(row.names(cli_time),row.names(timer_relapse))
timer_relapse<-cbind(timer_relapse[ao,],cli_time[ao,c(10)])
colnames(timer_relapse)[9]<-"time"
timer_relapse_s1<-timer_relapse[which(timer_relapse$stage == "Stage I"),]
timer_relapse_s1$relapse<-0
timer_relapse_s1$relapse[which(timer_relapse_s1$class == "2")] <- 1
timer_relapse$relapse<-0
timer_relapse$relapse[which(timer_relapse$class == "2" |
                              timer_relapse$class == "5" |
                              timer_relapse$class == "8" |
                              timer_relapse$class == "11")]<-1


timer_relapse_cox1<-summary(coxph(Surv(time, relapse) ~ B_cell, data = timer_relapse_s1))$coefficients
timer_relapse_cox1<-cbind(timer_relapse_cox1,as.data.frame(summary(coxph(Surv(time, relapse) ~ B_cell, data = timer_relapse_s1))[8])[,c(3,4)])
for(i in colnames(timer_relapse_s1)[2:6]){
  timer_relapse_cox11<-summary(coxph(Surv(time, relapse) ~ get(i), data = timer_relapse_s1))$coefficients
  timer_relapse_cox11<-cbind(timer_relapse_cox11,as.data.frame(summary(coxph(Surv(time, relapse) ~ get(i), data = timer_relapse_s1))[8])[,c(3,4)])
  timer_relapse_cox1<-rbind(timer_relapse_cox1,timer_relapse_cox11)
}
colnames(timer_relapse_cox1)<-c("coef","HR","error","z","p","CIlow","CIhigh")
row.names(timer_relapse_cox1)<-colnames(timer_relapse)[1:6]

timer_relapse_cox1<-timer_relapse_cox1[,c(2,5,6,7)]
timer_relapse_cox1<-timer_relapse_cox1[which(timer_relapse_cox1$p < 0.05),]
timer_relapse_cox1$gene<-row.names(timer_relapse_cox1)
forestplot(timer_relapse_cox1, # 森林图文本部分
           mean = timer_relapse_cox1$HR, # 图形元素中HR部分
           lower = timer_relapse_cox1$CIlow,  # 图形元素中置信区间
           upper = timer_relapse_cox1$CIhigh,
           zero = 1, #显示y=0的垂直线
           xlog=FALSE, #x轴的坐标不取对数
           fn.ci_norm = fpDrawCircleCI, #误差条显示方式
           boxsize = 0.1, ##误差条中的圆心点大小
           col=fpColors(line = "#69a794", #误差条的线的颜色   "#dd8047","#a5ab81","#d8b25c","#968c8c"
                        box="#69a794"), #误差条的圆心点的颜色    
           lty.ci = 7,   # 误差条的线的线型
           lwd.ci = 3,   # 误差条的线的宽度
           ci.vertices.height = 0.10, # # 误差条末端的长度
           txt_gp = fpTxtGp(ticks = gpar(cex = 0.5), xlab = gpar(cex = 0.7), cex = 0.7), #文本大小设置
           lineheight = "auto")#线的高度

ao<-intersect(row.names(cli_time),row.names(timer_transfer))
timer_transfer<-cbind(timer_transfer[ao,],cli_time[ao,c(10)])
colnames(timer_transfer)[9]<-"time"
timer_transfer_s1<-timer_transfer[which(timer_transfer$stage == "Stage I"),]
timer_transfer_s1$transfer<-0
timer_transfer_s1$transfer[which(timer_transfer_s1$class == "3")] <- 1
timer_transfer$transfer<-0
timer_transfer$transfer[which(timer_transfer$class == "3" |
                                timer_transfer$class == "6" |
                                timer_transfer$class == "9" |
                                timer_transfer$class == "12")]<-1


timer_transfer_cox1<-summary(coxph(Surv(time, transfer) ~ B_cell, data = timer_transfer_s1))$coefficients
timer_transfer_cox1<-cbind(timer_transfer_cox1,as.data.frame(summary(coxph(Surv(time, transfer) ~ B_cell, data = timer_transfer_s1))[8])[,c(3,4)])
for(i in colnames(timer_transfer_s1)[2:6]){
  timer_transfer_cox11<-summary(coxph(Surv(time, transfer) ~ get(i), data = timer_transfer_s1))$coefficients
  timer_transfer_cox11<-cbind(timer_transfer_cox11,as.data.frame(summary(coxph(Surv(time, transfer) ~ get(i), data = timer_transfer_s1))[8])[,c(3,4)])
  timer_transfer_cox1<-rbind(timer_transfer_cox1,timer_transfer_cox11)
}
colnames(timer_transfer_cox1)<-c("coef","HR","error","z","p","CIlow","CIhigh")
row.names(timer_transfer_cox1)<-colnames(timer_transfer)[1:6]

timer_transfer_cox1<-timer_transfer_cox1[,c(2,5,6,7)]
timer_transfer_cox1<-timer_transfer_cox1[which(timer_transfer_cox1$p < 0.05),]
timer_transfer_cox1$gene<-row.names(timer_transfer_cox1)
forestplot(timer_transfer_cox1, # 森林图文本部分
           mean = timer_transfer_cox1$HR, # 图形元素中HR部分
           lower = timer_transfer_cox1$CIlow,  # 图形元素中置信区间
           upper = timer_transfer_cox1$CIhigh,
           zero = 1, #显示y=0的垂直线
           xlog=FALSE, #x轴的坐标不取对数
           fn.ci_norm = fpDrawCircleCI, #误差条显示方式
           boxsize = 0.1, ##误差条中的圆心点大小
           col=fpColors(line = "#69a794", #误差条的线的颜色   "#dd8047","#a5ab81","#d8b25c","#968c8c"
                        box="#69a794"), #误差条的圆心点的颜色    
           lty.ci = 7,   # 误差条的线的线型
           lwd.ci = 3,   # 误差条的线的宽度
           ci.vertices.height = 0.10, # # 误差条末端的长度
           txt_gp = fpTxtGp(ticks = gpar(cex = 0.5), xlab = gpar(cex = 0.7), cex = 0.7), #文本大小设置
           lineheight = "auto")#线的高度




####epic+mcp+timer####
epic<-read.table("epic.txt",header = T,sep = "\t",row.names = 1)
epic<-epic[-which(duplicated(substring(row.names(epic),1,12))),]
row.names(epic)<-substring(row.names(epic),1,12)
ao<-intersect(row.names(cli),row.names(epic))
cli_ao<-cli[ao,];epic<-epic[ao,]
epic$class<-as.factor(cli_ao$category);epic$stage<-as.factor(cli_ao$stage)
epic[,1:8]<-log(epic[,1:8]+1)
epic_relapse<-epic[-which(epic$class == 3 | epic$class == 6 | epic$class == 9 | epic$class == 12),]
epic_transfer<-epic[-which(epic$class == 2 | epic$class == 5 | epic$class == 8 | epic$class == 11),]
ao<-intersect(row.names(cli_time),row.names(epic_relapse))
epic_relapse<-cbind(epic_relapse[ao,],cli_time[ao,c(10)])
colnames(epic_relapse)[11]<-"time"
#epic_relapse_s1$relapse<-as.factor(epic_relapse_s1$relapse)
  epic_relapse$relapse<-0
epic_relapse$relapse[which(epic_relapse$class == "2" |
                              epic_relapse$class == "5" |
                              epic_relapse$class == "8" |
                              epic_relapse$class == "11")]<-1
ao<-intersect(row.names(cli_time),row.names(epic_transfer))
epic_transfer<-cbind(epic_transfer[ao,],cli_time[ao,c(10)])
colnames(epic_transfer)[11]<-"time"
epic_transfer$transfer<-0
epic_transfer$transfer[which(epic_transfer$class == "3" |
                                                              epic_transfer$class == "6" |
                                                                epic_transfer$class == "9" |
                                                               epic_transfer$class == "12")]<-1

mcp<-read.table("mcp.txt",header = T,sep = "\t",row.names = 1)
mcp<-mcp[-which(duplicated(substring(row.names(mcp),1,12))),]
row.names(mcp)<-substring(row.names(mcp),1,12)
ao<-intersect(row.names(cli),row.names(mcp))
cli_ao<-cli[ao,];mcp<-mcp[ao,]
mcp$class<-as.factor(cli_ao$category);mcp$stage<-as.factor(cli_ao$stage)
mcp[,1:10]<-log(mcp[,1:10]+1)
mcp_relapse<-mcp[-which(mcp$class == 3 | mcp$class == 6 | mcp$class == 9 | mcp$class == 12),]
mcp_transfer<-mcp[-which(mcp$class == 2 | mcp$class == 5 | mcp$class == 8 | mcp$class == 11),]
ao<-intersect(row.names(cli_time),row.names(mcp_relapse))
mcp_relapse<-cbind(mcp_relapse[ao,],cli_time[ao,c(10)])
colnames(mcp_relapse)[13]<-"time"
mcp_relapse$relapse<-0
 mcp_relapse$relapse[which(mcp_relapse$class == "2" |
                             mcp_relapse$class == "5" |
                           mcp_relapse$class == "8" |
                          mcp_relapse$class == "11")]<-1
ao<-intersect(row.names(cli_time),row.names(mcp_transfer))
mcp_transfer<-cbind(mcp_transfer[ao,],cli_time[ao,c(10)])
colnames(mcp_transfer)[13]<-"time"
mcp_transfer$transfer<-0
mcp_transfer$transfer[which(mcp_transfer$class == "3" |
                                                              mcp_transfer$class == "6" |
                                                              mcp_transfer$class == "9" |
                                                               mcp_transfer$class == "12")]<-1
timer<-read.table("TIMER.txt",header = T,sep = "\t",row.names = 1)
timer<-timer[-which(duplicated(substring(row.names(timer),1,12))),]
row.names(timer)<-substring(row.names(timer),1,12)
ao<-intersect(row.names(cli),row.names(timer))
cli_ao<-cli[ao,];timer<-timer[ao,]
timer$class<-as.factor(cli_ao$category);timer$stage<-as.factor(cli_ao$stage)
timer[,1:6]<-log(timer[,1:6]+1)
timer$class<-as.factor(cli_ao$category);timer$stage<-as.factor(cli_ao$stage)
timer_relapse<-timer[-which(timer$class == 3 | timer$class == 6 | timer$class == 9 | timer$class == 12),]
timer_transfer<-timer[-which(timer$class == 2 | timer$class == 5 | timer$class == 8 | timer$class == 11),]
ao<-intersect(row.names(cli_time),row.names(timer_relapse))
timer_relapse<-cbind(timer_relapse[ao,],cli_time[ao,c(10)])
colnames(timer_relapse)[9]<-"time"
timer_relapse$relapse<-0
timer_relapse$relapse[which(timer_relapse$class == "2" |
                              timer_relapse$class == "5" |
                              timer_relapse$class == "8" |
                              timer_relapse$class == "11")]<-1
ao<-intersect(row.names(cli_time),row.names(timer_transfer))
timer_transfer<-cbind(timer_transfer[ao,],cli_time[ao,c(10)])
colnames(timer_transfer)[9]<-"time"
timer_transfer$transfer<-0
timer_transfer$transfer[which(timer_transfer$class == "3" |
                                timer_transfer$class == "6" |
                                timer_transfer$class == "9" |
                                timer_transfer$class == "12")]<-1




ao<-intersect(row.names(epic_relapse),row.names(mcp_relapse))
epic_relapse<-epic_relapse[ao,];mcp_relapse<-mcp_relapse[ao,]
ao<-intersect(row.names(epic_relapse),row.names(timer_relapse))
epic_relapse<-epic_relapse[ao,];mcp_relapse<-mcp_relapse[ao,];timer_relapse<-timer_relapse[ao,]

ao<-intersect(row.names(epic_transfer),row.names(mcp_transfer))
epic_transfer<-epic_transfer[ao,];mcp_transfer<-mcp_transfer[ao,]
ao<-intersect(row.names(epic_transfer),row.names(timer_transfer))
epic_transfer<-epic_transfer[ao,];mcp_transfer<-mcp_transfer[ao,];timer_transfer<-timer_transfer[ao,]

emt_relapse<-data.frame(Bcell = apply(as.data.frame(cbind(epic_relapse$Bcells,mcp_relapse$B.lineage,timer_relapse$B_cell)),1,mean))
emt_relapse<-cbind(emt_relapse,apply(as.data.frame(cbind(epic_relapse$CAFs,mcp_relapse$Fibroblasts)),1,mean))
emt_relapse<-cbind(emt_relapse,apply(as.data.frame(cbind(epic_relapse$CD4_Tcells,timer_relapse$CD4_Tcell)),1,mean))
emt_relapse<-cbind(emt_relapse,apply(as.data.frame(cbind(epic_relapse$CD8_Tcells,mcp_relapse$CD8.T.cells,timer_relapse$CD8_Tcell)),1,mean))
emt_relapse<-cbind(emt_relapse,apply(as.data.frame(cbind(epic_relapse$Endothelial,mcp_relapse$Endothelial.cells)),1,mean))
emt_relapse<-cbind(emt_relapse,apply(as.data.frame(cbind(epic_relapse$Macrophages,timer_relapse$Macrophage)),1,mean))
emt_relapse<-cbind(emt_relapse,apply(as.data.frame(cbind(epic_relapse$NKcells,mcp_relapse$NK.cells)),1,mean))
emt_relapse<-cbind(emt_relapse,epic_relapse$otherCells)
emt_relapse<-cbind(emt_relapse,mcp_relapse$T.cells)
emt_relapse<-cbind(emt_relapse,mcp_relapse$Monocytic.lineage)
emt_relapse<-cbind(emt_relapse,mcp_relapse$Cytotoxic.lymphocytes)
emt_relapse<-cbind(emt_relapse,apply(as.data.frame(cbind(mcp_relapse$Myeloid.dendritic.cells,timer_relapse$Dendritic)),1,mean))
emt_relapse<-cbind(emt_relapse,apply(as.data.frame(cbind(mcp_relapse$Neutrophils,timer_relapse$Neutrophil)),1,mean))
colnames(emt_relapse)<-c("Bcells","Fibroblasts","CD4_Tcells","CD8_Tcells","Endothelial","Macrophages","NKcells","otherCells",
                         "T.cells","Monocytic.lineage","Cytotoxic.lymphocytes","Dendritic","Neutrophil")
row.names(emt_relapse)<-row.names(epic_relapse)
emt_relapse$class<-epic_relapse$class;emt_relapse$stage<-epic_relapse$stage;emt_relapse$time<-epic_relapse$time
emt_relapse_s1<-emt_relapse[which(emt_relapse$stage == "Stage I"),]
emt_relapse_s1$relapse<-0
emt_relapse_s1$relapse[which(emt_relapse_s1$class == "2")]<-1

emt_transfer<-data.frame(Bcell = apply(as.data.frame(cbind(epic_transfer$Bcells,mcp_transfer$B.lineage,timer_transfer$B_cell)),1,mean))
emt_transfer<-cbind(emt_transfer,apply(as.data.frame(cbind(epic_transfer$CAFs,mcp_transfer$Fibroblasts)),1,mean))
emt_transfer<-cbind(emt_transfer,apply(as.data.frame(cbind(epic_transfer$CD4_Tcells,timer_transfer$CD4_Tcell)),1,mean))
emt_transfer<-cbind(emt_transfer,apply(as.data.frame(cbind(epic_transfer$CD8_Tcells,mcp_transfer$CD8.T.cells,timer_transfer$CD8_Tcell)),1,mean))
emt_transfer<-cbind(emt_transfer,apply(as.data.frame(cbind(epic_transfer$Endothelial,mcp_transfer$Endothelial.cells)),1,mean))
emt_transfer<-cbind(emt_transfer,apply(as.data.frame(cbind(epic_transfer$Macrophages,timer_transfer$Macrophage)),1,mean))
emt_transfer<-cbind(emt_transfer,apply(as.data.frame(cbind(epic_transfer$NKcells,mcp_transfer$NK.cells)),1,mean))
emt_transfer<-cbind(emt_transfer,epic_transfer$otherCells)
emt_transfer<-cbind(emt_transfer,mcp_transfer$T.cells)
emt_transfer<-cbind(emt_transfer,mcp_transfer$Monocytic.lineage)
emt_transfer<-cbind(emt_transfer,mcp_transfer$Cytotoxic.lymphocytes)
emt_transfer<-cbind(emt_transfer,apply(as.data.frame(cbind(mcp_transfer$Myeloid.dendritic.cells,timer_transfer$Dendritic)),1,mean))
emt_transfer<-cbind(emt_transfer,apply(as.data.frame(cbind(mcp_transfer$Neutrophils,timer_transfer$Neutrophil)),1,mean))
colnames(emt_transfer)<-c("Bcells","Fibroblasts","CD4_Tcells","CD8_Tcells","Endothelial","Macrophages","NKcells","otherCells",
                          "T.cells","Monocytic.lineage","Cytotoxic.lymphocytes","Dendritic","Neutrophil")
row.names(emt_transfer)<-row.names(epic_transfer)
emt_transfer$class<-epic_transfer$class;emt_transfer$stage<-epic_transfer$stage;emt_transfer$time<-epic_transfer$time
emt_transfer_s1<-emt_transfer[which(emt_transfer$stage == "Stage I"),]
emt_transfer_s1$transfer<-0
emt_transfer_s1$transfer[which(emt_transfer_s1$class == "3")]<-1



for (i in 1:13) {
  ggplot(emt_relapse,aes(x = class,y = get(colnames(emt_relapse)[i]) ,group = class)) +
    geom_boxplot(fill = c("#93b5cf","#eea08c","#93b5cf","#eea08c","#93b5cf","#eea08c","#93b5cf","#eea08c")) +
    ggtitle(colnames(emt_relapse)[i]) + 
    coord_cartesian(ylim = boxplot.stats(emt_relapse[,i])$stats[c(1, 5)]*1.05) +
    stat_summary(fun="mean",geom="point",shape=23,size=2,fill="white") +  #均值标记
    stat_compare_means(comparisons = list(c("1","2"),c("4","5"),c("7","8"),c("10","11")),
                       label.y = c(boxplot.stats(emt_relapse[,i])$stats[3],
                                   boxplot.stats(emt_relapse[,i])$stats[3],
                                   boxplot.stats(emt_relapse[,i])$stats[3],
                                   boxplot.stats(emt_relapse[,i])$stats[3])) + 
    theme(axis.text.x = element_text(size = 10),    ###主题
          axis.text.y = element_text(size = 10),
          #legend.position = "top",
          #legend.background = element_rect(fill="transparent", size=.5),
          axis.line = element_line(size = 0.5, colour = "black"),
          axis.title = element_blank(),
          strip.background = element_blank(),
          strip.text = element_blank(),
          panel.background = element_blank(),
          panel.border = element_blank(),
          panel.grid = element_blank())
  ggsave(paste0("D://danni//1//结果图//肿瘤微环境//emt//recurrence_",colnames(emt_relapse)[i],".png"))
}


emt_relapse_cox1<-summary(coxph(Surv(time, relapse) ~ Bcells, data = emt_relapse_s1))$coefficients
emt_relapse_cox1<-cbind(emt_relapse_cox1,as.data.frame(summary(coxph(Surv(time, relapse) ~ Bcells, data = emt_relapse_s1))[8])[,c(3,4)])
for(i in colnames(emt_relapse_s1)[2:13]){
  emt_relapse_cox11<-summary(coxph(Surv(time, relapse) ~ get(i), data = emt_relapse_s1))$coefficients
  emt_relapse_cox11<-cbind(emt_relapse_cox11,as.data.frame(summary(coxph(Surv(time, relapse) ~ get(i), data = emt_relapse_s1))[8])[,c(3,4)])
  emt_relapse_cox1<-rbind(emt_relapse_cox1,emt_relapse_cox11)
}
colnames(emt_relapse_cox1)<-c("coef","HR","error","z","p","CIlow","CIhigh")
row.names(emt_relapse_cox1)<-colnames(emt_relapse)[1:13]

emt_relapse_cox1<-emt_relapse_cox1[,c(2,5,6,7)]
emt_relapse_cox1<-emt_relapse_cox1[which(emt_relapse_cox1$p < 0.05),]
emt_relapse_cox1$gene<-row.names(emt_relapse_cox1)
forestplot(emt_relapse_cox1, # 森林图文本部分
           mean = emt_relapse_cox1$HR, # 图形元素中HR部分
           lower = emt_relapse_cox1$CIlow,  # 图形元素中置信区间
           upper = emt_relapse_cox1$CIhigh,
           zero = 1, #显示y=0的垂直线
           xlog=FALSE, #x轴的坐标不取对数
           fn.ci_norm = fpDrawCircleCI, #误差条显示方式
           boxsize = 0.1, ##误差条中的圆心点大小
           col=fpColors(line = "#69a794", #误差条的线的颜色   "#dd8047","#a5ab81","#d8b25c","#968c8c"
                        box="#69a794"), #误差条的圆心点的颜色    
           lty.ci = 7,   # 误差条的线的线型
           lwd.ci = 3,   # 误差条的线的宽度
           ci.vertices.height = 0.10, # # 误差条末端的长度
           txt_gp = fpTxtGp(ticks = gpar(cex = 0.5), xlab = gpar(cex = 0.7), cex = 0.7), #文本大小设置
           lineheight = "auto")#线的高度 

for(i in 1:13){
  emt_relapse_s1$cell<-"high"
  emt_relapse_s1$cell[which(emt_relapse_s1[,i] < mean(emt_relapse_s1[,i]))]<-"low" 
  ggplot(emt_relapse_s1,aes(x=as.factor(relapse),fill = as.factor(cell))) + 
    geom_bar(na.rm = T,position = "fill") +
    scale_fill_manual(values = c("#d1c2d3","#806d9e")) +
    #coord_flip()+
    theme(axis.text.x = element_text(size = 10),    ###主题
          axis.text.y = element_text(size = 10),
          #legend.position = "top",
          #legend.background = element_rect(fill="transparent", size=.5),
          axis.line = element_line(size = 0.5, colour = "black"),
          axis.title = element_blank(),
          strip.background = element_blank(),
          strip.text = element_blank(),
          panel.background = element_blank(),
          panel.border = element_blank(),
          panel.grid = element_blank())
  ggsave(paste0("D://danni//1//结果图//肿瘤微环境//cell//relapse_",colnames(emt_relapse)[i],".png"))
}





for (i in 1:13) {
  ggplot(emt_transfer,aes(x = class,y = get(colnames(emt_transfer)[i]) ,fill = class)) +
    geom_boxplot(fill = c("#93b5cf","#e77c8e","#93b5cf","#e77c8e","#93b5cf","#e77c8e","#93b5cf","#e77c8e"))+
    ggtitle(colnames(emt_transfer)[i]) + 
    coord_cartesian(ylim = boxplot.stats(emt_transfer[,i])$stats[c(1, 5)]*1.05) +
    stat_compare_means(comparisons = list(c("1","3"),c("4","6"),c("7","9"),c("10","12")),
                       label.y = c(boxplot.stats(emt_transfer[,i])$stats[3],
                                   boxplot.stats(emt_transfer[,i])$stats[3],
                                   boxplot.stats(emt_transfer[,i])$stats[3],
                                   boxplot.stats(emt_transfer[,i])$stats[3])) + 
    stat_summary(fun="mean",geom="point",shape=23,size=2,fill="white") +  #均值标记
    theme(axis.text.x = element_text(size = 10),    ###主题
          axis.text.y = element_text(size = 10),
          #legend.position = "top",
          #legend.background = element_rect(fill="transparent", size=.5),
          axis.line = element_line(size = 0.5, colour = "black"),
          axis.title = element_blank(),
          strip.background = element_blank(),
          strip.text = element_blank(),
          panel.background = element_blank(),
          panel.border = element_blank(),
          panel.grid = element_blank())
  ggsave(paste0("D://danni//1//结果图//肿瘤微环境//emt//metastasis_",colnames(emt_transfer)[i],".pdf"))
}


emt_transfer_cox1<-summary(coxph(Surv(time, transfer) ~ Bcells, data = emt_transfer_s1))$coefficients
emt_transfer_cox1<-cbind(emt_transfer_cox1,as.data.frame(summary(coxph(Surv(time, transfer) ~ Bcells, data = emt_transfer_s1))[8])[,c(3,4)])
for(i in colnames(emt_transfer_s1)[2:13]){
  emt_transfer_cox11<-summary(coxph(Surv(time, transfer) ~ get(i), data = emt_transfer_s1))$coefficients
  emt_transfer_cox11<-cbind(emt_transfer_cox11,as.data.frame(summary(coxph(Surv(time, transfer) ~ get(i), data = emt_transfer_s1))[8])[,c(3,4)])
  emt_transfer_cox1<-rbind(emt_transfer_cox1,emt_transfer_cox11)
}
colnames(emt_transfer_cox1)<-c("coef","HR","error","z","p","CIlow","CIhigh")
row.names(emt_transfer_cox1)<-colnames(emt_transfer)[1:13]

emt_transfer_cox1<-emt_transfer_cox1[,c(2,5,6,7)]
emt_transfer_cox1<-emt_transfer_cox1[which(emt_transfer_cox1$p < 0.05),]
emt_transfer_cox1$gene<-row.names(emt_transfer_cox1)
forestplot(emt_transfer_cox1, # 森林图文本部分
           mean = emt_transfer_cox1$HR, # 图形元素中HR部分
           lower = emt_transfer_cox1$CIlow,  # 图形元素中置信区间
           upper = emt_transfer_cox1$CIhigh,
           zero = 1, #显示y=0的垂直线
           xlog=FALSE, #x轴的坐标不取对数
           fn.ci_norm = fpDrawCircleCI, #误差条显示方式
           boxsize = 0.1, ##误差条中的圆心点大小
           col=fpColors(line = "#69a794", #误差条的线的颜色   "#dd8047","#a5ab81","#d8b25c","#968c8c"
                        box="#69a794"), #误差条的圆心点的颜色    
           lty.ci = 7,   # 误差条的线的线型
           lwd.ci = 3,   # 误差条的线的宽度
           ci.vertices.height = 0.10, # # 误差条末端的长度
           txt_gp = fpTxtGp(ticks = gpar(cex = 0.5), xlab = gpar(cex = 0.7), cex = 0.7), #文本大小设置
           lineheight = "auto")#线的高度 


for(i in 1:13){
  emt_transfer_s1$cell<-"up"
  emt_transfer_s1$cell[which(emt_transfer_s1[,i] < mean(emt_transfer_s1[,i]))]<-"down" 
  ggplot(emt_transfer_s1,aes(x=as.factor(transfer),fill = as.factor(cell))) + 
    geom_bar(na.rm = T,position = "fill") +
    scale_fill_manual(values = c("#add5a2","#ec9bad")) +
    #coord_flip()+
    theme(axis.text.x = element_text(size = 10),    ###主题
          axis.text.y = element_text(size = 10),
          #legend.position = "top",
          #legend.background = element_rect(fill="transparent", size=.5),
          axis.line = element_line(size = 0.5, colour = "black"),
          axis.title = element_blank(),
          strip.background = element_blank(),
          strip.text = element_blank(),
          panel.background = element_blank(),
          panel.border = element_blank(),
          panel.grid = element_blank())
  ggsave(paste0("D://danni//1//结果图//肿瘤微环境//emt//柱状图//transfer_",colnames(emt_transfer)[i],".png"))
}



library(class)
library(caret)
library(e1071)
library(pROC)
library(backports)


emt_transfer_s11<-emt_transfer_s1[c(sample(which(emt_transfer_s1$class == 1),77),which(emt_transfer_s1$class == 3)),]
emt_transfer_s11$class<-as.factor(as.numeric(emt_transfer_s11$class))
ao1<-sample(which(emt_transfer_s11$class == 1),15)
ao2<-sample(which(emt_transfer_s11$class == 3),15)
emt_transfer_train<-emt_transfer_s11[-c(ao1,ao2),]
emt_transfer_train<-emt_transfer_train[,c(1,2,9,14)]
emt_transfer_test<-emt_transfer_s11[c(ao1,ao2),]
emt_transfer_test<-emt_transfer_test[,c(1,2,9,14)]


##k近邻##

ao<-c()
for (k in 1:10) {
  knnresult <- knn(train = emt_transfer_train[,1:3],test = emt_transfer_test[,1:3],cl=emt_transfer_train$class,k = k)
  table(emt_transfer_test$class,knnresult)
  #knn_roc <- multiclass.roc(test3$class,as.numeric(knnresult))
  knn_roc <- roc(emt_transfer_test$class,as.numeric(knnresult))
  print(knn_roc)
  #print(sum(diag(table(test4$class,knnresult)))/sum(table(test4$class,knnresult)))
  ao[k]<-knn_roc$auc
}

max(ao)
#找到最合适k#
knnresult <- knn(train = emt_transfer_train[,1:3],test = emt_transfer_test[,1:3],cl=emt_transfer_train$class,k = which(ao == max(ao)))
table(emt_transfer_test$class,knnresult)
#knn_roc <- multiclass.roc(test3$class,as.numeric(knnresult))
knn_roc <- roc(emt_transfer_test$class,as.numeric(knnresult))
plot(knn_roc, print.auc=TRUE, auc.polygon=TRUE, grid=c(0.1, 0.2),grid.col=c("green", "red"), max.auc.polygon=TRUE,auc.polygon.col="skyblue", print.thres=TRUE,main='随机森林模型ROC曲线')

emt_transfer_test$test<-knnresult
ao<-intersect(row.names(emt_transfer_test),row.names(time_sur))
surv<-cbind(emt_transfer_test[ao,],time_sur[ao,c(1,2)])
fit1 <- survfit(Surv(days_to_death, vital_status) ~ test,data = surv)
ggsurvplot(fit1,risk.table=F,
           palette = c("#9abeaf","#f1939c"),
           pval=TRUE,ggtheme = theme_bw(),
           ylab="Survival probabilities",legend=c(0.8,0.9),
           legend.title="",
           pval.method=TRUE) 


#stage间#
emt_stage<-melt(emt_transfer[,-c(14,16)],"stage")   ##relapse/transfer
emt_stage$variable<-as.factor(emt_stage$variable);emt_stage$stage<-as.factor(emt_stage$stage)
emt_stage$variable<-factor(emt_stage$variable,levels = c("Macrophages","CD4_Tcells","otherCells","Bcells",
                                                         "CD8_Tcells","NKcells","Neutrophil","Endothelial",
                                                         "Dendritic","Fibroblasts","Cytotoxic.lymphocytes",
                                                         "T.cells","Monocytic.lineage"))


ggplot(emt_stage,aes(x = factor(variable),
                     y = value ,fill = stage)) +
  geom_boxplot(outlier.colour = "white")+
  scale_fill_manual(values = c("#9abeaf","#8fb2c9","#f8e0b0","#f1939c")) +
  theme(axis.text.x = element_text(size = 10,angle = 90),    ###主题
        axis.text.y = element_text(size = 10),
        #legend.position = "top",
        #legend.background = element_rect(fill="transparent", size=.5),
        axis.line = element_line(size = 0.5, colour = "black"),
        axis.title = element_blank(),
        strip.background = element_blank(),
        strip.text = element_blank(),
        panel.background = element_blank(),
        panel.border = element_blank(),
        panel.grid = element_blank())



ao1<-apply(emt_transfer[which(emt_transfer$stage == "Stage I"),1:13],2,mean)
ao2<-apply(emt_transfer[which(emt_transfer$stage == "Stage II"),1:13],2,mean)
ao3<-apply(emt_transfer[which(emt_transfer$stage == "Stage III"),1:13],2,mean)
ao45<-apply(emt_transfer[which(emt_transfer$stage == "Stage IV+V"),1:13],2,mean)
emt_median<-as.data.frame(cbind(ao1,ao2,ao3,ao45))
for(i in 1:13){
  emt_median[i,]<-emt_median[i,]-emt_median[i,1]
}
colnames(emt_median)<-c("stage I","stage II","stage III","stage IV+V")
emt_median$cell<-row.names(emt_median)
emt_median<-melt(emt_median,"cell")
#emt_median$value<-emt_median$value*100

pheatmap(emt_median,cluster_col = F,cluster_row = TRUE,show_rownames = T,display_numbers = F,fontsize_number = 11,
         color = c(colorRampPalette(colors = c("#b9dec9","#b2cf87"))(floor(abs(min(emt_median))/0.001)),colorRampPalette(colors = c("#b2cf87","#f8e8c1"))(floor(abs(max(emt_median))/0.001))),
         breaks = c(seq(min(emt_median),-0.001,by=0.001),seq(0,max(emt_median),by=0.001)),
         angle_col = 0  #坐标方向
)


ggplot(emt_median,aes(x = cell, y  = value)) +   #减去stageI的值
  geom_point(aes(color = factor(variable),shape = factor(variable)),size = 6)+ 
  scale_shape_manual(values = c(15,16,17,18)) +
  #scale_size_continuous(limits  = c(-6,4),breaks = seq(-6,4,1))+ #调整大小
  #scale_color_gradient2(low="blue",high="red",midpoint = 0)+
  #scale_color_gradientn(colours = c("blue","white","red"))+
  #scale_color_brewer(type = "seq",palette = "Set2") +
  coord_flip()+
  geom_hline(aes(yintercept = 0),linetype = "dashed",color = "#9abeaf") +
  scale_color_manual(values=c("#9abeaf","#8fb2c9","#f8e0b0","#f1939c"))+
  theme(axis.text.x = element_text(size = 10),    ###主题
        axis.text.y = element_text(size = 10),
        #legend.position = "top",
        #legend.background = element_rect(fill="transparent", size=.5),
        axis.line = element_blank(),
        axis.title = element_blank(),
        strip.background = element_blank(),
        strip.text = element_blank(),
        panel.background = element_blank(),
        panel.border = element_blank(),
        panel.grid = element_blank())

ggplot(emt_median,aes(x = cell, y  = value)) + 
  geom_point(aes(color = factor(variable)),size = 6)+ #,shape = 19
  #scale_size_continuous(limits  = c(-6,4),breaks = seq(-6,4,1))+ #调整大小
  #scale_color_gradient2(low="blue",high="red",midpoint = 0)+
  #scale_color_gradientn(colours = c("blue","white","red"))+
  #scale_color_brewer(type = "seq",palette = "Set2") +
  facet_wrap(.~cell,ncol = 1,scales = "free") +
  coord_flip()+
  scale_colour_manual(values=c("#9abeaf","#8fb2c9","#f8e0b0","#f1939c"))+
  theme(axis.text.x = element_text(size = 10),    ###主题
        axis.text.y = element_text(size = 10),
        #legend.position = "top",
        #legend.background = element_rect(fill="transparent", size=.5),
        axis.line = element_blank(),
        axis.title = element_blank(),
        strip.background = element_blank(),
        strip.text = element_blank(),
        panel.background = element_blank(),
        panel.border = element_blank(),
        panel.grid = element_blank())


####cell####
cell<-read.table("D://danni//1//结果图//肿瘤微环境//免疫特征//cell_immune.txt",header = T,sep = "\t",row.names = 1)
ao<-intersect(row.names(cli),row.names(cell))
cli_ao<-cli[ao,];cell<-cell[ao,]
cell$class<-as.factor(cli_ao$category);cell$stage<-as.factor(cli_ao$stage)
cell_relapse_<-cell[-which(cell$class == 3 | cell$class == 6 | cell$class == 9 | cell$class == 12),]
cell_transfer_<-cell[-which(cell$class == 2 | cell$class == 5 | cell$class == 8 | cell$class == 11),]

for (i in 4:63) {
  cell_relapse <- na.omit(cell_relapse_[,c(i,64,65)])
  ggplot(cell_relapse,aes(x = class,y = get(colnames(cell_relapse_)[i]) ,group = class)) +
    geom_boxplot(fill = c("#93b5cf","#eea08c","#93b5cf","#eea08c","#93b5cf","#eea08c","#93b5cf","#eea08c")) +
    ggtitle(colnames(cell_relapse_)[i]) + 
    coord_cartesian(ylim = boxplot.stats(cell_relapse_[,i])$stats[c(1, 5)]*1.05) +
    stat_compare_means(comparisons = list(c("1","2"),c("4","5"),c("7","8"),c("10","11")),
                       label.y = c(0,0,0,0)) + 
    theme(axis.text.x = element_text(size = 10),    ###主题
          axis.text.y = element_text(size = 10),
          #legend.position = "top",
          #legend.background = element_rect(fill="transparent", size=.5),
          axis.line = element_line(size = 0.5, colour = "black"),
          axis.title = element_blank(),
          strip.background = element_blank(),
          strip.text = element_blank(),
          panel.background = element_blank(),
          panel.border = element_blank(),
          panel.grid = element_blank())
  ggsave(paste0("D://danni//1//结果图//肿瘤微环境//免疫特征//recurrence_",colnames(cell_relapse_)[i],".png"))
}


for (i in 4:63) {
  cell_transfer <- na.omit(cell_transfer_[,c(i,64,65)])
  ggplot(cell_transfer,aes(x = class,y = get(colnames(cell_transfer_)[i]) ,group = class)) +
    geom_boxplot(fill = c("#93b5cf","#e77c8e","#93b5cf","#e77c8e","#93b5cf","#e77c8e","#93b5cf","#e77c8e"))+
    ggtitle(colnames(cell_transfer_[i])) + 
    coord_cartesian(ylim = boxplot.stats(cell_transfer_[,i])$stats[c(1, 5)]*1.05) +
    stat_compare_means(comparisons = list(c("1","3"),c("4","6"),c("7","9"),c("10","12")),
                       label.y = c(0,0,0,0)) + 
    theme(axis.text.x = element_text(size = 10),    ###主题
          axis.text.y = element_text(size = 10),
          #legend.position = "top",
          #legend.background = element_rect(fill="transparent", size=.5),
          axis.line = element_line(size = 0.5, colour = "black"),
          axis.title = element_blank(),
          strip.background = element_blank(),
          strip.text = element_blank(),
          panel.background = element_blank(),
          panel.border = element_blank(),
          panel.grid = element_blank())
  ggsave(paste0("D://danni//1//结果图//肿瘤微环境//免疫特征//metastasis_",colnames(cell_transfer_)[i],".png"))
}

#which(colnames(cell_relapse_) == "TCR.Evenness")
#cell_relapse <- na.omit(cell_relapse_[,c(27,64)])
#p<-compare_means(TCR.Evenness~class,cell_relapse)


#p值#
library(pheatmap)
library(ggplot2)
cell_relapse_p<-read.table("D://danni//1//结果图//肿瘤微环境//免疫特征//cell_relapse_p.txt",header = T ,sep = "\t",row.names = 1)
cell_transfer_p<-read.table("D://danni//1//结果图//肿瘤微环境//免疫特征//cell_transfer_p.txt",header = T ,sep = "\t",row.names = 1)
cell_relapse_p<-cell_relapse_p-0.05
cell_transfer_p<-cell_transfer_p-0.05
cell_relapse_p<-cell_relapse_p[c(which(cell_relapse_p$stage1 < 0 & cell_relapse_p$stage2 > 0 &
                                         cell_relapse_p$stage3 > 0 & cell_relapse_p$stage45 > 0),
                                 which(cell_relapse_p$stage1 > 0 & cell_relapse_p$stage2 < 0 &
                                         cell_relapse_p$stage3 < 0 & cell_relapse_p$stage45 < 0),3,45,46,47,51),]
cell_transfer_p<-cell_transfer_p[c(which(cell_transfer_p$stage1 < 0 & cell_transfer_p$stage2 > 0 &
                                           cell_transfer_p$stage3 > 0 & cell_transfer_p$stage45 > 0),
                                   which(cell_transfer_p$stage1 > 0 & cell_transfer_p$stage2 < 0 &
                                           cell_transfer_p$stage3 < 0 & cell_transfer_p$stage45 < 0),23,49),]

cell_relapse<-read.table("D://danni//1//结果图//肿瘤微环境//免疫特征//cell_relapse.txt",header = T ,sep = "\t")
cell_relapse$p_<-"high"
cell_relapse$p_[which(cell_relapse$p < 0.05)]<-"low"
cell_transfer<-read.table("D://danni//1//结果图//肿瘤微环境//免疫特征//cell_transfer.txt",header = T ,sep = "\t")
cell_transfer$p_<-"high"
cell_transfer$p_[which(cell_transfer$p < 0.05)]<-"low"


library(RColorBrewer)
ggplot(cell_relapse,aes(x = stage, y  = cell, color = updown)) + 
  geom_point(aes(size = p_))+ #,shape = 19
  #scale_size_continuous(range = c(3,11),breaks=c(10,20,30,40,50,60))+ #调整大小
  #scale_color_gradient2(low="blue",high="red",midpoint = 0)+
  #scale_color_gradientn(colours = c("blue","white","red"))+
  #scale_color_brewer(type = "seq",palette = "Set2") +
  scale_colour_manual(values=c("#2b73af","#ee4866"),labels=c("down","up"))+
  theme(axis.text.x = element_text(size = 10),    ###主题
        axis.text.y = element_text(size = 10),
        #legend.position = "top",
        #legend.background = element_rect(fill="transparent", size=.5),
        axis.line = element_blank(),
        axis.title = element_blank(),
        strip.background = element_blank(),
        strip.text = element_blank(),
        panel.background = element_blank(),
        panel.border = element_blank(),
        panel.grid = element_blank())

ggplot(cell_transfer,aes(x = stage, y  = cell, color = updown)) + 
  geom_point(aes(size = p_))+ #,shape = 19
  #scale_size_continuous(range = c(3,11),breaks=c(10,20,30,40,50,60))+ #调整大小
  #scale_color_gradient2(low="blue",high="red",midpoint = 0)+
  #scale_color_gradientn(colours = c("blue","white","red"))+
  #scale_color_brewer(type = "seq",palette = "Set2") +
  scale_colour_manual(values=c("#2b73af","#ee4866"),labels=c("down","up"))+
  theme(axis.text.x = element_text(size = 10),    ###主题
        axis.text.y = element_text(size = 10),
        #legend.position = "top",
        #legend.background = element_rect(fill="transparent", size=.5),
        axis.line = element_blank(),
        axis.title = element_blank(),
        strip.background = element_blank(),
        strip.text = element_blank(),
        panel.background = element_blank(),
        panel.border = element_blank(),
        panel.grid = element_blank())


pheatmap(cell_relapse_p,cluster_col = F,cluster_row = TRUE,show_rownames = T,display_numbers = F,fontsize_number = 11,
         color = c(colorRampPalette(colors = c("#e77c8e","#f1c4cd"))(floor(abs(min(cell_relapse_p))/0.001)),colorRampPalette(colors = c("#eef7f2","#66c18c"))(floor(abs(max(cell_relapse_p))/0.001))),
         breaks = c(seq(min(cell_relapse_p),-0.001,by=0.001),seq(0,max(cell_relapse_p),by=0.001)),
         angle_col = 0  #坐标方向
)
pheatmap(cell_transfer_p,cluster_col = F,cluster_row = TRUE,show_rownames = T,display_numbers = F,fontsize_number = 11,
         color = c(colorRampPalette(colors = c("#e77c8e","#f1c4cd"))(floor(abs(min(cell_transfer_p))/0.001)),colorRampPalette(colors = c("#eef7f2","#66c18c"))(floor(abs(max(cell_transfer_p))/0.001))),
         breaks = c(seq(min(cell_transfer_p),-0.001,by=0.001),seq(0,max(cell_transfer_p),by=0.001)),
         angle_col = 0  #坐标方向
)



#cox+分类器#
#relapse#
cell_relapse<-cell_relapse_[,c("B.Cells.Memory","TCR.Richness","CTA.Score","Lymphocyte.Infiltration.Signature.Score",
                               "B.Cells.Naive","T.Cells.Regulatory.Tregs","TCR.Evenness","Th17.Cells")]
ao<-intersect(row.names(cell_relapse),row.names(cli_time))
cell_relapse<-cbind(cell_relapse[ao,],cli_time[ao,c("category","time")])
cell_relapse_s1<-cell_relapse[which(cell_relapse$category == 1 | cell_relapse$category == 2),]
cell_relapse_s1$relapse<-0;cell_relapse_s1$relapse[which(cell_relapse_s1$category == 2)]<-1
#cell_relapse_s1$relapse<-as.factor(cell_relapse_s1$relapse)


cell_relapse_cox1<-summary(coxph(Surv(time, relapse) ~ B.Cells.Memory, data = cell_relapse_s1))$coefficients
cell_relapse_cox1<-cbind(cell_relapse_cox1,as.data.frame(summary(coxph(Surv(time, relapse) ~ B.Cells.Memory, data = cell_relapse_s1))[8])[,c(3,4)])
for(i in colnames(cell_relapse_s1)[2:8]){
  cell_relapse_cox11<-summary(coxph(Surv(time, relapse) ~ get(i), data = cell_relapse_s1))$coefficients
  cell_relapse_cox11<-cbind(cell_relapse_cox11,as.data.frame(summary(coxph(Surv(time, relapse) ~ get(i), data = cell_relapse_s1))[8])[,c(3,4)])
  cell_relapse_cox1<-rbind(cell_relapse_cox1,cell_relapse_cox11)
}
colnames(cell_relapse_cox1)<-c("coef","HR","error","z","p","CIlow","CIhigh")
row.names(cell_relapse_cox1)<-colnames(cell_relapse_s1)[1:8]

cell_relapse_cox1<-cell_relapse_cox1[,c(2,5,6,7)]
cell_relapse_cox1<-cell_relapse_cox1[which(cell_relapse_cox1$p < 0.05),]
cell_relapse_cox1$gene<-row.names(cell_relapse_cox1)
cell_relapse_cox1[,c(1,3,4)]<-log(cell_relapse_cox1[,c(1,3,4)])
forestplot(cell_relapse_cox1, # 森林图文本部分
           mean = cell_relapse_cox1$HR, # 图形元素中HR部分
           lower = cell_relapse_cox1$CIlow,  # 图形元素中置信区间
           upper = cell_relapse_cox1$CIhigh,
           zero = 0, #显示y=0的垂直线
           xlog=FALSE, #x轴的坐标不取对数
           fn.ci_norm = fpDrawCircleCI, #误差条显示方式
           boxsize = 0.1, ##误差条中的圆心点大小
           col=fpColors(line = "#69a794", #误差条的线的颜色   "#dd8047","#a5ab81","#d8b25c","#968c8c"
                        box="#69a794"), #误差条的圆心点的颜色    
           lty.ci = 7,   # 误差条的线的线型
           lwd.ci = 3,   # 误差条的线的宽度
           ci.vertices.height = 0.10, # # 误差条末端的长度
           txt_gp = fpTxtGp(ticks = gpar(cex = 0.5), xlab = gpar(cex = 0.7), cex = 0.7), #文本大小设置
           lineheight = "auto")#线的高度



library(class)
library(caret)
library(e1071)
library(pROC)
library(backports)

colnames(cell_relapse_s1)[9]<-"class";cell_relapse_s1$class<-as.factor(cell_relapse_s1$class)

cell_relapse_s11<-na.omit(cell_relapse_s1)
cell_relapse_s11<-cell_relapse_s11[c(sample(which(cell_relapse_s11$class == 1),111),which(cell_relapse_s11$class == 2)),]
cell_relapse_s11$class<-as.factor(as.numeric(cell_relapse_s11$class))
ao1<-sample(which(cell_relapse_s11$class == 1),22)
ao2<-sample(which(cell_relapse_s11$class == 2),22)
cell_relapse_train<-cell_relapse_s11[-c(ao1,ao2),]
cell_relapse_train<-cell_relapse_train[,c(5,7,8,9)]
cell_relapse_test<-cell_relapse_s11[c(ao1,ao2),]
cell_relapse_test<-cell_relapse_test[,c(5,7,8,9)]


##k近邻##

ao<-c()
for (k in 1:10) {
  knnresult <- knn(train = cell_relapse_train[,1:3],test = cell_relapse_test[,1:3],cl=cell_relapse_train$class,k = k)
  table(cell_relapse_test$class,knnresult)
  #knn_roc <- multiclass.roc(test3$class,as.numeric(knnresult))
  knn_roc <- roc(cell_relapse_test$class,as.numeric(knnresult))
  print(knn_roc)
  #print(sum(diag(table(test4$class,knnresult)))/sum(table(test4$class,knnresult)))
  ao[k]<-knn_roc$auc
}

max(ao)
#找到最合适k#
knnresult <- knn(train = cell_relapse_train[,1:3],test = cell_relapse_test[,1:3],cl=cell_relapse_train$class,k = which(ao == max(ao)))
table(cell_relapse_test$class,knnresult)
#knn_roc <- multiclass.roc(test3$class,as.numeric(knnresult))
knn_roc <- roc(cell_relapse_test$class,as.numeric(knnresult))
plot(knn_roc, print.auc=TRUE, auc.polygon=TRUE, grid=c(0.1, 0.2),grid.col=c("green", "red"), max.auc.polygon=TRUE,auc.polygon.col="skyblue", print.thres=TRUE,main='随机森林模型ROC曲线')

cell_relapse_test$test<-knnresult
ao<-intersect(row.names(cell_relapse_test),row.names(time_sur))
surv<-cbind(cell_relapse_test[ao,],time_sur[ao,c(1,2)])
fit1 <- survfit(Surv(days_to_death, vital_status) ~ test,data = surv)
ggsurvplot(fit1,risk.table=F,
           palette = c("#9abeaf","#f1939c"),
           pval=TRUE,ggtheme = theme_bw(),
           ylab="Survival probabilities",legend=c(0.8,0.9),
           legend.title="",
           pval.method=TRUE) 



#transfer#
cell_transfer<-cell_transfer_[,c("TGF.beta.Response","TCR.Shannon","T.Cells.CD4.Memory.Activated","Plasma.Cells","Macrophages.M2",
                                 "Macrophages.M1","Macrophages","Lymphocytes","Lymphocyte.Infiltration.Signature.Score",
                                 "IFN.gamma.Response","Fraction.Altered","Dendritic.Cells.Resting","B.Cells.Naive","Aneuploidy.Score")]
ao<-intersect(row.names(cell_transfer),row.names(cli_time))
cell_transfer<-cbind(cell_transfer[ao,],cli_time[ao,c("category","time")])
cell_transfer_s1<-cell_transfer[which(cell_transfer$category == 1 | cell_transfer$category == 3),]
cell_transfer_s1$transfer<-0;cell_transfer_s1$transfer[which(cell_transfer_s1$category == 3)]<-1
#cell_transfer_s1$transfer<-as.factor(cell_transfer_s1$transfer)


cell_transfer_cox1<-summary(coxph(Surv(time, transfer) ~ TGF.beta.Response, data = cell_transfer_s1))$coefficients
cell_transfer_cox1<-cbind(cell_transfer_cox1,as.data.frame(summary(coxph(Surv(time, transfer) ~ TGF.beta.Response, data = cell_transfer_s1))[8])[,c(3,4)])
for(i in colnames(cell_transfer_s1)[2:14]){
  cell_transfer_cox11<-summary(coxph(Surv(time, transfer) ~ get(i), data = cell_transfer_s1))$coefficients
  cell_transfer_cox11<-cbind(cell_transfer_cox11,as.data.frame(summary(coxph(Surv(time, transfer) ~ get(i), data = cell_transfer_s1))[8])[,c(3,4)])
  cell_transfer_cox1<-rbind(cell_transfer_cox1,cell_transfer_cox11)
}
colnames(cell_transfer_cox1)<-c("coef","HR","error","z","p","CIlow","CIhigh")
row.names(cell_transfer_cox1)<-colnames(cell_transfer_s1)[1:14]

cell_transfer_cox1<-cell_transfer_cox1[,c(2,5,6,7)]
cell_transfer_cox1<-cell_transfer_cox1[which(cell_transfer_cox1$p < 0.05),]
cell_transfer_cox1$gene<-row.names(cell_transfer_cox1)
cell_transfer_cox1[,c(1,3,4)]<-log(cell_transfer_cox1[,c(1,3,4)])
forestplot(cell_transfer_cox1, # 森林图文本部分
           mean = cell_transfer_cox1$HR, # 图形元素中HR部分
           lower = cell_transfer_cox1$CIlow,  # 图形元素中置信区间
           upper = cell_transfer_cox1$CIhigh,
           zero = 0, #显示y=0的垂直线
           xlog=FALSE, #x轴的坐标不取对数
           fn.ci_norm = fpDrawCircleCI, #误差条显示方式
           boxsize = 0.1, ##误差条中的圆心点大小
           col=fpColors(line = "#69a794", #误差条的线的颜色   "#dd8047","#a5ab81","#d8b25c","#968c8c"
                        box="#69a794"), #误差条的圆心点的颜色    
           lty.ci = 7,   # 误差条的线的线型
           lwd.ci = 3,   # 误差条的线的宽度
           ci.vertices.height = 0.10, # # 误差条末端的长度
           txt_gp = fpTxtGp(ticks = gpar(cex = 0.5), xlab = gpar(cex = 0.7), cex = 0.7), #文本大小设置
           lineheight = "auto")#线的高度



library(class)
library(caret)
library(e1071)
library(pROC)
library(backports)

colnames(cell_transfer_s1)[15]<-"class";cell_transfer_s1$class<-as.factor(cell_transfer_s1$class)

cell_transfer_s11<-na.omit(cell_transfer_s1)
cell_transfer_s11<-cell_transfer_s11[c(sample(which(cell_transfer_s11$class == 1),60),which(cell_transfer_s11$class == 3)),]
ao1<-sample(which(cell_transfer_s11$class == 1),12)
ao2<-sample(which(cell_transfer_s11$class == 3),12)
cell_transfer_train<-cell_transfer_s11[-c(ao1,ao2),]
cell_transfer_train<-cell_transfer_train[,-c(2,3,5,7,16,17)]
cell_transfer_test<-cell_transfer_s11[c(ao1,ao2),]
cell_transfer_test<-cell_transfer_test[,-c(2,3,5,7,16,17)]


##k近邻##

ao<-c()
for (k in 1:10) {
  knnresult <- knn(train = cell_transfer_train[,1:10],test = cell_transfer_test[,1:10],cl=cell_transfer_train$class,k = k)
  table(cell_transfer_test$class,knnresult)
  #knn_roc <- multiclass.roc(test3$class,as.numeric(knnresult))
  knn_roc <- roc(cell_transfer_test$class,as.numeric(knnresult))
  print(knn_roc)
  #print(sum(diag(table(test4$class,knnresult)))/sum(table(test4$class,knnresult)))
  ao[k]<-knn_roc$auc
}

max(ao)
#找到最合适k#
knnresult <- knn(train = cell_transfer_train[,1:10],test = cell_transfer_test[,1:10],cl=cell_transfer_train$class,k = which(ao == max(ao)))
table(cell_transfer_test$class,knnresult)
#knn_roc <- multiclass.roc(test3$class,as.numeric(knnresult))
knn_roc <- roc(cell_transfer_test$class,as.numeric(knnresult))
plot(knn_roc, print.auc=TRUE, auc.polygon=TRUE, grid=c(0.1, 0.2),grid.col=c("green", "red"), max.auc.polygon=TRUE,auc.polygon.col="skyblue", print.thres=TRUE,main='随机森林模型ROC曲线')

cell_transfer_test$test<-knnresult
ao<-intersect(row.names(cell_transfer_test),row.names(time_sur))
surv<-cbind(cell_transfer_test[ao,],time_sur[ao,c(1,2)])
fit1 <- survfit(Surv(days_to_death, vital_status) ~ test,data = surv)
ggsurvplot(fit1,risk.table=F,
           palette = c("#9abeaf","#f1939c"),
           pval=TRUE,ggtheme = theme_bw(),
           ylab="Survival probabilities",legend=c(0.8,0.9),
           legend.title="",
           pval.method=TRUE) 




########
setwd("/pub6/siyu/hdn/TME")
####
cancerid<-c("BLCA","BRCA","CESC","CHOL","COAD","DLBC","ESCA","GBM","HNSC","KICH","KIRC","KIRP","LGG","LIHC","LUAD","LUSC","MESO","OV","PAAD","PRAD","READ","SARC","SKCM","STAD","TGCT","THCA","THYM","UCEC","UCS","UVM")
cancer_exp <- read.table("/pub6/siyu/ucsc-mRNA-count/TCGA-ACC.htseq_counts.tsv",sep = "\t",header = T,row.names = 1)
for (can in cancerid){
  cancer1 <- read.table(paste0("/pub6/siyu/ucsc-mRNA-count/TCGA-",can,".htseq_counts.tsv"),sep = "\t",header = T,row.names = 1)
  cancer_exp<-cbind(cancer_exp,cancer1)
  print(can)
}
cancer<-cancer_exp
#cancer<-cancer[!apply(cancer,1,function(x){sum(floor(x)==0)>7147}),]
#cancer<-cancer[-which(duplicated(substring(row.names(cancer),1,15))),]
row.names(cancer)<-substring(row.names(cancer),1,15)
colnames(cancer)<-gsub("\\.","-",colnames(cancer))
colnames(cancer)<-substring(colnames(cancer),1,12)
cancer<-cancer[,-which(duplicated(colnames(cancer)))]
cancer<-as.data.frame(t(cancer))
library(AnnotationDbi)
library(org.Hs.eg.db)
cancer$symbol<-mapIds(org.Hs.eg.db,keys=row.names(cancer),column="SYMBOL",keytype="ENSEMBL",multiVals="first")
cancer<-na.omit(cancer)

####
relapse_exp<-read.csv("/pub6/siyu/hdn/chayi/relapse_exp.csv",row.names = 1)
transfer_exp<-read.csv("/pub6/siyu/hdn/chayi/transfer_exp.csv",row.names = 1)
library(AnnotationDbi)
library(org.Hs.eg.db)
relapse_exp$symbol<-mapIds(org.Hs.eg.db,keys=row.names(relapse_exp),column="SYMBOL",keytype="ENSEMBL",multiVals="first")
relapse_exp<-na.omit(relapse_exp)
transfer_exp$symbol<-mapIds(org.Hs.eg.db,keys=row.names(transfer_exp),column="SYMBOL",keytype="ENSEMBL",multiVals="first")
transfer_exp<-na.omit(transfer_exp)


####
relapse_fc<-read.csv("D://danni//1//结果图//转录组//差异基因(比正常)//relapse_.csv",row.names = 1)
relapse_fc$symbol<-mapIds(org.Hs.eg.db,keys=row.names(relapse_fc),column="SYMBOL",keytype="ENSEMBL",multiVals="first")
transfer_fc<-read.csv("D://danni//1//结果图//转录组//差异基因(比正常)//transfer_.csv",row.names = 1)
transfer_fc$symbol<-mapIds(org.Hs.eg.db,keys=row.names(transfer_fc),column="SYMBOL",keytype="ENSEMBL",multiVals="first")

####M6A####
#服务器#
gene_m6a<-c("METTL3","METTL14","METTL16","WTAP","VIRMA","KIA1499","RBM15","RBM15B","ZC3H13","FTO","ALKBH5",
            "YTHDC1","YTHDC2","IGF2BP1","IGF2BP2","IGF2BP3","YTHDF1","YTHDF2","YTHDF3","HNRNPC","HNRNPA2B1","RBM")
ao<-intersect(relapse_exp$symbol,gene_m6a)
ss<-c()
for(i in 1:length(ao)){
  ss[i]<-which(relapse_exp$symbol == ao[i])
}
relapse_m6a<-relapse_exp[ss,]
write.csv(relapse_m6a,"relapse_m6a.csv")

ao<-intersect(transfer_exp$symbol,gene_m6a)
ss<-c()
for(i in 1:length(ao)){
  ss[i]<-which(transfer_exp$symbol == ao[i])
}
transfer_m6a<-transfer_exp[ss,]
write.csv(transfer_m6a,"transfer_m6a.csv")

#R#
m6a_relapse<-read.csv("D://danni//1//结果图//肿瘤微环境//m6a标签//relapse_m6a.csv",row.names = 1)
m6a_transfer<-read.csv("D://danni//1//结果图//肿瘤微环境//m6a标签//transfer_m6a.csv",row.names = 1)

row.names(m6a_relapse)<-m6a_relapse$symbol;m6a_relapse<-m6a_relapse[,-length(colnames(m6a_relapse))]
m6a_relapse<-as.data.frame(t(m6a_relapse))
row.names(m6a_relapse)<-gsub("\\.","-",row.names(m6a_relapse))
ao<-intersect(row.names(m6a_relapse),row.names(cli))
m6a_relapse<-cbind(m6a_relapse[ao,],cli[ao,7])
colnames(m6a_relapse)[length(colnames(m6a_relapse))]<-"class"
m6a_relapse$class<-as.factor(m6a_relapse$class)
for (i in 1:20) {
  ggplot(m6a_relapse,aes(x = class,y = get(colnames(m6a_relapse)[i]) ,group = class)) +
    geom_boxplot(fill = c("#93b5cf","#eea08c","#93b5cf","#eea08c","#93b5cf","#eea08c","#93b5cf","#eea08c")) +
    ggtitle(colnames(m6a_relapse)[i]) + 
    coord_cartesian(ylim = boxplot.stats(m6a_relapse[,i])$stats[c(1, 5)]*1.05) +
    stat_compare_means(comparisons = list(c("1","2"),c("4","5"),c("7","8"),c("10","11")),
                       label.y = c(boxplot.stats(m6a_relapse[,i])$stats[3],
                                   boxplot.stats(m6a_relapse[,i])$stats[3],
                                   boxplot.stats(m6a_relapse[,i])$stats[3],
                                   boxplot.stats(m6a_relapse[,i])$stats[3])) + 
    theme(axis.text.x = element_text(size = 10),    ###主题
          axis.text.y = element_text(size = 10),
          #legend.position = "top",
          #legend.background = element_rect(fill="transparent", size=.5),
          axis.line = element_line(size = 0.5, colour = "black"),
          axis.title = element_blank(),
          strip.background = element_blank(),
          strip.text = element_blank(),
          panel.background = element_blank(),
          panel.border = element_blank(),
          panel.grid = element_blank())
  ggsave(paste0("D://danni//1//结果图//肿瘤微环境//m6a标签//recurrence_",colnames(m6a_relapse)[i],".png"))
}



row.names(m6a_transfer)<-m6a_transfer$symbol;m6a_transfer<-m6a_transfer[,-length(colnames(m6a_transfer))]
m6a_transfer<-as.data.frame(t(m6a_transfer))
row.names(m6a_transfer)<-gsub("\\.","-",row.names(m6a_transfer))
ao<-intersect(row.names(m6a_transfer),row.names(cli))
m6a_transfer<-cbind(m6a_transfer[ao,],cli[ao,7])
colnames(m6a_transfer)[length(colnames(m6a_transfer))]<-"class"
m6a_transfer$class<-as.factor(m6a_transfer$class)
for (i in 1:20) {
  ggplot(m6a_transfer,aes(x = class,y = get(colnames(m6a_transfer)[i]) ,group = class)) +
    geom_boxplot(fill = c("#93b5cf","#e77c8e","#93b5cf","#e77c8e","#93b5cf","#e77c8e","#93b5cf","#e77c8e")) +
    ggtitle(colnames(m6a_transfer)[i]) + 
    coord_cartesian(ylim = boxplot.stats(m6a_transfer[,i])$stats[c(1, 5)]*1.05) +
    stat_compare_means(comparisons = list(c("1","3"),c("4","6"),c("7","9"),c("10","12")),
                       label.y = c(boxplot.stats(m6a_transfer[,i])$stats[3],
                                   boxplot.stats(m6a_transfer[,i])$stats[3],
                                   boxplot.stats(m6a_transfer[,i])$stats[3],
                                   boxplot.stats(m6a_transfer[,i])$stats[3])) + 
    theme(axis.text.x = element_text(size = 10),    ###主题
          axis.text.y = element_text(size = 10),
          #legend.position = "top",
          #legend.background = element_rect(fill="transparent", size=.5),
          axis.line = element_line(size = 0.5, colour = "black"),
          axis.title = element_blank(),
          strip.background = element_blank(),
          strip.text = element_blank(),
          panel.background = element_blank(),
          panel.border = element_blank(),
          panel.grid = element_blank())
  ggsave(paste0("D://danni//1//结果图//肿瘤微环境//m6a标签//metastasis_",colnames(m6a_transfer)[i],".png"))
}



ao<-intersect(relapse_fc$symbol,gene_m6a)
ss<-c()
for(i in 1:length(ao)){
  ss[i]<-which(relapse_fc$symbol == ao[i])
}
relapse_m6a<-relapse_fc[ss,]
row.names(relapse_m6a)<-relapse_m6a$symbol;relapse_m6a<-relapse_m6a[,-dim(relapse_m6a)[2]]
relapse_m6a<-relapse_m6a[,c(1,3,5,7)]

pheatmap(relapse_m6a,cluster_col = F,cluster_row = TRUE,show_rownames = T,display_numbers = F,fontsize_number = 11,
         color = c(colorRampPalette(colors = c("#66c18c","white"))(floor(abs(min(relapse_m6a))/0.001)),colorRampPalette(colors = c("white","#e77c8e"))(floor(abs(max(relapse_m6a))/0.001))),
         breaks = c(seq(min(relapse_m6a),-0.001,by=0.001),seq(0,max(relapse_m6a),by=0.001)),
         angle_col = 0  #坐标方向
         )


ao<-intersect(transfer_fc$symbol,gene_m6a)
ss<-c()
for(i in 1:length(ao)){
  ss[i]<-which(transfer_fc$symbol == ao[i])
}
transfer_m6a<-transfer_fc[ss,]
row.names(transfer_m6a)<-transfer_m6a$symbol;transfer_m6a<-transfer_m6a[,-dim(transfer_m6a)[2]]
transfer_m6a<-transfer_m6a[,c(1,3,5,7)]

pheatmap(transfer_m6a,cluster_col = F,cluster_row = TRUE,show_rownames = T,display_numbers = F,fontsize_number = 11,
         color = c(colorRampPalette(colors = c("#66c18c","white"))(floor(abs(min(transfer_m6a))/0.001)),colorRampPalette(colors = c("white","#e77c8e"))(floor(abs(max(transfer_m6a))/0.001))),
         breaks = c(seq(min(transfer_m6a),-0.001,by=0.001),seq(0,max(transfer_m6a),by=0.001)),
         angle_col = 0  #坐标方向
)

####T细胞炎症####
tcell<-read.table("T cell.txt",header = T,sep = "\t")
gene_tcell<-tcell$Gene.Symbol

ao<-intersect(relapse_exp$symbol,gene_tcell)
ss<-c()
for(i in 1:length(ao)){
  ss[i]<-which(relapse_exp$symbol == ao[i])
}
relapse_tcell<-relapse_exp[ss,]
write.csv(relapse_tcell,"relapse_tcell.csv")


ao<-intersect(transfer_exp$symbol,gene_tcell)
ss<-c()
for(i in 1:length(ao)){
  ss[i]<-which(transfer_exp$symbol == ao[i])
}
transfer_tcell<-transfer_exp[ss,]
write.csv(transfer_tcell,"transfer_tcell.csv")



#R#
tcell_relapse<-read.csv("D://danni//1//结果图//肿瘤微环境//T细胞炎症//relapse_tcell.csv",row.names = 1)
tcell_transfer<-read.csv("D://danni//1//结果图//肿瘤微环境//T细胞炎症//transfer_tcell.csv",row.names = 1)

row.names(tcell_relapse)<-tcell_relapse$symbol;tcell_relapse<-tcell_relapse[,-length(colnames(tcell_relapse))]
tcell_relapse<-as.data.frame(t(tcell_relapse))
row.names(tcell_relapse)<-gsub("\\.","-",row.names(tcell_relapse))
ao<-intersect(row.names(tcell_relapse),row.names(cli))
tcell_relapse<-cbind(tcell_relapse[ao,],cli[ao,7])
colnames(tcell_relapse)[length(colnames(tcell_relapse))]<-"class"
tcell_relapse$class<-as.factor(tcell_relapse$class)
for (i in 1:154) {
  ggplot(tcell_relapse,aes(x = class,y = get(colnames(tcell_relapse)[i]) ,group = class)) +
    geom_boxplot(fill = c("#93b5cf","#eea08c","#93b5cf","#eea08c","#93b5cf","#eea08c","#93b5cf","#eea08c")) +
    ggtitle(colnames(tcell_relapse)[i]) + 
    coord_cartesian(ylim = boxplot.stats(tcell_relapse[,i])$stats[c(1, 5)]*1.05) +
    stat_compare_means(comparisons = list(c("1","2"),c("4","5"),c("7","8"),c("10","11")),
                       label.y = c(boxplot.stats(tcell_relapse[,i])$stats[3],
                                   boxplot.stats(tcell_relapse[,i])$stats[3],
                                   boxplot.stats(tcell_relapse[,i])$stats[3],
                                   boxplot.stats(tcell_relapse[,i])$stats[3])) + 
    theme(axis.text.x = element_text(size = 10),    ###主题
          axis.text.y = element_text(size = 10),
          #legend.position = "top",
          #legend.background = element_rect(fill="transparent", size=.5),
          axis.line = element_line(size = 0.5, colour = "black"),
          axis.title = element_blank(),
          strip.background = element_blank(),
          strip.text = element_blank(),
          panel.background = element_blank(),
          panel.border = element_blank(),
          panel.grid = element_blank())
  ggsave(paste0("D://danni//1//结果图//肿瘤微环境//T细胞炎症//recurrence_",colnames(tcell_relapse)[i],".png"))
}



row.names(tcell_transfer)<-tcell_transfer$symbol;tcell_transfer<-tcell_transfer[,-length(colnames(tcell_transfer))]
tcell_transfer<-as.data.frame(t(tcell_transfer))
row.names(tcell_transfer)<-gsub("\\.","-",row.names(tcell_transfer))
ao<-intersect(row.names(tcell_transfer),row.names(cli))
tcell_transfer<-cbind(tcell_transfer[ao,],cli[ao,7])
colnames(tcell_transfer)[length(colnames(tcell_transfer))]<-"class"
tcell_transfer$class<-as.factor(tcell_transfer$class)
for (i in 1:154) {
  ggplot(tcell_transfer,aes(x = class,y = get(colnames(tcell_transfer)[i]) ,group = class)) +
    geom_boxplot(fill = c("#93b5cf","#e77c8e","#93b5cf","#e77c8e","#93b5cf","#e77c8e","#93b5cf","#e77c8e")) +
    ggtitle(colnames(tcell_transfer)[i]) + 
    coord_cartesian(ylim = boxplot.stats(tcell_transfer[,i])$stats[c(1, 5)]*1.05) +
    stat_compare_means(comparisons = list(c("1","3"),c("4","6"),c("7","9"),c("10","12")),
                       label.y = c(boxplot.stats(tcell_transfer[,i])$stats[3],
                                   boxplot.stats(tcell_transfer[,i])$stats[3],
                                   boxplot.stats(tcell_transfer[,i])$stats[3],
                                   boxplot.stats(tcell_transfer[,i])$stats[3])) + 
    theme(axis.text.x = element_text(size = 10),    ###主题
          axis.text.y = element_text(size = 10),
          #legend.position = "top",
          #legend.background = element_rect(fill="transparent", size=.5),
          axis.line = element_line(size = 0.5, colour = "black"),
          axis.title = element_blank(),
          strip.background = element_blank(),
          strip.text = element_blank(),
          panel.background = element_blank(),
          panel.border = element_blank(),
          panel.grid = element_blank())
  ggsave(paste0("D://danni//1//结果图//肿瘤微环境//T细胞炎症//metastasis_",colnames(tcell_transfer)[i],".png"))
}



tcell<-read.table("D://danni//1//结果图//肿瘤微环境//T细胞炎症//T cell.txt",header = T,sep = "\t")
gene_tcell<-tcell$Gene.Symbol
ao<-intersect(relapse_fc$symbol,gene_tcell)
ss<-c()
for(i in 1:length(ao)){
  ss[i]<-which(relapse_fc$symbol == ao[i])
}
relapse_tcell<-relapse_fc[ss,]
row.names(relapse_tcell)<-relapse_tcell$symbol;relapse_tcell<-relapse_tcell[,-dim(relapse_tcell)[2]]
relapse_tcell<-relapse_tcell[,c(1,3,5,7)]

pheatmap(relapse_tcell,cluster_col = F,cluster_row = TRUE,show_rownames = T,display_numbers = F,fontsize_number = 11,
         color = c(colorRampPalette(colors = c("#66c18c","white"))(floor(abs(min(relapse_tcell))/0.001)),colorRampPalette(colors = c("white","#e77c8e"))(floor(abs(max(relapse_tcell))/0.001))),
         breaks = c(seq(min(relapse_tcell),-0.001,by=0.001),seq(0,max(relapse_tcell),by=0.001)),
         angle_col = 0  #坐标方向
)


ao<-intersect(transfer_fc$symbol,gene_tcell)
ss<-c()
for(i in 1:length(ao)){
  ss[i]<-which(transfer_fc$symbol == ao[i])
}
transfer_tcell<-transfer_fc[ss,]
row.names(transfer_tcell)<-transfer_tcell$symbol;transfer_tcell<-transfer_tcell[,-dim(transfer_tcell)[2]]
transfer_tcell<-transfer_tcell[,c(1,3,5,7)]

pheatmap(transfer_tcell,cluster_col = F,cluster_row = TRUE,show_rownames = T,display_numbers = F,fontsize_number = 11,
         color = c(colorRampPalette(colors = c("#66c18c","white"))(floor(abs(min(transfer_tcell))/0.001)),colorRampPalette(colors = c("white","#e77c8e"))(floor(abs(max(transfer_tcell))/0.001))),
         breaks = c(seq(min(transfer_tcell),-0.001,by=0.001),seq(0,max(transfer_tcell),by=0.001)),
         angle_col = 0  #坐标方向
)


####免疫检查点####
check_Tcell<-read.table("D://danni//1//结果图//肿瘤微环境//免疫检查点//check_Tcell.txt",header = T,sep = "\t")
check_tumor<-read.table("D://danni//1//结果图//肿瘤微环境//免疫检查点//check_tumor.txt",header = T,sep = "\t")
gene_Tcell<-check_Tcell$gene

ao<-intersect(relapse_fc$symbol,gene_Tcell)
ss<-c()
for(i in 1:length(ao)){
  ss[i]<-which(relapse_fc$symbol == ao[i])
}
relapse_Tcell<-relapse_fc[ss,]
row.names(relapse_Tcell)<-relapse_Tcell$symbol;relapse_Tcell<-relapse_Tcell[,-dim(relapse_Tcell)[2]]
relapse_Tcell<-relapse_Tcell[,c(1,3,5,7)]

pheatmap(relapse_Tcell,cluster_col = F,cluster_row = TRUE,show_rownames = T,display_numbers = F,fontsize_number = 11,
         color = c(colorRampPalette(colors = c("#66c18c","white"))(floor(abs(min(relapse_Tcell))/0.001)),colorRampPalette(colors = c("white","#e77c8e"))(floor(abs(max(relapse_Tcell))/0.001))),
         breaks = c(seq(min(relapse_Tcell),-0.001,by=0.001),seq(0,max(relapse_Tcell),by=0.001)),
         angle_col = 0  #坐标方向
)


ao<-intersect(transfer_fc$symbol,gene_Tcell)
ss<-c()
for(i in 1:length(ao)){
  ss[i]<-which(transfer_fc$symbol == ao[i])
}
transfer_Tcell<-transfer_fc[ss,]
row.names(transfer_Tcell)<-transfer_Tcell$symbol;transfer_Tcell<-transfer_Tcell[,-dim(transfer_Tcell)[2]]
transfer_Tcell<-transfer_Tcell[,c(1,3,5,7)]

transfer_Tcell<-transfer_Tcell[c(which(transfer_Tcell$stage1.FC > 0 & transfer_Tcell$stage2.FC < 0 & 
                                         transfer_Tcell$stage3.FC < 0 & transfer_Tcell$stage45.FC < 0),
                                 which(transfer_Tcell$stage1.FC < 0 & transfer_Tcell$stage2.FC > 0 & 
                                         transfer_Tcell$stage3.FC > 0 & transfer_Tcell$stage45.FC > 0)),]
pheatmap(transfer_Tcell,cluster_col = F,cluster_row = TRUE,show_rownames = T,display_numbers = F,fontsize_number = 11,
         color = c(colorRampPalette(colors = c("#66c18c","white"))(floor(abs(min(transfer_tumor))/0.001)),colorRampPalette(colors = c("white","#e77c8e"))(floor(abs(max(transfer_tumor))/0.001))),
         breaks = c(seq(min(transfer_tumor),-0.001,by=0.001),seq(0,max(transfer_tumor),by=0.001)),
         angle_col = 0  #坐标方向
)


gene_tumor<-check_tumor$gene
ao<-intersect(relapse_fc$symbol,gene_tumor)
ss<-c()
for(i in 1:length(ao)){
  ss[i]<-which(relapse_fc$symbol == ao[i])
}
relapse_tumor<-relapse_fc[ss,]
row.names(relapse_tumor)<-relapse_tumor$symbol;relapse_tumor<-relapse_tumor[,-dim(relapse_tumor)[2]]
relapse_tumor<-relapse_tumor[,c(1,3,5,7)]

pheatmap(relapse_tumor,cluster_col = F,cluster_row = TRUE,show_rownames = T,display_numbers = F,fontsize_number = 11,
         color = c(colorRampPalette(colors = c("#66c18c","white"))(floor(abs(min(relapse_tumor))/0.001)),colorRampPalette(colors = c("white","#e77c8e"))(floor(abs(max(relapse_tumor))/0.001))),
         breaks = c(seq(min(relapse_tumor),-0.001,by=0.001),seq(0,max(relapse_tumor),by=0.001)),
         angle_col = 0  #坐标方向
)


ao<-intersect(transfer_fc$symbol,gene_tumor)
ss<-c()
for(i in 1:length(ao)){
  ss[i]<-which(transfer_fc$symbol == ao[i])
}
transfer_tumor<-transfer_fc[ss,]
row.names(transfer_tumor)<-transfer_tumor$symbol;transfer_tumor<-transfer_tumor[,-dim(transfer_tumor)[2]]
transfer_tumor<-transfer_tumor[,c(1,3,5,7)]


transfer_tumor<-transfer_tumor[c(which(transfer_tumor$stage1.FC > 0 & transfer_tumor$stage2.FC < 0 & 
                                         transfer_tumor$stage3.FC < 0 & transfer_tumor$stage45.FC < 0),
                                 which(transfer_tumor$stage1.FC < 0 & transfer_tumor$stage2.FC > 0 & 
                                         transfer_tumor$stage3.FC > 0 & transfer_tumor$stage45.FC > 0)),]
pheatmap(transfer_tumor,cluster_col = F,cluster_row = TRUE,show_rownames = T,display_numbers = F,fontsize_number = 11,
         color = c(colorRampPalette(colors = c("#66c18c","white"))(floor(abs(min(transfer_tumor))/0.001)),colorRampPalette(colors = c("white","#e77c8e"))(floor(abs(max(transfer_tumor))/0.001))),
         breaks = c(seq(min(transfer_tumor),-0.001,by=0.001),seq(0,max(transfer_tumor),by=0.001)),
         angle_col = 0  #坐标方向
)


##t检验##
tr<-read.csv("fpkm.csv",row.names = 1)
library("AnnotationDbi")
library("org.Hs.eg.db")
tr$symbol<-mapIds(org.Hs.eg.db,keys = row.names(tr),column = "SYMBOL",keytype = "ENSEMBL",multiVals = "first")

check_Tcell<-read.table("/pub6/siyu/hdn/TME/check_Tcell.txt",header = T,sep = "\t")
check_tumor<-read.table("/pub6/siyu/hdn/TME/check_tumor.txt",header = T,sep = "\t")
gene_Tcell<-check_Tcell$gene
gene_tumor<-check_tumor$gene

tr_Tcell<-tr[na.omit(match(tr$symbol,gene_Tcell)),]
row.names(tr_Tcell)<-tr_Tcell$symbol
tr_Tcell<-tr_Tcell[,-dim(tr_Tcell)[2]]
tr_Tcell<-as.data.frame(t(tr_Tcell))
tr_tumor<-tr[na.omit(match(tr$symbol,gene_tumor)),]
row.names(tr_tumor)<-tr_tumor$symbol
tr_tumor<-tr_tumor[,-dim(tr_tumor)[2]]
tr_tumor<-as.data.frame(t(tr_tumor))
write.csv(tr_Tcell,"Tcell.csv")
write.csv(tr_tumor,"tumor.csv")
#R#
check_transfer_Tcell<-read.csv("D://danni//1//结果图//肿瘤微环境//免疫检查点//Tcell.csv",row.names = 1)
check_transfer_tumorl<-read.csv("D://danni//1//结果图//肿瘤微环境//免疫检查点//tumor.csv",row.names = 1)


row.names(check_transfer_Tcell)<-gsub("\\.","-",row.names(check_transfer_Tcell))
ao<-intersect(row.names(check_transfer_Tcell),row.names(cli))
check_transfer_Tcell<-cbind(check_transfer_Tcell[ao,],cli[ao,c(4,7)])
check_transfer_Tcell<-check_transfer_Tcell[which(check_transfer_Tcell$category == 3 |
                                                   check_transfer_Tcell$category == 6 |
                                                   check_transfer_Tcell$category == 9 |
                                                   check_transfer_Tcell$category == 12),]
check_transfer_Tcell_s1<-check_transfer_Tcell[which(check_transfer_Tcell$category == 3),]
check_transfer_Tcell_other<-check_transfer_Tcell[-which(check_transfer_Tcell$category == 3),]
check_transfer_Tcell_s1<-as.data.frame(t(check_transfer_Tcell_s1[,-c(26,27)]))
check_transfer_Tcell_other<-as.data.frame(t(check_transfer_Tcell_other[,-c(26,27)]))

ttest_exp_Tcell<-matrix(nr=dim(check_transfer_Tcell_s1)[1],nc=5)
for (i in 1:dim(check_transfer_Tcell_s1)[1]){
  
  t1 <- t.test(as.numeric(check_transfer_Tcell_s1[i,]),as.numeric(check_transfer_Tcell_other[i,]),paired = F)
  print(i)
  
  ttest_exp_Tcell[i,2] <- mean(as.numeric(check_transfer_Tcell_s1[i,]))-mean(as.numeric(check_transfer_Tcell_other[i,]))#此处表达谱为log2转化后的矩阵。若未进行log2转化则为log2(mean/mean)
  ttest_exp_Tcell[i,3] <- t1$statistic;###
  ttest_exp_Tcell[i,4] <- t1$p.value;###
  ttest_exp_Tcell[i,5] <- p.adjust(t1$p.value,"BH");###
}
ttest_exp_Tcell[,1] <- row.names(check_transfer_Tcell_s1)
colnames(ttest_exp_Tcell)<-c("gene_symbol","Foldchange","t$statistic","t$p.value","FDR")
ttest_exp_Tcell<-as.data.frame(ttest_exp_Tcell)



####染色质状态相关####
gene_chromatin<-c("CD38","CD101","CD30L","CD5")

ao<-intersect(relapse_exp$symbol,gene_chromatin)
ss<-c()
for(i in 1:length(ao)){
  ss[i]<-which(relapse_exp$symbol == ao[i])
}
relapse_chromatin<-relapse_exp[ss,]
write.csv(relapse_chromatin,"relapse_chromatin.csv")

ao<-intersect(transfer_exp$symbol,gene_chromatin)
ss<-c()
for(i in 1:length(ao)){
  ss[i]<-which(transfer_exp$symbol == ao[i])
}
transfer_chromatin<-transfer_exp[ss,]
write.csv(transfer_chromatin,"transfer_chromatin.csv")




#R#
chromatin_relapse<-read.csv("D://danni//1//结果图//肿瘤微环境//染色质状态相关标志物//relapse_chromatin.csv",row.names = 1)
chromatin_transfer<-read.csv("D://danni//1//结果图//肿瘤微环境//染色质状态相关标志物//transfer_chromatin.csv",row.names = 1)

row.names(chromatin_relapse)<-chromatin_relapse$symbol;chromatin_relapse<-chromatin_relapse[,-length(colnames(chromatin_relapse))]
chromatin_relapse<-as.data.frame(t(chromatin_relapse))
row.names(chromatin_relapse)<-gsub("\\.","-",row.names(chromatin_relapse))
ao<-intersect(row.names(chromatin_relapse),row.names(cli))
chromatin_relapse<-cbind(chromatin_relapse[ao,],cli[ao,7])
colnames(chromatin_relapse)[length(colnames(chromatin_relapse))]<-"class"
chromatin_relapse$class<-as.factor(chromatin_relapse$class)
for (i in 1:20) {
  ggplot(chromatin_relapse,aes(x = class,y = get(colnames(chromatin_relapse)[i]) ,group = class)) +
    geom_boxplot(fill = c("#93b5cf","#eea08c","#93b5cf","#eea08c","#93b5cf","#eea08c","#93b5cf","#eea08c")) +
    ggtitle(colnames(chromatin_relapse)[i]) + 
    coord_cartesian(ylim = boxplot.stats(chromatin_relapse[,i])$stats[c(1, 5)]*1.05) +
    stat_compare_means(comparisons = list(c("1","2"),c("4","5"),c("7","8"),c("10","11")),
                       label.y = c(boxplot.stats(chromatin_relapse[,i])$stats[3],
                                   boxplot.stats(chromatin_relapse[,i])$stats[3],
                                   boxplot.stats(chromatin_relapse[,i])$stats[3],
                                   boxplot.stats(chromatin_relapse[,i])$stats[3])) + 
    theme(axis.text.x = element_text(size = 10),    ###主题
          axis.text.y = element_text(size = 10),
          #legend.position = "top",
          #legend.background = element_rect(fill="transparent", size=.5),
          axis.line = element_line(size = 0.5, colour = "black"),
          axis.title = element_blank(),
          strip.background = element_blank(),
          strip.text = element_blank(),
          panel.background = element_blank(),
          panel.border = element_blank(),
          panel.grid = element_blank())
  ggsave(paste0("D://danni//1//结果图//肿瘤微环境//染色质状态相关标志物//recurrence_",colnames(chromatin_relapse)[i],".png"))
}



row.names(chromatin_transfer)<-chromatin_transfer$symbol;chromatin_transfer<-chromatin_transfer[,-length(colnames(chromatin_transfer))]
chromatin_transfer<-as.data.frame(t(chromatin_transfer))
row.names(chromatin_transfer)<-gsub("\\.","-",row.names(chromatin_transfer))
ao<-intersect(row.names(chromatin_transfer),row.names(cli))
chromatin_transfer<-cbind(chromatin_transfer[ao,],cli[ao,7])
colnames(chromatin_transfer)[length(colnames(chromatin_transfer))]<-"class"
chromatin_transfer$class<-as.factor(chromatin_transfer$class)
for (i in 1:20) {
  ggplot(chromatin_transfer,aes(x = class,y = get(colnames(chromatin_transfer)[i]) ,group = class)) +
    geom_boxplot(fill = c("#93b5cf","#e77c8e","#93b5cf","#e77c8e","#93b5cf","#e77c8e","#93b5cf","#e77c8e")) +
    ggtitle(colnames(chromatin_transfer)[i]) + 
    coord_cartesian(ylim = boxplot.stats(chromatin_transfer[,i])$stats[c(1, 5)]*1.05) +
    stat_compare_means(comparisons = list(c("1","3"),c("4","6"),c("7","9"),c("10","12")),
                       label.y = c(boxplot.stats(chromatin_transfer[,i])$stats[3],
                                   boxplot.stats(chromatin_transfer[,i])$stats[3],
                                   boxplot.stats(chromatin_transfer[,i])$stats[3],
                                   boxplot.stats(chromatin_transfer[,i])$stats[3])) + 
    theme(axis.text.x = element_text(size = 10),    ###主题
          axis.text.y = element_text(size = 10),
          #legend.position = "top",
          #legend.background = element_rect(fill="transparent", size=.5),
          axis.line = element_line(size = 0.5, colour = "black"),
          axis.title = element_blank(),
          strip.background = element_blank(),
          strip.text = element_blank(),
          panel.background = element_blank(),
          panel.border = element_blank(),
          panel.grid = element_blank())
  ggsave(paste0("D://danni//1//结果图//肿瘤微环境//染色质状态相关标志物//metastasis_",colnames(chromatin_transfer)[i],".png"))
}




ao<-intersect(relapse_fc$symbol,gene_chromatin)
ss<-c()
for(i in 1:length(ao)){
  ss[i]<-which(relapse_fc$symbol == ao[i])
}
relapse_chromatin<-relapse_fc[ss,]
row.names(relapse_chromatin)<-relapse_chromatin$symbol;relapse_chromatin<-relapse_chromatin[,-dim(relapse_chromatin)[2]]
relapse_chromatin<-relapse_chromatin[,c(1,3,5,7)]

pheatmap(relapse_chromatin,cluster_col = F,cluster_row = TRUE,show_rownames = T,display_numbers = F,fontsize_number = 11,
         color = c(colorRampPalette(colors = c("#66c18c","white"))(floor(abs(min(relapse_chromatin))/0.001)),colorRampPalette(colors = c("white","#e77c8e"))(floor(abs(max(relapse_chromatin))/0.001))),
         breaks = c(seq(min(relapse_chromatin),-0.001,by=0.001),seq(0,max(relapse_chromatin),by=0.001)),
         angle_col = 0  #坐标方向
)


ao<-intersect(transfer_fc$symbol,gene_chromatin)
ss<-c()
for(i in 1:length(ao)){
  ss[i]<-which(transfer_fc$symbol == ao[i])
}
transfer_chromatin<-transfer_fc[ss,]
row.names(transfer_chromatin)<-transfer_chromatin$symbol;transfer_chromatin<-transfer_chromatin[,-dim(transfer_chromatin)[2]]
transfer_chromatin<-transfer_chromatin[,c(1,3,5,7)]

pheatmap(transfer_chromatin,cluster_col = F,cluster_row = TRUE,show_rownames = T,display_numbers = F,fontsize_number = 11,
         color = c(colorRampPalette(colors = c("#66c18c","white"))(floor(abs(min(transfer_chromatin))/0.001)),colorRampPalette(colors = c("white","#e77c8e"))(floor(abs(max(transfer_chromatin))/0.001))),
         breaks = c(seq(min(transfer_chromatin),-0.001,by=0.001),seq(0,max(transfer_chromatin),by=0.001)),
         angle_col = 0  #坐标方向
)

####配体受体####
ligand<-read.table("pairs_ligand.txt",header = T,sep = "\t")
receptor<-read.table("pairs_receptor.txt",header = T,sep = "\t")
gene_ligand<-ligand$gene
gene_receptor<-receptor$gene

relapse_exp<-read.csv("/pub6/siyu/hdn/chayi/relapse_exp.csv",row.names = 1)
transfer_exp<-read.csv("/pub6/siyu/hdn/chayi/transfer_exp.csv",row.names = 1)
cli<-read.table("clinical.txt",header = T,sep = "\t",row.names = 1)
cli1<-cli[which(cli$category == 1),]
cli2<-cli[which(cli$category == 2),]
cli3<-cli[which(cli$category == 3),]
cli4<-cli[which(cli$category == 4 |cli$category == 7 |cli$category == 10),]
cli5<-cli[which(cli$category == 5 |cli$category == 8 |cli$category == 11),]
cli6<-cli[which(cli$category == 6 |cli$category == 9 |cli$category == 12),]

library(AnnotationDbi)
library(org.Hs.eg.db)
relapse_exp$symbol<-mapIds(org.Hs.eg.db,keys=row.names(relapse_exp),column="SYMBOL",keytype="ENSEMBL",multiVals="first")
relapse_exp<-na.omit(relapse_exp)
colnames(relapse_exp)<-gsub("\\.","-",colnames(relapse_exp))
transfer_exp$symbol<-mapIds(org.Hs.eg.db,keys=row.names(transfer_exp),column="SYMBOL",keytype="ENSEMBL",multiVals="first")
transfer_exp<-na.omit(transfer_exp)
colnames(transfer_exp)<-gsub("\\.","-",colnames(transfer_exp))


ao<-intersect(row.names(cli1),colnames(relapse_exp))
data1<-relapse_exp[,ao]
ao<-intersect(row.names(cli2),colnames(relapse_exp))
data2<-relapse_exp[,ao]
ao<-intersect(row.names(cli4),colnames(relapse_exp))
data4<-relapse_exp[,ao]
ao<-intersect(row.names(cli5),colnames(relapse_exp))
data5<-relapse_exp[,ao]

library(dplyr)
library(limma)
pan<-cbind(data1,data2)
group1<-rep("none",ncol(data1))
group2<-rep("relapse",ncol(data2))
group_list<-as.factor(c(group1,group2))
design <- model.matrix(~0+factor(group_list))
colnames(design)=levels(factor(group_list))
contrast.matrix<-makeContrasts("none-relapse",
                               levels = design)
fit <- lmFit(pan,design)
fit2 <- contrasts.fit(fit, contrast.matrix) 
fit2 <- eBayes(fit2) 
DEG<-topTable(fit2, coef=1, n=Inf) %>% na.omit()  ## coef比较分组 n基因数
head(DEG)
write.csv(DEG,"relapse_s1.csv")


pan<-cbind(data4,data5)
group1<-rep("none",ncol(data4))
group2<-rep("relapse",ncol(data5))
group_list<-as.factor(c(group1,group2))
design <- model.matrix(~0+factor(group_list))
colnames(design)=levels(factor(group_list))
contrast.matrix<-makeContrasts("none-relapse",
                               levels = design)
fit <- lmFit(pan,design)
fit2 <- contrasts.fit(fit, contrast.matrix) 
fit2 <- eBayes(fit2) 
DEG<-topTable(fit2, coef=1, n=Inf) %>% na.omit()  ## coef比较分组 n基因数
head(DEG)
write.csv(DEG,"relapse_others.csv")





ao<-intersect(row.names(cli1),colnames(transfer_exp))
data1<-transfer_exp[,ao]
ao<-intersect(row.names(cli3),colnames(transfer_exp))
data3<-transfer_exp[,ao]
ao<-intersect(row.names(cli4),colnames(transfer_exp))
data4<-transfer_exp[,ao]
ao<-intersect(row.names(cli6),colnames(transfer_exp))
data6<-transfer_exp[,ao]

pan<-cbind(data1,data3)
group1<-rep("none",ncol(data1))
group2<-rep("transfer",ncol(data3))
group_list<-as.factor(c(group1,group2))
design <- model.matrix(~0+factor(group_list))
colnames(design)=levels(factor(group_list))
contrast.matrix<-makeContrasts("none-transfer",
                               levels = design)
fit <- lmFit(pan,design)
fit2 <- contrasts.fit(fit, contrast.matrix) 
fit2 <- eBayes(fit2) 
DEG<-topTable(fit2, coef=1, n=Inf) %>% na.omit()  ## coef比较分组 n基因数
head(DEG)
write.csv(DEG,"transfer_s1.csv")


pan<-cbind(data4,data6)
group1<-rep("none",ncol(data4))
group2<-rep("transfer",ncol(data6))
group_list<-as.factor(c(group1,group2))
design <- model.matrix(~0+factor(group_list))
colnames(design)=levels(factor(group_list))
contrast.matrix<-makeContrasts("none-transfer",
                               levels = design)
fit <- lmFit(pan,design)
fit2 <- contrasts.fit(fit, contrast.matrix) 
fit2 <- eBayes(fit2) 
DEG<-topTable(fit2, coef=1, n=Inf) %>% na.omit()  ## coef比较分组 n基因数
head(DEG)
write.csv(DEG,"transfer_others.csv")

####靶向治疗####
target<-read.table("D://danni//1//结果图//肿瘤微环境//靶向治疗//target.txt",header = T,sep = "\t")
gene_target<-target$gene
ao<-intersect(relapse_fc$symbol,gene_target)
ss<-c()
for(i in 1:length(ao)){
  ss[i]<-which(relapse_fc$symbol == ao[i])
}
relapse_target<-relapse_fc[ss,]
row.names(relapse_target)<-relapse_target$symbol;relapse_target<-relapse_target[,-dim(relapse_target)[2]]
relapse_target<-relapse_target[,c(1,3,5,7)]

pheatmap(relapse_target,cluster_col = F,cluster_row = TRUE,show_rownames = T,display_numbers = F,fontsize_number = 11,
         color = c(colorRampPalette(colors = c("#66c18c","white"))(floor(abs(min(relapse_target))/0.001)),colorRampPalette(colors = c("white","#e77c8e"))(floor(abs(max(relapse_target))/0.001))),
         breaks = c(seq(min(relapse_target),-0.001,by=0.001),seq(0,max(relapse_target),by=0.001)),
         angle_col = 0  #坐标方向
)



ao<-intersect(transfer_fc$symbol,gene_target)
ss<-c()
for(i in 1:length(ao)){
  ss[i]<-which(transfer_fc$symbol == ao[i])
}
transfer_target<-transfer_fc[ss,]
row.names(transfer_target)<-transfer_target$symbol;transfer_target<-transfer_target[,-dim(transfer_target)[2]]
transfer_target<-transfer_target[,c(1,3,5,7)]

pheatmap(transfer_target,cluster_col = F,cluster_row = TRUE,show_rownames = T,display_numbers = F,fontsize_number = 11,
         color = c(colorRampPalette(colors = c("#66c18c","white"))(floor(abs(min(transfer_target))/0.001)),colorRampPalette(colors = c("white","#e77c8e"))(floor(abs(max(transfer_target))/0.001))),
         breaks = c(seq(min(transfer_target),-0.001,by=0.001),seq(0,max(transfer_target),by=0.001)),
         angle_col = 0  #坐标方向
)


#服务器#
setwd("/pub6/siyu/hdn/mutation")
mutation1<-read.csv("mutation1.csv",row.names = 1)
mutation2<-read.csv("mutation2.csv",row.names = 1)
mutation3<-read.csv("mutation3.csv",row.names = 1)
mutation4<-read.csv("mutation4.csv",row.names = 1)
mutation5<-read.csv("mutation5.csv",row.names = 1)
mutation6<-read.csv("mutation6.csv",row.names = 1)
mutation7<-read.csv("mutation7.csv",row.names = 1)
mutation8<-read.csv("mutation8.csv",row.names = 1)
mutation9<-read.csv("mutation9.csv",row.names = 1)
mutation10<-read.csv("mutation10.csv",row.names = 1)
mutation11<-read.csv("mutation11.csv",row.names = 1)
mutation12<-read.csv("mutation12.csv",row.names = 1)

mutation7<-cbind(mutation7,mutation10)
mutation8<-cbind(mutation8,mutation11)
mutation9<-cbind(mutation9,mutation12)

seq1<-apply(mutation1,1,mean)
seq2<-apply(mutation2,1,mean)
seq3<-apply(mutation3,1,mean)
seq4<-apply(mutation4,1,mean)
seq5<-apply(mutation5,1,mean)
seq6<-apply(mutation6,1,mean)
seq7<-apply(mutation7,1,mean)
seq8<-apply(mutation8,1,mean)
seq9<-apply(mutation9,1,mean)
seq<-cbind(seq1,seq2,seq3,seq4,seq5,seq6,seq7,seq8,seq9)
row.names(seq)<-row.names(mutation1)

target<-read.table("target.txt",header = T,sep = "\t")
ao<-intersect(row.names(seq),target$Gene)
seq<-seq[ao,]
write.csv(seq,"seq_345.csv")


library(pheatmap)
mu_target<-read.csv("D://danni//1//结果图//肿瘤微环境//靶向治疗//target.csv",row.names = 1)
for(i in 1:153){
  mu_target[i,1:3]<-mu_target[i,1:3]-mu_target[i,3]
  mu_target[i,4:6]<-mu_target[i,4:6]-mu_target[i,6]
  mu_target[i,7:9]<-mu_target[i,7:9]-mu_target[i,9]
}

pheatmap(mu_target,cluster_col = F,cluster_row = TRUE,show_rownames = T,display_numbers = F,fontsize_number = 11,
         color = c(colorRampPalette(colors = c("#66c18c","white"))(floor(abs(min(mu_target))/0.001)),colorRampPalette(colors = c("white","#e77c8e"))(floor(abs(max(mu_target))/0.001))),
         breaks = c(seq(min(mu_target),-0.001,by=0.001),seq(0,max(mu_target),by=0.001)),
         angle_col = 0  #坐标方向
)
ss<-mu_target[which(mu_target$seq1 < 0 & mu_target$seq2 < 0),]
ss1<-ss[which(ss$seq4 > 0 | ss$seq5 >0),]
ss2<-ss1[which(ss1$seq7 > 0 | ss1$seq8 >0),]

mu_target$gene<-row.names(mu_target)
mu_target<-melt(mu_target,"gene")
mu_target$stage<-c(rep("stage I",459),rep("stage II",459),rep("stage III+IV+V",459))
s<-c(rep("primary",153),rep("recurrence",153),rep("metastasis",153))
mu_target$class<-rep(s,3)
ggplot(mu_target,aes(x = gene, y  = value)) + 
  geom_point(aes(color = factor(class)),size = 3)+ #,shape = 19
  #scale_size_continuous(limits  = c(-6,4),breaks = seq(-6,4,1))+ #调整大小
  #scale_color_gradient2(low="blue",high="red",midpoint = 0)+
  #scale_color_gradientn(colours = c("blue","white","red"))+
  #scale_color_brewer(type = "seq",palette = "Set2") +
  facet_wrap(.~stage,ncol = 1,scales = "free") +
  coord_flip()+
  scale_colour_manual(values=c("#9abeaf","#8fb2c9","#f8e0b0","#f1939c"))+
  theme(axis.text.x = element_text(size = 10),    ###主题
        axis.text.y = element_text(size = 10),
        #legend.position = "top",
        #legend.background = element_rect(fill="transparent", size=.5),
        axis.line = element_blank(),
        axis.title = element_blank(),
        strip.background = element_blank(),
        strip.text = element_blank(),
        panel.background = element_blank(),
        panel.border = element_blank(),
        panel.grid = element_blank())





mu_target<-read.csv("D://danni//1//结果图//肿瘤微环境//靶向治疗//target.csv")
colnames(mu_target)[1]<-"gene"
mu_target<-mu_target[na.omit(match(row.names(ss2),mu_target$gene)),]
mu_target<-mu_target[which(mu_target$seq3 > 0.05),]
library(reshape2)
mu_target<-melt(mu_target,"gene")
mu_target$stage<-c(rep("stage I",42),rep("stage II",42),rep("stage III+IV+V",42))
s<-c(rep("primary",14),rep("recurrence",14),rep("metastasis",14))
mu_target$class<-rep(s,3)



ggplot(mu_target,aes(x=as.factor(class),y = value,fill = as.factor(stage))) + 
  geom_bar(stat="identity",position="dodge") +
  scale_fill_manual(values = c("#9abeaf","#f8e0b0","#f1939c","#9abeaf","#f8e0b0","#f1939c","#9abeaf","#f8e0b0","#f1939c")) +
  facet_wrap(.~gene,nrow = 10) +
  #coord_flip()+
  theme(axis.text.x = element_text(size = 10),    ###主题
        axis.text.y = element_text(size = 10),
        #legend.position = "top",
        #legend.background = element_rect(fill="transparent", size=.5),
        axis.line = element_line(size = 0.5, colour = "black"),
        #axis.title = element_blank(),
        strip.background = element_blank(),
        #strip.text = element_blank(),
        panel.background = element_blank()
        #panel.border = element_blank(),
        #panel.grid = element_blank()
        )


ggplot(mu_target,aes(x=as.factor(stage),y = value,fill = factor(class,levels = c("primary","recurrence","metastasis")))) + 
  geom_bar(stat="identity",position="dodge") +
  scale_fill_manual(values = c("#9abeaf","#f8e0b0","#f1939c")) +
  facet_wrap(.~gene,nrow = 5,scales = "free") +
  #coord_flip()+
  theme(axis.text.x = element_text(size = 10),    ###主题
        axis.text.y = element_text(size = 10),
        legend.position = "top",
        #legend.background = element_rect(fill="transparent", size=.5),
        axis.line = element_line(size = 0.5, colour = "black"),
        #axis.title = element_blank(),
        strip.background = element_blank(),
        #strip.text = element_blank(),
        panel.background = element_blank()
        #panel.border = element_blank(),
        #panel.grid = element_blank()
  )





####T细胞障碍####
up_regulation<-read.table("D://danni//1//结果图//肿瘤微环境//T细胞障碍//正调控.txt",header = T,sep = "\t")
down_regulation<-read.table("D://danni//1//结果图//肿瘤微环境//T细胞障碍//负调控.txt",header = T,sep = "\t")
regulation<-read.csv("D://danni//1//结果图//肿瘤微环境//T细胞障碍//障碍基因类型调控.csv")
gene_up<-up_regulation$gene
gene_down<-down_regulation$gene
gene_regulation<-regulation$gene



ao<-intersect(relapse_fc$symbol,gene_up)
ss<-c()
for(i in 1:length(ao)){
  ss[i]<-which(relapse_fc$symbol == ao[i])
}
relapse_up<-relapse_fc[ss,]
row.names(relapse_up)<-relapse_up$symbol;relapse_up<-relapse_up[,-dim(relapse_up)[2]]
relapse_up<-relapse_up[,c(1,3,5,7)]

pheatmap(relapse_up,cluster_col = F,cluster_row = TRUE,show_rownames = T,display_numbers = F,fontsize_number = 11,
         color = c(colorRampPalette(colors = c("#66c18c","white"))(floor(abs(min(relapse_up))/0.001)),colorRampPalette(colors = c("white","#e77c8e"))(floor(abs(max(relapse_up))/0.001))),
         breaks = c(seq(min(relapse_up),-0.001,by=0.001),seq(0,max(relapse_up),by=0.001)),
         angle_col = 0  #坐标方向
)


ao<-intersect(transfer_fc$symbol,gene_up)
ss<-c()
for(i in 1:length(ao)){
  ss[i]<-which(transfer_fc$symbol == ao[i])
}
transfer_up<-transfer_fc[ss,]
row.names(transfer_up)<-transfer_up$symbol;transfer_up<-transfer_up[,-dim(transfer_up)[2]]
transfer_up<-transfer_up[,c(1,3,5,7)]

pheatmap(transfer_up,cluster_col = F,cluster_row = TRUE,show_rownames = T,display_numbers = F,fontsize_number = 11,
         color = c(colorRampPalette(colors = c("#66c18c","white"))(floor(abs(min(transfer_up))/0.001)),colorRampPalette(colors = c("white","#e77c8e"))(floor(abs(max(transfer_up))/0.001))),
         breaks = c(seq(min(transfer_up),-0.001,by=0.001),seq(0,max(transfer_up),by=0.001)),
         angle_col = 0  #坐标方向
)



ao<-intersect(relapse_fc$symbol,gene_down)
ss<-c()
for(i in 1:length(ao)){
  ss[i]<-which(relapse_fc$symbol == ao[i])
}
relapse_down<-relapse_fc[ss,]
row.names(relapse_down)<-relapse_down$symbol;relapse_down<-relapse_down[,-dim(relapse_down)[2]]
relapse_down<-relapse_down[,c(1,3,5,7)]

pheatmap(relapse_down,cluster_col = F,cluster_row = TRUE,show_rownames = T,display_numbers = F,fontsize_number = 11,
         color = c(colorRampPalette(colors = c("#66c18c","white"))(floor(abs(min(relapse_down))/0.001)),colorRampPalette(colors = c("white","#e77c8e"))(floor(abs(max(relapse_down))/0.001))),
         breaks = c(seq(min(relapse_down),-0.001,by=0.001),seq(0,max(relapse_down),by=0.001)),
         angle_col = 0  #坐标方向
)


ao<-intersect(transfer_fc$symbol,gene_down)
ss<-c()
for(i in 1:length(ao)){
  ss[i]<-which(transfer_fc$symbol == ao[i])
}
transfer_down<-transfer_fc[ss,]
row.names(transfer_down)<-transfer_down$symbol;transfer_down<-transfer_down[,-dim(transfer_down)[2]]
transfer_down<-transfer_down[,c(1,3,5,7)]

pheatmap(transfer_down,cluster_col = F,cluster_row = TRUE,show_rownames = T,display_numbers = F,fontsize_number = 11,
         color = c(colorRampPalette(colors = c("#66c18c","white"))(floor(abs(min(transfer_down))/0.001)),colorRampPalette(colors = c("white","#e77c8e"))(floor(abs(max(transfer_down))/0.001))),
         breaks = c(seq(min(transfer_down),-0.001,by=0.001),seq(0,max(transfer_down),by=0.001)),
         angle_col = 0  #坐标方向
)






#########################################
library(pheatmap)
####GSVA####
library(GSEABase)
library(GSVA)
mySet <- getGmt("D://danni//1//结果图//cell state//mygeneset2.gmt")
relapse_exp<-read.csv("relapse.csv",row.names = 1)
gsva_relapse <- gsva(expr=as.matrix(relapse_exp), gset.idx.list=mySet, kcdf="Poisson", parallel.sz=4)
transfer_exp<-read.csv("transfer.csv",row.names = 1)
gsva_relapse <- gsva(expr=as.matrix(transfer_exp), gset.idx.list=mySet, kcdf="Poisson", parallel.sz=4)

library(ggplot2)
library(ggsignif)
library(ggpubr)
ggplot(relapse2,aes(x = factor(class),y = value ,fill = factor(class))) +
  geom_boxplot()+
  scale_fill_manual(values = c("#9abeaf","#8fb2c9","#f8e0b0","#f1939c")) +
  stat_compare_means(comparisons = list(c("2","5"),c("2","8"),c("2","11")))+
  facet_wrap(variable~.,ncol = 3,scales = "free") +
  #coord_cartesian(ylim = ) +
  theme(axis.text.x = element_text(size = 10),    ###主题
        axis.text.y = element_text(size = 10),
        #legend.position = "top",
        #legend.background = element_rect(fill="transparent", size=.5),
        axis.line = element_line(size = 0.5, colour = "black"),
        axis.title = element_blank(),
        strip.background = element_blank(),
        #strip.text = element_blank(),
        panel.background = element_blank(),
        panel.border = element_blank(),
        panel.grid = element_blank())

ggplot(transfer2,aes(x = factor(class),y = value ,fill = factor(class))) +
  geom_boxplot()+
  scale_fill_manual(values = c("#9abeaf","#8fb2c9","#f8e0b0","#f1939c")) +
  stat_compare_means(comparisons = list(c("3","6"),c("3","9"),c("3","12")))+
  facet_wrap(variable~.,ncol = 5,scales = "free") +
  #coord_cartesian(ylim = ) +
  theme(axis.text.x = element_text(size = 10),    ###主题
        axis.text.y = element_text(size = 10),
        #legend.position = "top",
        #legend.background = element_rect(fill="transparent", size=.5),
        axis.line = element_line(size = 0.5, colour = "black"),
        axis.title = element_blank(),
        strip.background = element_blank(),
        #strip.text = element_blank(),
        panel.background = element_blank(),
        panel.border = element_blank(),
        panel.grid = element_blank())

####配体受体(0.8)####
pairs_relapse<-cbind(ligand_relapse,receptor_relapse)
write.csv(pairs_relapse,"pairs_relapse.csv")
pairs_transfer<-cbind(ligand_transfer,receptor_transfer)
write.csv(pairs_transfer,"pairs_transfer.csv")


####细胞状态热图####
gene<-read.table("cellstate.txt",header = T,sep = "\t")
fc_relapse<-fc_relapse[-which(duplicated(fc_relapse$symbol)),]
fc_relapse<-na.omit(fc_relapse)
row.names(fc_relapse)<-fc_relapse$symbol
fc_transfer<-fc_transfer[-which(duplicated(fc_transfer$symbol)),]
fc_transfer<-na.omit(fc_transfer)
row.names(fc_transfer)<-fc_transfer$symbol

Angiogenesis<-gene$GeneName[which(gene$Signature == "Angiogenesis")]
Apoptosis<-gene$GeneName[which(gene$Signature == "Apoptosis")]
CellCycle<-gene$GeneName[which(gene$Signature == "Cell.Cycle")]
DNArepair<-gene$GeneName[which(gene$Signature == "DNA.repair")]
EMT<-gene$GeneName[which(gene$Signature == "EMT")]
Hypoxia<-gene$GeneName[which(gene$Signature == "Hypoxia")]
Metastasis<-gene$GeneName[which(gene$Signature == "Metastasis")]
Proliferation<-gene$GeneName[which(gene$Signature == "Proliferation")]
Stemness<-gene$GeneName[which(gene$Signature == "Stemness")]


#relapse#
state<-c("CellCycle","Apoptosis","Hypoxia","Metastasis")
data<-matrix(data = NA,ncol = 6)
colnames(data)<-c(colnames(fc_relapse),"class")
for(i in state){
  data1<-fc_relapse[get(i),]
  data1$class<-i
  data<-rbind(data,data1)
}
data<-na.omit(data)
data1<-data[which(data$s1FC > 0.8 & data$s1p < 0.05 & data$s2345FC < 0.8),]
data2<-data[which(data$s1FC < -0.8 & data$s1p < 0.05 & data$s2345FC > -0.8),]
data<-rbind(data1,data2)
data<-data[order(data$class),]
labels_relapse<-data$class
data_relapse<-data[,c(1,3)]

pheatmap(data_relapse,cluster_col = F,cluster_row = F,display_numbers = F,fontsize_number = 11,labels_row  = labels_relapse,
         color = c(colorRampPalette(colors = c("#1781b5","white"))(floor(abs(min(data_transfer))/0.001)),colorRampPalette(colors = c("white","#f9cb8b"))(floor(abs(max(data_transfer))/0.001))),
         breaks = c(seq(min(data_transfer),-0.001,by=0.001),seq(0,max(data_transfer),by=0.001)),
         angle_col = 0  #坐标方向
)



#transfer#
state<-c("CellCycle","Angiogenesis","EMT","DNArepair","Proliferation","Stemness")
data<-matrix(data = NA,ncol = 6)
colnames(data)<-c(colnames(fc_transfer),"class")
for(i in state){
  data1<-fc_transfer[get(i),]
  data1$class<-i
  data<-rbind(data,data1)
}
data<-na.omit(data)
data1<-data[which(data$s1FC > 0.8 & data$s1p < 0.05 & data$s2345FC < 0.8),]
data2<-data[which(data$s1FC < -0.8 & data$s1p < 0.05 & data$s2345FC > -0.8),]
data<-rbind(data1,data2)
data<-data[order(data$class),]
labels_transfer<-data$class
data_transfer<-data[,c(1,3)]

pheatmap(data_transfer,cluster_col = F,cluster_row = F,display_numbers = F,fontsize_number = 11,labels_row  = labels_transfer,
         color = c(colorRampPalette(colors = c("#1781b5","white"))(floor(abs(min(data_transfer))/0.001)),colorRampPalette(colors = c("white","#f9cb8b"))(floor(abs(max(data_transfer))/0.001))),
         breaks = c(seq(min(data_transfer),-0.001,by=0.001),seq(0,max(data_transfer),by=0.001)),
         angle_col = 0  #坐标方向
)





################################################
